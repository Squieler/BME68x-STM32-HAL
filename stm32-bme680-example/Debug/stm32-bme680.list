
stm32-bme680.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800ada8  0800ada8  0001ada8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b37c  0800b37c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b37c  0800b37c  0001b37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b384  0800b384  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b38c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001f4  0800b580  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800b580  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e428  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2f  00000000  00000000  0002e64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  00030580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a80  00000000  00000000  00031090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017415  00000000  00000000  00031b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d3f1  00000000  00000000  00048f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ad5d  00000000  00000000  00056316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1073  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000437c  00000000  00000000  000e10c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad90 	.word	0x0800ad90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800ad90 	.word	0x0800ad90

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a4 	b.w	8000ff8 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468c      	mov	ip, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	f040 8083 	bne.w	8000e4a <__udivmoddi4+0x116>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d947      	bls.n	8000dda <__udivmoddi4+0xa6>
 8000d4a:	fab2 f282 	clz	r2, r2
 8000d4e:	b142      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	f1c2 0020 	rsb	r0, r2, #32
 8000d54:	fa24 f000 	lsr.w	r0, r4, r0
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	4097      	lsls	r7, r2
 8000d5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d60:	4094      	lsls	r4, r2
 8000d62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d66:	0c23      	lsrs	r3, r4, #16
 8000d68:	fbbc f6f8 	udiv	r6, ip, r8
 8000d6c:	fa1f fe87 	uxth.w	lr, r7
 8000d70:	fb08 c116 	mls	r1, r8, r6, ip
 8000d74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d78:	fb06 f10e 	mul.w	r1, r6, lr
 8000d7c:	4299      	cmp	r1, r3
 8000d7e:	d909      	bls.n	8000d94 <__udivmoddi4+0x60>
 8000d80:	18fb      	adds	r3, r7, r3
 8000d82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d86:	f080 8119 	bcs.w	8000fbc <__udivmoddi4+0x288>
 8000d8a:	4299      	cmp	r1, r3
 8000d8c:	f240 8116 	bls.w	8000fbc <__udivmoddi4+0x288>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	1a5b      	subs	r3, r3, r1
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d909      	bls.n	8000dc0 <__udivmoddi4+0x8c>
 8000dac:	193c      	adds	r4, r7, r4
 8000dae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db2:	f080 8105 	bcs.w	8000fc0 <__udivmoddi4+0x28c>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	f240 8102 	bls.w	8000fc0 <__udivmoddi4+0x28c>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443c      	add	r4, r7
 8000dc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc4:	eba4 040e 	sub.w	r4, r4, lr
 8000dc8:	2600      	movs	r6, #0
 8000dca:	b11d      	cbz	r5, 8000dd4 <__udivmoddi4+0xa0>
 8000dcc:	40d4      	lsrs	r4, r2
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xaa>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f282 	clz	r2, r2
 8000de2:	2a00      	cmp	r2, #0
 8000de4:	d150      	bne.n	8000e88 <__udivmoddi4+0x154>
 8000de6:	1bcb      	subs	r3, r1, r7
 8000de8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	2601      	movs	r6, #1
 8000df2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000df6:	0c21      	lsrs	r1, r4, #16
 8000df8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e00:	fb08 f30c 	mul.w	r3, r8, ip
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0xe4>
 8000e08:	1879      	adds	r1, r7, r1
 8000e0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0xe2>
 8000e10:	428b      	cmp	r3, r1
 8000e12:	f200 80e9 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e16:	4684      	mov	ip, r0
 8000e18:	1ac9      	subs	r1, r1, r3
 8000e1a:	b2a3      	uxth	r3, r4
 8000e1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e28:	fb08 f800 	mul.w	r8, r8, r0
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x10c>
 8000e30:	193c      	adds	r4, r7, r4
 8000e32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x10a>
 8000e38:	45a0      	cmp	r8, r4
 8000e3a:	f200 80d9 	bhi.w	8000ff0 <__udivmoddi4+0x2bc>
 8000e3e:	4618      	mov	r0, r3
 8000e40:	eba4 0408 	sub.w	r4, r4, r8
 8000e44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e48:	e7bf      	b.n	8000dca <__udivmoddi4+0x96>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x12e>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	f000 80b1 	beq.w	8000fb6 <__udivmoddi4+0x282>
 8000e54:	2600      	movs	r6, #0
 8000e56:	e9c5 0100 	strd	r0, r1, [r5]
 8000e5a:	4630      	mov	r0, r6
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	fab3 f683 	clz	r6, r3
 8000e66:	2e00      	cmp	r6, #0
 8000e68:	d14a      	bne.n	8000f00 <__udivmoddi4+0x1cc>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d302      	bcc.n	8000e74 <__udivmoddi4+0x140>
 8000e6e:	4282      	cmp	r2, r0
 8000e70:	f200 80b8 	bhi.w	8000fe4 <__udivmoddi4+0x2b0>
 8000e74:	1a84      	subs	r4, r0, r2
 8000e76:	eb61 0103 	sbc.w	r1, r1, r3
 8000e7a:	2001      	movs	r0, #1
 8000e7c:	468c      	mov	ip, r1
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	d0a8      	beq.n	8000dd4 <__udivmoddi4+0xa0>
 8000e82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e86:	e7a5      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e90:	4097      	lsls	r7, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9a:	40d9      	lsrs	r1, r3
 8000e9c:	4330      	orrs	r0, r6
 8000e9e:	0c03      	lsrs	r3, r0, #16
 8000ea0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ea4:	fa1f f887 	uxth.w	r8, r7
 8000ea8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000eac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb0:	fb06 f108 	mul.w	r1, r6, r8
 8000eb4:	4299      	cmp	r1, r3
 8000eb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eba:	d909      	bls.n	8000ed0 <__udivmoddi4+0x19c>
 8000ebc:	18fb      	adds	r3, r7, r3
 8000ebe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ec2:	f080 808d 	bcs.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ec6:	4299      	cmp	r1, r3
 8000ec8:	f240 808a 	bls.w	8000fe0 <__udivmoddi4+0x2ac>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	443b      	add	r3, r7
 8000ed0:	1a5b      	subs	r3, r3, r1
 8000ed2:	b281      	uxth	r1, r0
 8000ed4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000edc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee0:	fb00 f308 	mul.w	r3, r0, r8
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	d907      	bls.n	8000ef8 <__udivmoddi4+0x1c4>
 8000ee8:	1879      	adds	r1, r7, r1
 8000eea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eee:	d273      	bcs.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d971      	bls.n	8000fd8 <__udivmoddi4+0x2a4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4439      	add	r1, r7
 8000ef8:	1acb      	subs	r3, r1, r3
 8000efa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000efe:	e778      	b.n	8000df2 <__udivmoddi4+0xbe>
 8000f00:	f1c6 0c20 	rsb	ip, r6, #32
 8000f04:	fa03 f406 	lsl.w	r4, r3, r6
 8000f08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f0c:	431c      	orrs	r4, r3
 8000f0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f12:	fa01 f306 	lsl.w	r3, r1, r6
 8000f16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	0c3b      	lsrs	r3, r7, #16
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fa1f f884 	uxth.w	r8, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f32:	fb09 fa08 	mul.w	sl, r9, r8
 8000f36:	458a      	cmp	sl, r1
 8000f38:	fa02 f206 	lsl.w	r2, r2, r6
 8000f3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0x220>
 8000f42:	1861      	adds	r1, r4, r1
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	d248      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4a:	458a      	cmp	sl, r1
 8000f4c:	d946      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000f4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f52:	4421      	add	r1, r4
 8000f54:	eba1 010a 	sub.w	r1, r1, sl
 8000f58:	b2bf      	uxth	r7, r7
 8000f5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f66:	fb00 f808 	mul.w	r8, r0, r8
 8000f6a:	45b8      	cmp	r8, r7
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x24a>
 8000f6e:	19e7      	adds	r7, r4, r7
 8000f70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f74:	d22e      	bcs.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f76:	45b8      	cmp	r8, r7
 8000f78:	d92c      	bls.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	4427      	add	r7, r4
 8000f7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f82:	eba7 0708 	sub.w	r7, r7, r8
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	454f      	cmp	r7, r9
 8000f8c:	46c6      	mov	lr, r8
 8000f8e:	4649      	mov	r1, r9
 8000f90:	d31a      	bcc.n	8000fc8 <__udivmoddi4+0x294>
 8000f92:	d017      	beq.n	8000fc4 <__udivmoddi4+0x290>
 8000f94:	b15d      	cbz	r5, 8000fae <__udivmoddi4+0x27a>
 8000f96:	ebb3 020e 	subs.w	r2, r3, lr
 8000f9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fa2:	40f2      	lsrs	r2, r6
 8000fa4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fa8:	40f7      	lsrs	r7, r6
 8000faa:	e9c5 2700 	strd	r2, r7, [r5]
 8000fae:	2600      	movs	r6, #0
 8000fb0:	4631      	mov	r1, r6
 8000fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e70b      	b.n	8000dd4 <__udivmoddi4+0xa0>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e9      	b.n	8000d94 <__udivmoddi4+0x60>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6fd      	b.n	8000dc0 <__udivmoddi4+0x8c>
 8000fc4:	4543      	cmp	r3, r8
 8000fc6:	d2e5      	bcs.n	8000f94 <__udivmoddi4+0x260>
 8000fc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7df      	b.n	8000f94 <__udivmoddi4+0x260>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e7d2      	b.n	8000f7e <__udivmoddi4+0x24a>
 8000fd8:	4660      	mov	r0, ip
 8000fda:	e78d      	b.n	8000ef8 <__udivmoddi4+0x1c4>
 8000fdc:	4681      	mov	r9, r0
 8000fde:	e7b9      	b.n	8000f54 <__udivmoddi4+0x220>
 8000fe0:	4666      	mov	r6, ip
 8000fe2:	e775      	b.n	8000ed0 <__udivmoddi4+0x19c>
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	e74a      	b.n	8000e7e <__udivmoddi4+0x14a>
 8000fe8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fec:	4439      	add	r1, r7
 8000fee:	e713      	b.n	8000e18 <__udivmoddi4+0xe4>
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	443c      	add	r4, r7
 8000ff4:	e724      	b.n	8000e40 <__udivmoddi4+0x10c>
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_idiv0>:
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop

08000ffc <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bme68x_soft_reset(dev);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 f904 	bl	8001212 <bme68x_soft_reset>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800100e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d120      	bne.n	8001058 <bme68x_init+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	20d0      	movs	r0, #208	; 0xd0
 800101e:	f000 f8b4 	bl	800118a <bme68x_get_regs>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d114      	bne.n	8001058 <bme68x_init+0x5c>
        {
            if (dev->chip_id == BME68X_CHIP_ID)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b61      	cmp	r3, #97	; 0x61
 8001034:	d10e      	bne.n	8001054 <bme68x_init+0x58>
            {
                /* Read Variant ID */
                rslt = read_variant_id(dev);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f002 f87c 	bl	8003134 <read_variant_id>
 800103c:	4603      	mov	r3, r0
 800103e:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME68X_OK)
 8001040:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d107      	bne.n	8001058 <bme68x_init+0x5c>
                {
                    /* Get the Calibration data */
                    rslt = get_calib_data(dev);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f001 ff6f 	bl	8002f2c <get_calib_data>
 800104e:	4603      	mov	r3, r0
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e001      	b.n	8001058 <bme68x_init+0x5c>
                }
            }
            else
            {
                rslt = BME68X_E_DEV_NOT_FOUND;
 8001054:	23fd      	movs	r3, #253	; 0xfd
 8001056:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
 8001070:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8001072:	2300      	movs	r3, #0
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001084:	6838      	ldr	r0, [r7, #0]
 8001086:	f001 fd28 	bl	8002ada <null_ptr_check>
 800108a:	4603      	mov	r3, r0
 800108c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 8001090:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001094:	2b00      	cmp	r3, #0
 8001096:	d16f      	bne.n	8001178 <bme68x_set_regs+0x114>
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d06c      	beq.n	8001178 <bme68x_set_regs+0x114>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d069      	beq.n	8001178 <bme68x_set_regs+0x114>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d060      	beq.n	800116c <bme68x_set_regs+0x108>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0a      	cmp	r3, #10
 80010ae:	d85d      	bhi.n	800116c <bme68x_set_regs+0x108>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 80010b0:	2300      	movs	r3, #0
 80010b2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80010b4:	e037      	b.n	8001126 <bme68x_set_regs+0xc2>
            {
                if (dev->intf == BME68X_SPI_INTF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	7b1b      	ldrb	r3, [r3, #12]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d119      	bne.n	80010f2 <bme68x_set_regs+0x8e>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 80010be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	6839      	ldr	r1, [r7, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fc45 	bl	8002958 <set_mem_page>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80010d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d6:	68fa      	ldr	r2, [r7, #12]
 80010d8:	4413      	add	r3, r2
 80010da:	781a      	ldrb	r2, [r3, #0]
 80010dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80010ea:	440b      	add	r3, r1
 80010ec:	f803 2c18 	strb.w	r2, [r3, #-24]
 80010f0:	e00a      	b.n	8001108 <bme68x_set_regs+0xa4>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 80010f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010f4:	68fa      	ldr	r2, [r7, #12]
 80010f6:	441a      	add	r2, r3
 80010f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001102:	440b      	add	r3, r1
 8001104:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8001108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	441a      	add	r2, r3
 800110e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	3301      	adds	r3, #1
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800111a:	440b      	add	r3, r1
 800111c:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8001120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001122:	3301      	adds	r3, #1
 8001124:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001126:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d8c3      	bhi.n	80010b6 <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 800112e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001132:	2b00      	cmp	r3, #0
 8001134:	d11e      	bne.n	8001174 <bme68x_set_regs+0x110>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800113a:	7c38      	ldrb	r0, [r7, #16]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685d      	ldr	r5, [r3, #4]
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	1c59      	adds	r1, r3, #1
 800114c:	462b      	mov	r3, r5
 800114e:	47a0      	blx	r4
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <bme68x_set_regs+0x110>
                {
                    rslt = BME68X_E_COM_FAIL;
 8001164:	23fe      	movs	r3, #254	; 0xfe
 8001166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if (rslt == BME68X_OK)
 800116a:	e003      	b.n	8001174 <bme68x_set_regs+0x110>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 800116c:	23fc      	movs	r3, #252	; 0xfc
 800116e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001172:	e004      	b.n	800117e <bme68x_set_regs+0x11a>
            if (rslt == BME68X_OK)
 8001174:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8001176:	e002      	b.n	800117e <bme68x_set_regs+0x11a>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001178:	23ff      	movs	r3, #255	; 0xff
 800117a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 800117e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001182:	4618      	mov	r0, r3
 8001184:	3728      	adds	r7, #40	; 0x28
 8001186:	46bd      	mov	sp, r7
 8001188:	bdb0      	pop	{r4, r5, r7, pc}

0800118a <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 800118a:	b590      	push	{r4, r7, lr}
 800118c:	b087      	sub	sp, #28
 800118e:	af00      	add	r7, sp, #0
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4603      	mov	r3, r0
 8001198:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 800119a:	6838      	ldr	r0, [r7, #0]
 800119c:	f001 fc9d 	bl	8002ada <null_ptr_check>
 80011a0:	4603      	mov	r3, r0
 80011a2:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 80011a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d12a      	bne.n	8001202 <bme68x_get_regs+0x78>
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d027      	beq.n	8001202 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	7b1b      	ldrb	r3, [r3, #12]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10e      	bne.n	80011d8 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	6839      	ldr	r1, [r7, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fbca 	bl	8002958 <set_mem_page>
 80011c4:	4603      	mov	r3, r0
 80011c6:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 80011c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011d6:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	7bf8      	ldrb	r0, [r7, #15]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	47a0      	blx	r4
 80011e8:	4603      	mov	r3, r0
 80011ea:	461a      	mov	r2, r3
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d004      	beq.n	8001206 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 80011fc:	23fe      	movs	r3, #254	; 0xfe
 80011fe:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8001200:	e001      	b.n	8001206 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001202:	23ff      	movs	r3, #255	; 0xff
 8001204:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001206:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800120a:	4618      	mov	r0, r3
 800120c:	371c      	adds	r7, #28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd90      	pop	{r4, r7, pc}

08001212 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b084      	sub	sp, #16
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 800121a:	23e0      	movs	r3, #224	; 0xe0
 800121c:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 800121e:	23b6      	movs	r3, #182	; 0xb6
 8001220:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 fc59 	bl	8002ada <null_ptr_check>
 8001228:	4603      	mov	r3, r0
 800122a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800122c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d12b      	bne.n	800128c <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	7b1b      	ldrb	r3, [r3, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d104      	bne.n	8001246 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f001 fbf0 	bl	8002a22 <get_mem_page>
 8001242:	4603      	mov	r3, r0
 8001244:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d11e      	bne.n	800128c <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800124e:	f107 010d 	add.w	r1, r7, #13
 8001252:	f107 000e 	add.w	r0, r7, #14
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f7ff ff03 	bl	8001064 <bme68x_set_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]

            /* Wait for 5ms */
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	6852      	ldr	r2, [r2, #4]
 800126a:	4611      	mov	r1, r2
 800126c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001270:	4798      	blx	r3
            if (rslt == BME68X_OK)
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <bme68x_soft_reset+0x7a>
            {
                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7b1b      	ldrb	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d104      	bne.n	800128c <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f001 fbcd 	bl	8002a22 <get_mem_page>
 8001288:	4603      	mov	r3, r0
 800128a:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 800128c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	77bb      	strb	r3, [r7, #30]
 80012a6:	2301      	movs	r3, #1
 80012a8:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 80012aa:	4a7c      	ldr	r2, [pc, #496]	; (800149c <bme68x_set_conf+0x204>)
 80012ac:	f107 0314 	add.w	r3, r7, #20
 80012b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b4:	6018      	str	r0, [r3, #0]
 80012b6:	3304      	adds	r3, #4
 80012b8:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	2300      	movs	r3, #0
 80012c0:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	6839      	ldr	r1, [r7, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 f94a 	bl	8001562 <bme68x_get_op_mode>
 80012ce:	4603      	mov	r3, r0
 80012d0:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 80012d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d105      	bne.n	80012e6 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	2000      	movs	r0, #0
 80012de:	f000 f8df 	bl	80014a0 <bme68x_set_op_mode>
 80012e2:	4603      	mov	r3, r0
 80012e4:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 80012ec:	23ff      	movs	r3, #255	; 0xff
 80012ee:	77fb      	strb	r3, [r7, #31]
 80012f0:	e0b2      	b.n	8001458 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 80012f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	f040 80ae 	bne.w	8001458 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 80012fc:	7d38      	ldrb	r0, [r7, #20]
 80012fe:	f107 010c 	add.w	r1, r7, #12
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2205      	movs	r2, #5
 8001306:	f7ff ff40 	bl	800118a <bme68x_get_regs>
 800130a:	4603      	mov	r3, r0
 800130c:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (rslt == BME68X_OK)
 8001316:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d108      	bne.n	8001330 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3303      	adds	r3, #3
 8001322:	683a      	ldr	r2, [r7, #0]
 8001324:	2107      	movs	r1, #7
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fbaa 	bl	8002a80 <boundary_check>
 800132c:	4603      	mov	r3, r0
 800132e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001330:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d108      	bne.n	800134a <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3301      	adds	r3, #1
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	2105      	movs	r1, #5
 8001340:	4618      	mov	r0, r3
 8001342:	f001 fb9d 	bl	8002a80 <boundary_check>
 8001346:	4603      	mov	r3, r0
 8001348:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800134a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d108      	bne.n	8001364 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3302      	adds	r3, #2
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	2105      	movs	r1, #5
 800135a:	4618      	mov	r0, r3
 800135c:	f001 fb90 	bl	8002a80 <boundary_check>
 8001360:	4603      	mov	r3, r0
 8001362:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001364:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d107      	bne.n	800137c <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	2105      	movs	r1, #5
 8001372:	4618      	mov	r0, r3
 8001374:	f001 fb84 	bl	8002a80 <boundary_check>
 8001378:	4603      	mov	r3, r0
 800137a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 800137c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d108      	bne.n	8001396 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3304      	adds	r3, #4
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	2108      	movs	r1, #8
 800138c:	4618      	mov	r0, r3
 800138e:	f001 fb77 	bl	8002a80 <boundary_check>
 8001392:	4603      	mov	r3, r0
 8001394:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8001396:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d15c      	bne.n	8001458 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 800139e:	7c3b      	ldrb	r3, [r7, #16]
 80013a0:	b25b      	sxtb	r3, r3
 80013a2:	f023 031c 	bic.w	r3, r3, #28
 80013a6:	b25a      	sxtb	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	78db      	ldrb	r3, [r3, #3]
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	b25b      	sxtb	r3, r3
 80013b0:	f003 031c 	and.w	r3, r3, #28
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b25b      	sxtb	r3, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	f003 031f 	and.w	r3, r3, #31
 80013c6:	b25a      	sxtb	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	785b      	ldrb	r3, [r3, #1]
 80013cc:	015b      	lsls	r3, r3, #5
 80013ce:	b25b      	sxtb	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b25b      	sxtb	r3, r3
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	f023 031c 	bic.w	r3, r3, #28
 80013e0:	b25a      	sxtb	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	789b      	ldrb	r3, [r3, #2]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	f003 031c 	and.w	r3, r3, #28
 80013ee:	b25b      	sxtb	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b25b      	sxtb	r3, r3
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 80013f8:	7b7b      	ldrb	r3, [r7, #13]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	f023 0307 	bic.w	r3, r3, #7
 8001400:	b25a      	sxtb	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	b25b      	sxtb	r3, r3
 8001408:	f003 0307 	and.w	r3, r3, #7
 800140c:	b25b      	sxtb	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b25b      	sxtb	r3, r3
 8001412:	b2db      	uxtb	r3, r3
 8001414:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	791b      	ldrb	r3, [r3, #4]
 800141a:	2b08      	cmp	r3, #8
 800141c:	d004      	beq.n	8001428 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	791b      	ldrb	r3, [r3, #4]
 8001422:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8001424:	2300      	movs	r3, #0
 8001426:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8001428:	7c3b      	ldrb	r3, [r7, #16]
 800142a:	b25b      	sxtb	r3, r3
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	b25a      	sxtb	r2, r3
 8001432:	7fbb      	ldrb	r3, [r7, #30]
 8001434:	015b      	lsls	r3, r3, #5
 8001436:	b25b      	sxtb	r3, r3
 8001438:	4313      	orrs	r3, r2
 800143a:	b25b      	sxtb	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8001440:	7b3b      	ldrb	r3, [r7, #12]
 8001442:	b25b      	sxtb	r3, r3
 8001444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001448:	b25a      	sxtb	r2, r3
 800144a:	7f7b      	ldrb	r3, [r7, #29]
 800144c:	01db      	lsls	r3, r3, #7
 800144e:	b25b      	sxtb	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b25b      	sxtb	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8001458:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d109      	bne.n	8001474 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8001460:	f107 010c 	add.w	r1, r7, #12
 8001464:	f107 0014 	add.w	r0, r7, #20
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2205      	movs	r2, #5
 800146c:	f7ff fdfa 	bl	8001064 <bme68x_set_regs>
 8001470:	4603      	mov	r3, r0
 8001472:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001474:	7f3b      	ldrb	r3, [r7, #28]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00a      	beq.n	8001490 <bme68x_set_conf+0x1f8>
 800147a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8001482:	7f3b      	ldrb	r3, [r7, #28]
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f80a 	bl	80014a0 <bme68x_set_op_mode>
 800148c:	4603      	mov	r3, r0
 800148e:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001490:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0800ada8 	.word	0x0800ada8

080014a0 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 80014b0:	2374      	movs	r3, #116	; 0x74
 80014b2:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 80014b4:	f107 010d 	add.w	r1, r7, #13
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2201      	movs	r2, #1
 80014bc:	2074      	movs	r0, #116	; 0x74
 80014be:	f7ff fe64 	bl	800118a <bme68x_get_regs>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d11d      	bne.n	800150a <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 80014ce:	7b7b      	ldrb	r3, [r7, #13]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 80014d6:	7bbb      	ldrb	r3, [r7, #14]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d016      	beq.n	800150a <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 80014dc:	7b7b      	ldrb	r3, [r7, #13]
 80014de:	f023 0303 	bic.w	r3, r3, #3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80014e6:	f107 010d 	add.w	r1, r7, #13
 80014ea:	f107 000c 	add.w	r0, r7, #12
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f7ff fdb7 	bl	8001064 <bme68x_set_regs>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	6852      	ldr	r2, [r2, #4]
 8001502:	4611      	mov	r1, r2
 8001504:	f242 7010 	movw	r0, #10000	; 0x2710
 8001508:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 800150a:	7bbb      	ldrb	r3, [r7, #14]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <bme68x_set_op_mode+0x78>
 8001510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0cd      	beq.n	80014b4 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01b      	beq.n	8001556 <bme68x_set_op_mode+0xb6>
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d117      	bne.n	8001556 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8001526:	7b7b      	ldrb	r3, [r7, #13]
 8001528:	b25b      	sxtb	r3, r3
 800152a:	f023 0303 	bic.w	r3, r3, #3
 800152e:	b25a      	sxtb	r2, r3
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	b25b      	sxtb	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b25b      	sxtb	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8001542:	f107 010d 	add.w	r1, r7, #13
 8001546:	f107 000c 	add.w	r0, r7, #12
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2201      	movs	r2, #1
 800154e:	f7ff fd89 	bl	8001064 <bme68x_set_regs>
 8001552:	4603      	mov	r3, r0
 8001554:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00f      	beq.n	8001592 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8001572:	f107 010e 	add.w	r1, r7, #14
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	2201      	movs	r2, #1
 800157a:	2074      	movs	r0, #116	; 0x74
 800157c:	f7ff fe05 	bl	800118a <bme68x_get_regs>
 8001580:	4603      	mov	r3, r0
 8001582:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8001584:	7bbb      	ldrb	r3, [r7, #14]
 8001586:	f003 0303 	and.w	r3, r3, #3
 800158a:	b2da      	uxtb	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e001      	b.n	8001596 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001592:	23ff      	movs	r3, #255	; 0xff
 8001594:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001596:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
	...

080015a4 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
 80015b0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 80015b6:	4a36      	ldr	r2, [pc, #216]	; (8001690 <bme68x_get_meas_dur+0xec>)
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015c0:	6018      	str	r0, [r3, #0]
 80015c2:	3304      	adds	r3, #4
 80015c4:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d05b      	beq.n	8001684 <bme68x_get_meas_dur+0xe0>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3301      	adds	r3, #1
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	2105      	movs	r1, #5
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fa53 	bl	8002a80 <boundary_check>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (rslt == BME68X_OK)
 80015e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d109      	bne.n	80015fc <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	3302      	adds	r3, #2
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	2105      	movs	r1, #5
 80015f0:	4618      	mov	r0, r3
 80015f2:	f001 fa45 	bl	8002a80 <boundary_check>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 80015fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001600:	2b00      	cmp	r3, #0
 8001602:	d108      	bne.n	8001616 <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	2105      	movs	r1, #5
 800160a:	4618      	mov	r0, r3
 800160c:	f001 fa38 	bl	8002a80 <boundary_check>
 8001610:	4603      	mov	r3, r0
 8001612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }

        if (rslt == BME68X_OK)
 8001616:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800161a:	2b00      	cmp	r3, #0
 800161c:	d132      	bne.n	8001684 <bme68x_get_meas_dur+0xe0>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	785b      	ldrb	r3, [r3, #1]
 8001622:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001626:	4413      	add	r3, r2
 8001628:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800162c:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	789b      	ldrb	r3, [r3, #2]
 8001632:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001636:	4413      	add	r3, r2
 8001638:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800163c:	461a      	mov	r2, r3
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	4413      	add	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800164c:	4413      	add	r3, r2
 800164e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001652:	461a      	mov	r2, r3
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8001660:	fb02 f303 	mul.w	r3, r2, r3
 8001664:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f203 7374 	addw	r3, r3, #1908	; 0x774
 800166c:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 800166e:	6a3b      	ldr	r3, [r7, #32]
 8001670:	f603 1351 	addw	r3, r3, #2385	; 0x951
 8001674:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d003      	beq.n	8001684 <bme68x_get_meas_dur+0xe0>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001682:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8001684:	6a3b      	ldr	r3, [r7, #32]
}
 8001686:	4618      	mov	r0, r3
 8001688:	3728      	adds	r7, #40	; 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	0800adb0 	.word	0x0800adb0

08001694 <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b09e      	sub	sp, #120	; 0x78
 8001698:	af00      	add	r7, sp, #0
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
    struct bme68x_data *field_ptr[3] = { 0 };
 80016b6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	2254      	movs	r2, #84	; 0x54
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f004 ff3e 	bl	800654c <memset>

    field_ptr[0] = &field_data[0];
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	66bb      	str	r3, [r7, #104]	; 0x68
    field_ptr[1] = &field_data[1];
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	331c      	adds	r3, #28
 80016dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    field_ptr[2] = &field_data[2];
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	3338      	adds	r3, #56	; 0x38
 80016e4:	673b      	str	r3, [r7, #112]	; 0x70

    rslt = null_ptr_check(dev);
 80016e6:	6838      	ldr	r0, [r7, #0]
 80016e8:	f001 f9f7 	bl	8002ada <null_ptr_check>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    if ((rslt == BME68X_OK) && (data != NULL))
 80016f2:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 80c3 	bne.w	8001882 <bme68x_get_data+0x1ee>
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	f000 80bf 	beq.w	8001882 <bme68x_get_data+0x1ee>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 8001704:	7bfb      	ldrb	r3, [r7, #15]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d11c      	bne.n	8001744 <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	2000      	movs	r0, #0
 8001710:	f000 fd8f 	bl	8002232 <read_field_data>
 8001714:	4603      	mov	r3, r0
 8001716:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            if (rslt == BME68X_OK)
 800171a:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 80a3 	bne.w	800186a <bme68x_get_data+0x1d6>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25b      	sxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	da03      	bge.n	8001736 <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 800172e:	2301      	movs	r3, #1
 8001730:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
 8001734:	e099      	b.n	800186a <bme68x_get_data+0x1d6>
                }
                else
                {
                    new_fields = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
                    rslt = BME68X_W_NO_NEW_DATA;
 800173c:	2302      	movs	r3, #2
 800173e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001742:	e092      	b.n	800186a <bme68x_get_data+0x1d6>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d003      	beq.n	8001752 <bme68x_get_data+0xbe>
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	2b03      	cmp	r3, #3
 800174e:	f040 8089 	bne.w	8001864 <bme68x_get_data+0x1d0>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 8001752:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001756:	6839      	ldr	r1, [r7, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f000 feb4 	bl	80024c6 <read_all_field_data>
 800175e:	4603      	mov	r3, r0
 8001760:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

            new_fields = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001770:	e015      	b.n	800179e <bme68x_get_data+0x10a>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 8001772:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800177c:	4413      	add	r3, r2
 800177e:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	b25b      	sxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	da04      	bge.n	8001794 <bme68x_get_data+0x100>
                {
                    new_fields++;
 800178a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 800178e:	3301      	adds	r3, #1
 8001790:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8001794:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001798:	3301      	adds	r3, #1
 800179a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800179e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d803      	bhi.n	80017ae <bme68x_get_data+0x11a>
 80017a6:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0e1      	beq.n	8001772 <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80017ae:	2300      	movs	r3, #0
 80017b0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80017b4:	e01c      	b.n	80017f0 <bme68x_get_data+0x15c>
            {
                for (j = i + 1; j < 3; j++)
 80017b6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80017ba:	3301      	adds	r3, #1
 80017bc:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80017c0:	e00d      	b.n	80017de <bme68x_get_data+0x14a>
                {
                    sort_sensor_data(i, j, field_ptr);
 80017c2:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80017c6:	f897 1075 	ldrb.w	r1, [r7, #117]	; 0x75
 80017ca:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80017ce:	4618      	mov	r0, r3
 80017d0:	f001 fb32 	bl	8002e38 <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 80017d4:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80017d8:	3301      	adds	r3, #1
 80017da:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
 80017de:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d9ed      	bls.n	80017c2 <bme68x_get_data+0x12e>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80017e6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80017ea:	3301      	adds	r3, #1
 80017ec:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80017f0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d803      	bhi.n	8001800 <bme68x_get_data+0x16c>
 80017f8:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0da      	beq.n	80017b6 <bme68x_get_data+0x122>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001806:	e01d      	b.n	8001844 <bme68x_get_data+0x1b0>
            {
                data[i] = *field_ptr[i];
 8001808:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001812:	4413      	add	r3, r2
 8001814:	f853 1c10 	ldr.w	r1, [r3, #-16]
 8001818:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 800181c:	4613      	mov	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	1a9b      	subs	r3, r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	461a      	mov	r2, r3
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	4413      	add	r3, r2
 800182a:	461c      	mov	r4, r3
 800182c:	460d      	mov	r5, r1
 800182e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001832:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800183a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 800183e:	3301      	adds	r3, #1
 8001840:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001844:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001848:	2b02      	cmp	r3, #2
 800184a:	d803      	bhi.n	8001854 <bme68x_get_data+0x1c0>
 800184c:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001850:	2b00      	cmp	r3, #0
 8001852:	d0d9      	beq.n	8001808 <bme68x_get_data+0x174>
            }

            if (new_fields == 0)
 8001854:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001858:	2b00      	cmp	r3, #0
 800185a:	d106      	bne.n	800186a <bme68x_get_data+0x1d6>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 800185c:	2302      	movs	r3, #2
 800185e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
            if (new_fields == 0)
 8001862:	e002      	b.n	800186a <bme68x_get_data+0x1d6>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        }

        if (n_data == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d103      	bne.n	8001878 <bme68x_get_data+0x1e4>
        {
            rslt = BME68X_E_NULL_PTR;
 8001870:	23ff      	movs	r3, #255	; 0xff
 8001872:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
        if (n_data == NULL)
 8001876:	e007      	b.n	8001888 <bme68x_get_data+0x1f4>
        }
        else
        {
            *n_data = new_fields;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f897 2074 	ldrb.w	r2, [r7, #116]	; 0x74
 800187e:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8001880:	e002      	b.n	8001888 <bme68x_get_data+0x1f4>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001882:	23ff      	movs	r3, #255	; 0xff
 8001884:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    }

    return rslt;
 8001888:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 800188c:	4618      	mov	r0, r3
 800188e:	3778      	adds	r7, #120	; 0x78
 8001890:	46bd      	mov	sp, r7
 8001892:	bdb0      	pop	{r4, r5, r7, pc}

08001894 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80018aa:	f247 1370 	movw	r3, #29040	; 0x7170
 80018ae:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d06e      	beq.n	8001994 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	2000      	movs	r0, #0
 80018ba:	f7ff fdf1 	bl	80014a0 <bme68x_set_op_mode>
 80018be:	4603      	mov	r3, r0
 80018c0:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 80018c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d108      	bne.n	80018dc <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80018ca:	f107 021c 	add.w	r2, r7, #28
 80018ce:	7bf9      	ldrb	r1, [r7, #15]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68b8      	ldr	r0, [r7, #8]
 80018d4:	f001 f920 	bl	8002b18 <set_conf>
 80018d8:	4603      	mov	r3, r0
 80018da:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80018dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d159      	bne.n	8001998 <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80018e4:	f107 0118 	add.w	r1, r7, #24
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	2070      	movs	r0, #112	; 0x70
 80018ee:	f7ff fc4c 	bl	800118a <bme68x_get_regs>
 80018f2:	4603      	mov	r3, r0
 80018f4:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 80018f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d14c      	bne.n	8001998 <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d10b      	bne.n	800191e <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 8001906:	2300      	movs	r3, #0
 8001908:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8001912:	2302      	movs	r3, #2
 8001914:	777b      	strb	r3, [r7, #29]
 8001916:	e006      	b.n	8001926 <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 8001918:	2301      	movs	r3, #1
 800191a:	777b      	strb	r3, [r7, #29]
 800191c:	e003      	b.n	8001926 <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 800191e:	2301      	movs	r3, #1
 8001920:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8001922:	2300      	movs	r3, #0
 8001924:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 8001926:	7e3b      	ldrb	r3, [r7, #24]
 8001928:	b25b      	sxtb	r3, r3
 800192a:	f023 0308 	bic.w	r3, r3, #8
 800192e:	b25a      	sxtb	r2, r3
 8001930:	7fbb      	ldrb	r3, [r7, #30]
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	b25b      	sxtb	r3, r3
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	b25b      	sxtb	r3, r3
 800193c:	4313      	orrs	r3, r2
 800193e:	b25b      	sxtb	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8001944:	7e7b      	ldrb	r3, [r7, #25]
 8001946:	b25b      	sxtb	r3, r3
 8001948:	f023 030f 	bic.w	r3, r3, #15
 800194c:	b25a      	sxtb	r2, r3
 800194e:	7f3b      	ldrb	r3, [r7, #28]
 8001950:	b25b      	sxtb	r3, r3
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	b25b      	sxtb	r3, r3
 8001958:	4313      	orrs	r3, r2
 800195a:	b25b      	sxtb	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8001960:	7e7b      	ldrb	r3, [r7, #25]
 8001962:	b25b      	sxtb	r3, r3
 8001964:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001968:	b25a      	sxtb	r2, r3
 800196a:	7f7b      	ldrb	r3, [r7, #29]
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	b25b      	sxtb	r3, r3
 8001970:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001974:	b25b      	sxtb	r3, r3
 8001976:	4313      	orrs	r3, r2
 8001978:	b25b      	sxtb	r3, r3
 800197a:	b2db      	uxtb	r3, r3
 800197c:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 800197e:	f107 0118 	add.w	r1, r7, #24
 8001982:	f107 0014 	add.w	r0, r7, #20
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2202      	movs	r2, #2
 800198a:	f7ff fb6b 	bl	8001064 <bme68x_set_regs>
 800198e:	4603      	mov	r3, r0
 8001990:	77fb      	strb	r3, [r7, #31]
 8001992:	e001      	b.n	8001998 <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8001994:	23ff      	movs	r3, #255	; 0xff
 8001996:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8001998:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	ee07 3a90 	vmov	s15, r3
 80019b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019b8:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001a9c <calc_temperature+0xf8>
 80019bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	8bdb      	ldrh	r3, [r3, #30]
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80019cc:	ed9f 6a34 	vldr	s12, [pc, #208]	; 8001aa0 <calc_temperature+0xfc>
 80019d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ea:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f8:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001aa4 <calc_temperature+0x100>
 80019fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	8bdb      	ldrh	r3, [r3, #30]
 8001a04:	ee07 3a90 	vmov	s15, r3
 8001a08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001a0c:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001aa8 <calc_temperature+0x104>
 8001a10:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a14:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a22:	ed9f 6a20 	vldr	s12, [pc, #128]	; 8001aa4 <calc_temperature+0x100>
 8001a26:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	8bdb      	ldrh	r3, [r3, #30]
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001a36:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8001aa8 <calc_temperature+0x104>
 8001a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001a3e:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8001a42:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a54:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001a58:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8001a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a60:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8001a64:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a68:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001a7c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001aac <calc_temperature+0x108>
 8001a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a84:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	ee07 3a90 	vmov	s15, r3
}
 8001a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a92:	371c      	adds	r7, #28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	46800000 	.word	0x46800000
 8001aa0:	44800000 	.word	0x44800000
 8001aa4:	48000000 	.word	0x48000000
 8001aa8:	46000000 	.word	0x46000000
 8001aac:	45a00000 	.word	0x45a00000

08001ab0 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001ac0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac8:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001d04 <calc_pressure+0x254>
 8001acc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001ad0:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 8001ad4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f993 302e 	ldrsb.w	r3, [r3, #46]	; 0x2e
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aea:	ed9f 6a87 	vldr	s12, [pc, #540]	; 8001d08 <calc_pressure+0x258>
 8001aee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af6:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b10:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b14:	ed97 7a03 	vldr	s14, [r7, #12]
 8001b18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1c:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8001b20:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b24:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	eddf 6a74 	vldr	s13, [pc, #464]	; 8001d0c <calc_pressure+0x25c>
 8001b3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b46:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	f993 3028 	ldrsb.w	r3, [r3, #40]	; 0x28
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b68:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001d10 <calc_pressure+0x260>
 8001b6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8a:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001d14 <calc_pressure+0x264>
 8001b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b92:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 8001b96:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001d18 <calc_pressure+0x268>
 8001b9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bba:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	ee07 3a90 	vmov	s15, r3
 8001bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001d1c <calc_pressure+0x26c>
 8001bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd0:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 8001bd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bdc:	ee17 3a90 	vmov	r3, s15
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 8081 	beq.w	8001ce8 <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 8001be6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bea:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001d20 <calc_pressure+0x270>
 8001bee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfa:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001d24 <calc_pressure+0x274>
 8001bfe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001c02:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0a:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001c14:	ee07 3a90 	vmov	s15, r3
 8001c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c1c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2c:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001d28 <calc_pressure+0x278>
 8001c30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c34:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c46:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001d18 <calc_pressure+0x268>
 8001c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c56:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 8001c5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c5e:	eddf 6a33 	vldr	s13, [pc, #204]	; 8001d2c <calc_pressure+0x27c>
 8001c62:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c66:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c6a:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8001d2c <calc_pressure+0x27c>
 8001c6e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c76:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c7a:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8001d2c <calc_pressure+0x27c>
 8001c7e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c8c:	ee07 3a90 	vmov	s15, r3
 8001c90:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c94:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8001d08 <calc_pressure+0x258>
 8001c98:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca0:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 8001ca4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ca8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	f993 302f 	ldrsb.w	r3, [r3, #47]	; 0x2f
 8001cbe:	ee07 3a90 	vmov	s15, r3
 8001cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001d30 <calc_pressure+0x280>
 8001cca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd2:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001cd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cda:	ed97 7a05 	vldr	s14, [r7, #20]
 8001cde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce2:	edc7 7a05 	vstr	s15, [r7, #20]
 8001ce6:	e002      	b.n	8001cee <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	ee07 3a90 	vmov	s15, r3
}
 8001cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	477a0000 	.word	0x477a0000
 8001d08:	48000000 	.word	0x48000000
 8001d0c:	47800000 	.word	0x47800000
 8001d10:	46800000 	.word	0x46800000
 8001d14:	49000000 	.word	0x49000000
 8001d18:	47000000 	.word	0x47000000
 8001d1c:	49800000 	.word	0x49800000
 8001d20:	45800000 	.word	0x45800000
 8001d24:	45c35000 	.word	0x45c35000
 8001d28:	4f000000 	.word	0x4f000000
 8001d2c:	43800000 	.word	0x43800000
 8001d30:	43000000 	.word	0x43000000

08001d34 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	6039      	str	r1, [r7, #0]
 8001d3e:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8001d46:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8001eb0 <calc_humidity+0x17c>
 8001d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d4e:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	ee07 3a90 	vmov	s15, r3
 8001d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	8a1b      	ldrh	r3, [r3, #16]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d68:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001d6c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8001d82:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001d86:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d8a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 8001d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d96:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	8a5b      	ldrh	r3, [r3, #18]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001da6:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001eb4 <calc_humidity+0x180>
 8001daa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dbc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8001eb8 <calc_humidity+0x184>
 8001dc0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8001dc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dd0:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de2:	eddf 5a36 	vldr	s11, [pc, #216]	; 8001ebc <calc_humidity+0x188>
 8001de6:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 8001dea:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dee:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001df2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001df6:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 8001dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8001dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8001e02:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	7ddb      	ldrb	r3, [r3, #23]
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e1a:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001eb8 <calc_humidity+0x184>
 8001e1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e22:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e34:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001ec0 <calc_humidity+0x18c>
 8001e38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e3c:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8001e40:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e44:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e5c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e64:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8001e70:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e74:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001ec4 <calc_humidity+0x190>
 8001e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e80:	dd02      	ble.n	8001e88 <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <calc_humidity+0x194>)
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e009      	b.n	8001e9c <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 8001e88:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e94:	d502      	bpl.n	8001e9c <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	ee07 3a90 	vmov	s15, r3
}
 8001ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea6:	3724      	adds	r7, #36	; 0x24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	45a00000 	.word	0x45a00000
 8001eb4:	48800000 	.word	0x48800000
 8001eb8:	46800000 	.word	0x46800000
 8001ebc:	49800000 	.word	0x49800000
 8001ec0:	4a000000 	.word	0x4a000000
 8001ec4:	42c80000 	.word	0x42c80000
 8001ec8:	42c80000 	.word	0x42c80000

08001ecc <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 8001ecc:	b4b0      	push	{r4, r5, r7}
 8001ece:	b0a9      	sub	sp, #164	; 0xa4
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	603a      	str	r2, [r7, #0]
 8001ed6:	80fb      	strh	r3, [r7, #6]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 8001edc:	88fb      	ldrh	r3, [r7, #6]
 8001ede:	ee07 3a90 	vmov	s15, r3
 8001ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ee6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 8001eea:	797b      	ldrb	r3, [r7, #5]
 8001eec:	2201      	movs	r2, #1
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efa:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
    const float lookup_k1_range[16] = {
 8001efe:	4b3f      	ldr	r3, [pc, #252]	; (8001ffc <calc_gas_resistance_low+0x130>)
 8001f00:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8001f04:	461d      	mov	r5, r3
 8001f06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f12:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f16:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 8001f1a:	4b39      	ldr	r3, [pc, #228]	; (8002000 <calc_gas_resistance_low+0x134>)
 8001f1c:	f107 0408 	add.w	r4, r7, #8
 8001f20:	461d      	mov	r5, r3
 8001f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f2e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f32:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	f993 303e 	ldrsb.w	r3, [r3, #62]	; 0x3e
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f44:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8001f48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f4c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002004 <calc_gas_resistance_low+0x138>
 8001f50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f54:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 8001f58:	797b      	ldrb	r3, [r7, #5]
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001f60:	4413      	add	r3, r2
 8001f62:	3b58      	subs	r3, #88	; 0x58
 8001f64:	ed93 7a00 	vldr	s14, [r3]
 8001f68:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002008 <calc_gas_resistance_low+0x13c>
 8001f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001f74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f78:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8001f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f80:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8001f84:	797b      	ldrb	r3, [r7, #5]
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3b98      	subs	r3, #152	; 0x98
 8001f90:	ed93 7a00 	vldr	s14, [r3]
 8001f94:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002008 <calc_gas_resistance_low+0x13c>
 8001f98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fa0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001fa4:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 8001fa8:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8001fac:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800200c <calc_gas_resistance_low+0x140>
 8001fb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fb4:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8001fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fbc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8001fc0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002010 <calc_gas_resistance_low+0x144>
 8001fc4:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8001fc8:	edd7 6a24 	vldr	s13, [r7, #144]	; 0x90
 8001fcc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001fd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fe4:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

    return calc_gas_res;
 8001fe8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fec:	ee07 3a90 	vmov	s15, r3
}
 8001ff0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ff4:	37a4      	adds	r7, #164	; 0xa4
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bcb0      	pop	{r4, r5, r7}
 8001ffa:	4770      	bx	lr
 8001ffc:	0800adb8 	.word	0x0800adb8
 8002000:	0800adf8 	.word	0x0800adf8
 8002004:	44a78000 	.word	0x44a78000
 8002008:	42c80000 	.word	0x42c80000
 800200c:	340637bd 	.word	0x340637bd
 8002010:	44000000 	.word	0x44000000

08002014 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	460a      	mov	r2, r1
 800201e:	80fb      	strh	r3, [r7, #6]
 8002020:	4613      	mov	r3, r2
 8002022:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8002024:	797b      	ldrb	r3, [r7, #5]
 8002026:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8002030:	88fb      	ldrh	r3, [r7, #6]
 8002032:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002036:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4613      	mov	r3, r2
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	4413      	add	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002048:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	ee07 3a90 	vmov	s15, r3
 8002050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002054:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002084 <calc_gas_resistance_high+0x70>
 8002058:	ee67 6a87 	vmul.f32	s13, s15, s14
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800206a:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	ee07 3a90 	vmov	s15, r3
}
 8002074:	eeb0 0a67 	vmov.f32	s0, s15
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	49742400 	.word	0x49742400

08002088 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8002088:	b480      	push	{r7}
 800208a:	b08b      	sub	sp, #44	; 0x2c
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 8002094:	89fb      	ldrh	r3, [r7, #14]
 8002096:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800209a:	d902      	bls.n	80020a2 <calc_res_heat+0x1a>
    {
        temp = 400;
 800209c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80020a0:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80020b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80021cc <calc_res_heat+0x144>
 80020bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020c0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d2:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80021d0 <calc_res_heat+0x148>
 80020d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020da:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80021d4 <calc_res_heat+0x14c>
 80020de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020e2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80021d8 <calc_res_heat+0x150>
 80020e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020ea:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80020f4:	ee07 3a90 	vmov	s15, r3
 80020f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020fc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80021dc <calc_res_heat+0x154>
 8002100:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002104:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002112:	edd7 7a08 	vldr	s15, [r7, #32]
 8002116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800211e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002122:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212a:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	ed97 7a06 	vldr	s14, [r7, #24]
 8002148:	ee77 7a27 	vadd.f32	s15, s14, s15
 800214c:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002156:	ee07 3a90 	vmov	s15, r3
 800215a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800215e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002162:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002166:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800216a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800216e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002172:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f993 303d 	ldrsb.w	r3, [r3, #61]	; 0x3d
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002184:	eddf 6a16 	vldr	s13, [pc, #88]	; 80021e0 <calc_res_heat+0x158>
 8002188:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800218c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002190:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002194:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002198:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 800219c:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 80021a0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80021a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 80021a8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80021e4 <calc_res_heat+0x15c>
 80021ac:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 80021b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021b4:	edc7 7a01 	vstr	s15, [r7, #4]
 80021b8:	793b      	ldrb	r3, [r7, #4]
 80021ba:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 80021bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	372c      	adds	r7, #44	; 0x2c
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	42440000 	.word	0x42440000
 80021d0:	47000000 	.word	0x47000000
 80021d4:	3a03126f 	.word	0x3a03126f
 80021d8:	3b1a0275 	.word	0x3b1a0275
 80021dc:	44800000 	.word	0x44800000
 80021e0:	3b03126f 	.word	0x3b03126f
 80021e4:	4059999a 	.word	0x4059999a

080021e8 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80021fc:	d308      	bcc.n	8002210 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 80021fe:	23ff      	movs	r3, #255	; 0xff
 8002200:	73bb      	strb	r3, [r7, #14]
 8002202:	e00f      	b.n	8002224 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	089b      	lsrs	r3, r3, #2
 8002208:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	3301      	adds	r3, #1
 800220e:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	2b3f      	cmp	r3, #63	; 0x3f
 8002214:	d8f6      	bhi.n	8002204 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8002216:	88fb      	ldrh	r3, [r7, #6]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4413      	add	r3, r2
 8002222:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8002224:	7bbb      	ldrb	r3, [r7, #14]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b08e      	sub	sp, #56	; 0x38
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	f107 0314 	add.w	r3, r7, #20
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8002258:	2305      	movs	r3, #5
 800225a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    while ((tries) && (rslt == BME68X_OK))
 800225e:	e123      	b.n	80024a8 <read_field_data+0x276>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	461a      	mov	r2, r3
 8002264:	0112      	lsls	r2, r2, #4
 8002266:	4413      	add	r3, r2
 8002268:	b2db      	uxtb	r3, r3
 800226a:	331d      	adds	r3, #29
 800226c:	b2d8      	uxtb	r0, r3
 800226e:	f107 0110 	add.w	r1, r7, #16
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2211      	movs	r2, #17
 8002276:	f7fe ff88 	bl	800118a <bme68x_get_regs>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 8002286:	23ff      	movs	r3, #255	; 0xff
 8002288:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            break;
 800228c:	e115      	b.n	80024ba <read_field_data+0x288>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 800228e:	7c3b      	ldrb	r3, [r7, #16]
 8002290:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002294:	b2da      	uxtb	r2, r3
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 800229a:	7c3b      	ldrb	r3, [r7, #16]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 80022a6:	7c7a      	ldrb	r2, [r7, #17]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 80022ac:	7cbb      	ldrb	r3, [r7, #18]
 80022ae:	031a      	lsls	r2, r3, #12
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	011b      	lsls	r3, r3, #4
 80022b4:	4313      	orrs	r3, r2
 80022b6:	7d3a      	ldrb	r2, [r7, #20]
 80022b8:	0912      	lsrs	r2, r2, #4
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	4313      	orrs	r3, r2
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 80022c0:	7d7b      	ldrb	r3, [r7, #21]
 80022c2:	031a      	lsls	r2, r3, #12
 80022c4:	7dbb      	ldrb	r3, [r7, #22]
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	4313      	orrs	r3, r2
 80022ca:	7dfa      	ldrb	r2, [r7, #23]
 80022cc:	0912      	lsrs	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	4313      	orrs	r3, r2
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 80022d4:	7e3b      	ldrb	r3, [r7, #24]
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	021b      	lsls	r3, r3, #8
 80022da:	b29a      	uxth	r2, r3
 80022dc:	7e7b      	ldrb	r3, [r7, #25]
 80022de:	b29b      	uxth	r3, r3
 80022e0:	4313      	orrs	r3, r2
 80022e2:	857b      	strh	r3, [r7, #42]	; 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 80022e4:	7f7b      	ldrb	r3, [r7, #29]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	7fbb      	ldrb	r3, [r7, #30]
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	4313      	orrs	r3, r2
 80022f6:	853b      	strh	r3, [r7, #40]	; 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 80022f8:	7ffb      	ldrb	r3, [r7, #31]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	b29a      	uxth	r2, r3
 8002300:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	b2db      	uxtb	r3, r3
 8002308:	b29b      	uxth	r3, r3
 800230a:	4313      	orrs	r3, r2
 800230c:	84fb      	strh	r3, [r7, #38]	; 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 800230e:	7fbb      	ldrb	r3, [r7, #30]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8002318:	f897 3020 	ldrb.w	r3, [r7, #32]
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d11c      	bne.n	8002366 <read_field_data+0x134>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b25a      	sxtb	r2, r3
 8002332:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002336:	b25b      	sxtb	r3, r3
 8002338:	f003 0320 	and.w	r3, r3, #32
 800233c:	b25b      	sxtb	r3, r3
 800233e:	4313      	orrs	r3, r2
 8002340:	b25b      	sxtb	r3, r3
 8002342:	b2da      	uxtb	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	b25a      	sxtb	r2, r3
 800234e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002352:	b25b      	sxtb	r3, r3
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	b25b      	sxtb	r3, r3
 800235a:	4313      	orrs	r3, r2
 800235c:	b25b      	sxtb	r3, r3
 800235e:	b2da      	uxtb	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	701a      	strb	r2, [r3, #0]
 8002364:	e019      	b.n	800239a <read_field_data+0x168>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	b25a      	sxtb	r2, r3
 800236c:	7fbb      	ldrb	r3, [r7, #30]
 800236e:	b25b      	sxtb	r3, r3
 8002370:	f003 0320 	and.w	r3, r3, #32
 8002374:	b25b      	sxtb	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	b25b      	sxtb	r3, r3
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b25a      	sxtb	r2, r3
 8002386:	7fbb      	ldrb	r3, [r7, #30]
 8002388:	b25b      	sxtb	r3, r3
 800238a:	f003 0310 	and.w	r3, r3, #16
 800238e:	b25b      	sxtb	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b25b      	sxtb	r3, r3
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	b25b      	sxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da70      	bge.n	8002486 <read_field_data+0x254>
 80023a4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d16c      	bne.n	8002486 <read_field_data+0x254>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	785b      	ldrb	r3, [r3, #1]
 80023b0:	335a      	adds	r3, #90	; 0x5a
 80023b2:	b2d8      	uxtb	r0, r3
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	1cd9      	adds	r1, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f7fe fee5 	bl	800118a <bme68x_get_regs>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            if (rslt == BME68X_OK)
 80023c6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <read_field_data+0x1b6>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	785b      	ldrb	r3, [r3, #1]
 80023d2:	3350      	adds	r3, #80	; 0x50
 80023d4:	b2d8      	uxtb	r0, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	1d19      	adds	r1, r3, #4
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f7fe fed4 	bl	800118a <bme68x_get_regs>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 80023e8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10c      	bne.n	800240a <read_field_data+0x1d8>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	785b      	ldrb	r3, [r3, #1]
 80023f4:	3364      	adds	r3, #100	; 0x64
 80023f6:	b2d8      	uxtb	r0, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	1d59      	adds	r1, r3, #5
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f7fe fec3 	bl	800118a <bme68x_get_regs>
 8002404:	4603      	mov	r3, r0
 8002406:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            }

            if (rslt == BME68X_OK)
 800240a:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800240e:	2b00      	cmp	r3, #0
 8002410:	d139      	bne.n	8002486 <read_field_data+0x254>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002416:	f7ff fac5 	bl	80019a4 <calc_temperature>
 800241a:	eef0 7a40 	vmov.f32	s15, s0
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	edc3 7a03 	vstr	s15, [r3, #12]
                data->pressure = calc_pressure(adc_pres, dev);
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002428:	f7ff fb42 	bl	8001ab0 <calc_pressure>
 800242c:	eef0 7a40 	vmov.f32	s15, s0
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	edc3 7a04 	vstr	s15, [r3, #16]
                data->humidity = calc_humidity(adc_hum, dev);
 8002436:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fc7a 	bl	8001d34 <calc_humidity>
 8002440:	eef0 7a40 	vmov.f32	s15, s0
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	edc3 7a05 	vstr	s15, [r3, #20]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b01      	cmp	r3, #1
 8002450:	d10c      	bne.n	800246c <read_field_data+0x23a>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8002452:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002456:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fdda 	bl	8002014 <calc_gas_resistance_high>
 8002460:	eef0 7a40 	vmov.f32	s15, s0
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	edc3 7a06 	vstr	s15, [r3, #24]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 800246a:	e026      	b.n	80024ba <read_field_data+0x288>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 800246c:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8002470:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fd29 	bl	8001ecc <calc_gas_resistance_low>
 800247a:	eef0 7a40 	vmov.f32	s15, s0
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	edc3 7a06 	vstr	s15, [r3, #24]
                break;
 8002484:	e019      	b.n	80024ba <read_field_data+0x288>
            }
        }

        if (rslt == BME68X_OK)
 8002486:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800248a:	2b00      	cmp	r3, #0
 800248c:	d107      	bne.n	800249e <read_field_data+0x26c>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6852      	ldr	r2, [r2, #4]
 8002496:	4611      	mov	r1, r2
 8002498:	f242 7010 	movw	r0, #10000	; 0x2710
 800249c:	4798      	blx	r3
        }

        tries--;
 800249e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024a2:	3b01      	subs	r3, #1
 80024a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    while ((tries) && (rslt == BME68X_OK))
 80024a8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d004      	beq.n	80024ba <read_field_data+0x288>
 80024b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f43f aed3 	beq.w	8002260 <read_field_data+0x2e>
    }

    return rslt;
 80024ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3738      	adds	r7, #56	; 0x38
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 80024c6:	b590      	push	{r4, r7, lr}
 80024c8:	b09d      	sub	sp, #116	; 0x74
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 80024d6:	2300      	movs	r3, #0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024de:	222f      	movs	r2, #47	; 0x2f
 80024e0:	2100      	movs	r1, #0
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 f832 	bl	800654c <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	f107 030c 	add.w	r3, r7, #12
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
 80024fc:	615a      	str	r2, [r3, #20]
 80024fe:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10c      	bne.n	8002522 <read_all_field_data+0x5c>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3304      	adds	r3, #4
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d107      	bne.n	8002522 <read_all_field_data+0x5c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3308      	adds	r3, #8
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 800251c:	23ff      	movs	r3, #255	; 0xff
 800251e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 8002522:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002526:	2b00      	cmp	r3, #0
 8002528:	d109      	bne.n	800253e <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 800252a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2233      	movs	r2, #51	; 0x33
 8002532:	201d      	movs	r0, #29
 8002534:	f7fe fe29 	bl	800118a <bme68x_get_regs>
 8002538:	4603      	mov	r3, r0
 800253a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    if (rslt == BME68X_OK)
 800253e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8002546:	f107 0108 	add.w	r1, r7, #8
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	221e      	movs	r2, #30
 800254e:	2050      	movs	r0, #80	; 0x50
 8002550:	f7fe fe1b 	bl	800118a <bme68x_get_regs>
 8002554:	4603      	mov	r3, r0
 8002556:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800255a:	2300      	movs	r3, #0
 800255c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002560:	e1eb      	b.n	800293a <read_all_field_data+0x474>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8002562:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002566:	461a      	mov	r2, r3
 8002568:	0112      	lsls	r2, r2, #4
 800256a:	4413      	add	r3, r2
 800256c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8002570:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002574:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002578:	4413      	add	r3, r2
 800257a:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 800257e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	6879      	ldr	r1, [r7, #4]
 8002586:	440b      	add	r3, r1
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8002592:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002596:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800259a:	4413      	add	r3, r2
 800259c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 80025a0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	440b      	add	r3, r1
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f002 020f 	and.w	r2, r2, #15
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 80025b4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	440b      	add	r3, r1
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80025ca:	440a      	add	r2, r1
 80025cc:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 80025d0:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 80025d2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025d6:	3302      	adds	r3, #2
 80025d8:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80025dc:	4413      	add	r3, r2
 80025de:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025e2:	031a      	lsls	r2, r3, #12
 80025e4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80025e8:	3303      	adds	r3, #3
 80025ea:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80025ee:	440b      	add	r3, r1
 80025f0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 80025f8:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 80025fc:	3204      	adds	r2, #4
 80025fe:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002602:	440a      	add	r2, r1
 8002604:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002608:	0912      	lsrs	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
        adc_pres =
 800260c:	4313      	orrs	r3, r2
 800260e:	66bb      	str	r3, [r7, #104]	; 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8002610:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002614:	3305      	adds	r3, #5
 8002616:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800261a:	4413      	add	r3, r2
 800261c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002620:	031a      	lsls	r2, r3, #12
 8002622:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002626:	3306      	adds	r3, #6
 8002628:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800262c:	440b      	add	r3, r1
 800262e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8002636:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 800263a:	3207      	adds	r2, #7
 800263c:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002640:	440a      	add	r2, r1
 8002642:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8002646:	0912      	lsrs	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
        adc_temp =
 800264a:	4313      	orrs	r3, r2
 800264c:	667b      	str	r3, [r7, #100]	; 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 800264e:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002652:	3308      	adds	r3, #8
 8002654:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002658:	4413      	add	r3, r2
 800265a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800265e:	b29b      	uxth	r3, r3
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	b29a      	uxth	r2, r3
 8002664:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002668:	3309      	adds	r3, #9
 800266a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800266e:	440b      	add	r3, r1
 8002670:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002674:	b29b      	uxth	r3, r3
 8002676:	4313      	orrs	r3, r2
 8002678:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 800267c:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002680:	330d      	adds	r3, #13
 8002682:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002686:	4413      	add	r3, r2
 8002688:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800268c:	b29b      	uxth	r3, r3
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	b29a      	uxth	r2, r3
 8002692:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002696:	330e      	adds	r3, #14
 8002698:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800269c:	440b      	add	r3, r1
 800269e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 80026ae:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80026b2:	330f      	adds	r3, #15
 80026b4:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80026b8:	4413      	add	r3, r2
 80026ba:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80026c8:	3310      	adds	r3, #16
 80026ca:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80026ce:	440b      	add	r3, r1
 80026d0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	b2db      	uxtb	r3, r3
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 80026e0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80026e4:	330e      	adds	r3, #14
 80026e6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80026ea:	4413      	add	r3, r2
 80026ec:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 80026f8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80026fc:	3310      	adds	r3, #16
 80026fe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002702:	4413      	add	r3, r2
 8002704:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d13c      	bne.n	8002792 <read_all_field_data+0x2cc>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8002718:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b25a      	sxtb	r2, r3
 8002728:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800272c:	3310      	adds	r3, #16
 800272e:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002732:	440b      	add	r3, r1
 8002734:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002738:	b25b      	sxtb	r3, r3
 800273a:	f003 0320 	and.w	r3, r3, #32
 800273e:	b25b      	sxtb	r3, r3
 8002740:	4313      	orrs	r3, r2
 8002742:	b259      	sxtb	r1, r3
 8002744:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8002754:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	4413      	add	r3, r2
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	b25a      	sxtb	r2, r3
 8002764:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8002768:	3310      	adds	r3, #16
 800276a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800276e:	440b      	add	r3, r1
 8002770:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8002774:	b25b      	sxtb	r3, r3
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	b25b      	sxtb	r3, r3
 800277c:	4313      	orrs	r3, r2
 800277e:	b259      	sxtb	r1, r3
 8002780:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b2ca      	uxtb	r2, r1
 800278e:	701a      	strb	r2, [r3, #0]
 8002790:	e03b      	b.n	800280a <read_all_field_data+0x344>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8002792:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	4413      	add	r3, r2
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	b25a      	sxtb	r2, r3
 80027a2:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80027a6:	330e      	adds	r3, #14
 80027a8:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80027ac:	440b      	add	r3, r1
 80027ae:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	b25b      	sxtb	r3, r3
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b259      	sxtb	r1, r3
 80027be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4413      	add	r3, r2
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b2ca      	uxtb	r2, r1
 80027cc:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 80027ce:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	4413      	add	r3, r2
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b25a      	sxtb	r2, r3
 80027de:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80027e2:	330e      	adds	r3, #14
 80027e4:	f107 0170 	add.w	r1, r7, #112	; 0x70
 80027e8:	440b      	add	r3, r1
 80027ea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	4313      	orrs	r3, r2
 80027f8:	b259      	sxtb	r1, r3
 80027fa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	4413      	add	r3, r2
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	b2ca      	uxtb	r2, r1
 8002808:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 800280a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	4413      	add	r3, r2
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	785b      	ldrb	r3, [r3, #1]
 8002818:	4619      	mov	r1, r3
 800281a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800282a:	440a      	add	r2, r1
 800282c:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002830:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8002832:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	785b      	ldrb	r3, [r3, #1]
 8002840:	f103 020a 	add.w	r2, r3, #10
 8002844:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	440b      	add	r3, r1
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8002854:	440a      	add	r2, r1
 8002856:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800285a:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 800285c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	f103 0214 	add.w	r2, r3, #20
 800286e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	440b      	add	r3, r1
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 800287e:	440a      	add	r2, r1
 8002880:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8002884:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8002886:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	4413      	add	r3, r2
 8002890:	681c      	ldr	r4, [r3, #0]
 8002892:	6839      	ldr	r1, [r7, #0]
 8002894:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002896:	f7ff f885 	bl	80019a4 <calc_temperature>
 800289a:	eef0 7a40 	vmov.f32	s15, s0
 800289e:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 80028a2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	681c      	ldr	r4, [r3, #0]
 80028ae:	6839      	ldr	r1, [r7, #0]
 80028b0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80028b2:	f7ff f8fd 	bl	8001ab0 <calc_pressure>
 80028b6:	eef0 7a40 	vmov.f32	s15, s0
 80028ba:	edc4 7a04 	vstr	s15, [r4, #16]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 80028be:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	681c      	ldr	r4, [r3, #0]
 80028ca:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80028ce:	6839      	ldr	r1, [r7, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fa2f 	bl	8001d34 <calc_humidity>
 80028d6:	eef0 7a40 	vmov.f32	s15, s0
 80028da:	edc4 7a05 	vstr	s15, [r4, #20]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d112      	bne.n	800290c <read_all_field_data+0x446>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80028e6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4413      	add	r3, r2
 80028f0:	681c      	ldr	r4, [r3, #0]
 80028f2:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80028f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80028fa:	4611      	mov	r1, r2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fb89 	bl	8002014 <calc_gas_resistance_high>
 8002902:	eef0 7a40 	vmov.f32	s15, s0
 8002906:	edc4 7a06 	vstr	s15, [r4, #24]
 800290a:	e011      	b.n	8002930 <read_all_field_data+0x46a>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 800290c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	681c      	ldr	r4, [r3, #0]
 8002918:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 800291c:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff fad2 	bl	8001ecc <calc_gas_resistance_low>
 8002928:	eef0 7a40 	vmov.f32	s15, s0
 800292c:	edc4 7a06 	vstr	s15, [r4, #24]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8002930:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002934:	3301      	adds	r3, #1
 8002936:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 800293a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800293e:	2b02      	cmp	r3, #2
 8002940:	d804      	bhi.n	800294c <read_all_field_data+0x486>
 8002942:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002946:	2b00      	cmp	r3, #0
 8002948:	f43f ae0b 	beq.w	8002562 <read_all_field_data+0x9c>
        }
    }

    return rslt;
 800294c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8002950:	4618      	mov	r0, r3
 8002952:	3774      	adds	r7, #116	; 0x74
 8002954:	46bd      	mov	sp, r7
 8002956:	bd90      	pop	{r4, r7, pc}

08002958 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8002958:	b590      	push	{r4, r7, lr}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	6039      	str	r1, [r7, #0]
 8002962:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 8002964:	6838      	ldr	r0, [r7, #0]
 8002966:	f000 f8b8 	bl	8002ada <null_ptr_check>
 800296a:	4603      	mov	r3, r0
 800296c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 800296e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d14f      	bne.n	8002a16 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	2b00      	cmp	r3, #0
 800297c:	da02      	bge.n	8002984 <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 800297e:	2300      	movs	r3, #0
 8002980:	73bb      	strb	r3, [r7, #14]
 8002982:	e001      	b.n	8002988 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 8002984:	2310      	movs	r3, #16
 8002986:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	7b5b      	ldrb	r3, [r3, #13]
 800298c:	7bba      	ldrb	r2, [r7, #14]
 800298e:	429a      	cmp	r2, r3
 8002990:	d041      	beq.n	8002a16 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	7bba      	ldrb	r2, [r7, #14]
 8002996:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f107 010d 	add.w	r1, r7, #13
 80029a4:	2201      	movs	r2, #1
 80029a6:	20f3      	movs	r0, #243	; 0xf3
 80029a8:	47a0      	blx	r4
 80029aa:	4603      	mov	r3, r0
 80029ac:	461a      	mov	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            if (dev->intf_rslt != 0)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 80029be:	23fe      	movs	r3, #254	; 0xfe
 80029c0:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 80029c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d125      	bne.n	8002a16 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 80029ca:	7b7b      	ldrb	r3, [r7, #13]
 80029cc:	f023 0310 	bic.w	r3, r3, #16
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	7b5b      	ldrb	r3, [r3, #13]
 80029d8:	b25b      	sxtb	r3, r3
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	b25a      	sxtb	r2, r3
 80029e0:	7b7b      	ldrb	r3, [r7, #13]
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	4313      	orrs	r3, r2
 80029e6:	b25b      	sxtb	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f107 010d 	add.w	r1, r7, #13
 80029f8:	2201      	movs	r2, #1
 80029fa:	2073      	movs	r0, #115	; 0x73
 80029fc:	47a0      	blx	r4
 80029fe:	4603      	mov	r3, r0
 8002a00:	461a      	mov	r2, r3
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
                if (dev->intf_rslt != 0)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 8002a12:	23fe      	movs	r3, #254	; 0xfe
 8002a14:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}

08002a22 <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 8002a22:	b590      	push	{r4, r7, lr}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f855 	bl	8002ada <null_ptr_check>
 8002a30:	4603      	mov	r3, r0
 8002a32:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8002a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d11b      	bne.n	8002a74 <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f107 010e 	add.w	r1, r7, #14
 8002a48:	2201      	movs	r2, #1
 8002a4a:	20f3      	movs	r0, #243	; 0xf3
 8002a4c:	47a0      	blx	r4
 8002a4e:	4603      	mov	r3, r0
 8002a50:	461a      	mov	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (dev->intf_rslt != 0)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f993 304c 	ldrsb.w	r3, [r3, #76]	; 0x4c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 8002a62:	23fe      	movs	r3, #254	; 0xfe
 8002a64:	73fb      	strb	r3, [r7, #15]
 8002a66:	e005      	b.n	8002a74 <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8002a68:	7bbb      	ldrb	r3, [r7, #14]
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 8002a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	607a      	str	r2, [r7, #4]
 8002a8c:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f823 	bl	8002ada <null_ptr_check>
 8002a94:	4603      	mov	r3, r0
 8002a96:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d015      	beq.n	8002aca <boundary_check+0x4a>
 8002a9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d111      	bne.n	8002aca <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	7afa      	ldrb	r2, [r7, #11]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d20e      	bcs.n	8002ace <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	7afa      	ldrb	r2, [r7, #11]
 8002ab4:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        if (*value > max)
 8002ac8:	e001      	b.n	8002ace <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8002aca:	23ff      	movs	r3, #255	; 0xff
 8002acc:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <null_ptr_check+0x2a>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d007      	beq.n	8002b04 <null_ptr_check+0x2a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <null_ptr_check+0x2a>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 8002b04:	23ff      	movs	r3, #255	; 0xff
 8002b06:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 8002b18:	b590      	push	{r4, r7, lr}
 8002b1a:	b093      	sub	sp, #76	; 0x4c
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	607a      	str	r2, [r7, #4]
 8002b22:	603b      	str	r3, [r7, #0]
 8002b24:	460b      	mov	r3, r1
 8002b26:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8002b34:	236e      	movs	r3, #110	; 0x6e
 8002b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002b3a:	4aa3      	ldr	r2, [pc, #652]	; (8002dc8 <set_conf+0x2b0>)
 8002b3c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b40:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b42:	c303      	stmia	r3!, {r0, r1}
 8002b44:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002b46:	4aa0      	ldr	r2, [pc, #640]	; (8002dc8 <set_conf+0x2b0>)
 8002b48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002b4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b4e:	c303      	stmia	r3!, {r0, r1}
 8002b50:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002b52:	4a9d      	ldr	r2, [pc, #628]	; (8002dc8 <set_conf+0x2b0>)
 8002b54:	f107 0320 	add.w	r3, r7, #32
 8002b58:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b5a:	c303      	stmia	r3!, {r0, r1}
 8002b5c:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8002b5e:	4a9a      	ldr	r2, [pc, #616]	; (8002dc8 <set_conf+0x2b0>)
 8002b60:	f107 0314 	add.w	r3, r7, #20
 8002b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b66:	c303      	stmia	r3!, {r0, r1}
 8002b68:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d024      	beq.n	8002bba <set_conf+0xa2>
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	f300 80fe 	bgt.w	8002d72 <set_conf+0x25a>
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d002      	beq.n	8002b80 <set_conf+0x68>
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d07e      	beq.n	8002c7c <set_conf+0x164>
 8002b7e:	e0f8      	b.n	8002d72 <set_conf+0x25a>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 8002b80:	235a      	movs	r3, #90	; 0x5a
 8002b82:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	885b      	ldrh	r3, [r3, #2]
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff fa7b 	bl	8002088 <calc_res_heat>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8002b98:	2364      	movs	r3, #100	; 0x64
 8002b9a:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	889b      	ldrh	r3, [r3, #4]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fb20 	bl	80021e8 <calc_gas_wait>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002bb8:	e0e0      	b.n	8002d7c <set_conf+0x264>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <set_conf+0xb2>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d103      	bne.n	8002bd2 <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8002bca:	23ff      	movs	r3, #255	; 0xff
 8002bcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002bd0:	e0d4      	b.n	8002d7c <set_conf+0x264>
            }

            for (i = 0; i < conf->profile_len; i++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002bd8:	e041      	b.n	8002c5e <set_conf+0x146>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002bda:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002bde:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002be2:	325a      	adds	r2, #90	; 0x5a
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002bea:	440b      	add	r3, r1
 8002bec:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	881b      	ldrh	r3, [r3, #0]
 8002bfe:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002c02:	6839      	ldr	r1, [r7, #0]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fa3f 	bl	8002088 <calc_res_heat>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c12:	4423      	add	r3, r4
 8002c14:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002c18:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002c1c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002c20:	3264      	adds	r2, #100	; 0x64
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002c28:	440b      	add	r3, r1
 8002c2a:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fad1 	bl	80021e8 <calc_gas_wait>
 8002c46:	4603      	mov	r3, r0
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c4e:	4423      	add	r3, r4
 8002c50:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002c54:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	7c1b      	ldrb	r3, [r3, #16]
 8002c62:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d3b7      	bcc.n	8002bda <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	7c1a      	ldrb	r2, [r3, #16]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	7c1b      	ldrb	r3, [r3, #16]
 8002c76:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            break;
 8002c7a:	e07f      	b.n	8002d7c <set_conf+0x264>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d003      	beq.n	8002c8c <set_conf+0x174>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d103      	bne.n	8002c94 <set_conf+0x17c>
            {
                rslt = BME68X_E_NULL_PTR;
 8002c8c:	23ff      	movs	r3, #255	; 0xff
 8002c8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
                break;
 8002c92:	e073      	b.n	8002d7c <set_conf+0x264>
            }

            if (conf->shared_heatr_dur == 0)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8a5b      	ldrh	r3, [r3, #18]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <set_conf+0x18a>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002ca8:	e03d      	b.n	8002d26 <set_conf+0x20e>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8002caa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002cae:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002cb2:	325a      	adds	r2, #90	; 0x5a
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002cba:	440b      	add	r3, r1
 8002cbc:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	4413      	add	r3, r2
 8002ccc:	881b      	ldrh	r3, [r3, #0]
 8002cce:	f897 4046 	ldrb.w	r4, [r7, #70]	; 0x46
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff f9d7 	bl	8002088 <calc_res_heat>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ce2:	4423      	add	r3, r4
 8002ce4:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 8002ce8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002cec:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002cf0:	3264      	adds	r2, #100	; 0x64
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	881a      	ldrh	r2, [r3, #0]
 8002d0c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002d16:	440b      	add	r3, r1
 8002d18:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 8002d1c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002d20:	3301      	adds	r3, #1
 8002d22:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	7c1b      	ldrb	r3, [r3, #16]
 8002d2a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d3bb      	bcc.n	8002caa <set_conf+0x192>
            }

            (*nb_conv) = conf->profile_len;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	7c1a      	ldrb	r2, [r3, #16]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	7c1b      	ldrb	r3, [r3, #16]
 8002d3e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8a5b      	ldrh	r3, [r3, #18]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 f840 	bl	8002dcc <calc_heatr_dur_shared>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
            if (rslt == BME68X_OK)
 8002d52:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <set_conf+0x262>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 8002d5a:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002d5e:	f107 0043 	add.w	r0, r7, #67	; 0x43
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f7fe f97d 	bl	8001064 <bme68x_set_regs>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            }

            break;
 8002d70:	e003      	b.n	8002d7a <set_conf+0x262>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002d78:	e000      	b.n	8002d7c <set_conf+0x264>
            break;
 8002d7a:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 8002d7c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10b      	bne.n	8002d9c <set_conf+0x284>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8002d84:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002d88:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002d8c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f7fe f967 	bl	8001064 <bme68x_set_regs>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    if (rslt == BME68X_OK)
 8002d9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <set_conf+0x2a4>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8002da4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002da8:	f107 0114 	add.w	r1, r7, #20
 8002dac:	f107 0020 	add.w	r0, r7, #32
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f7fe f957 	bl	8001064 <bme68x_set_regs>
 8002db6:	4603      	mov	r3, r0
 8002db8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }

    return rslt;
 8002dbc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	374c      	adds	r7, #76	; 0x4c
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}
 8002dc8:	0800ae38 	.word	0x0800ae38

08002dcc <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 8002dda:	88fb      	ldrh	r3, [r7, #6]
 8002ddc:	f240 7282 	movw	r2, #1922	; 0x782
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d902      	bls.n	8002dea <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 8002de4:	23ff      	movs	r3, #255	; 0xff
 8002de6:	73bb      	strb	r3, [r7, #14]
 8002de8:	e01d      	b.n	8002e26 <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002df0:	fb02 f203 	mul.w	r2, r2, r3
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <calc_heatr_dur_shared+0x68>)
 8002df6:	fba3 1302 	umull	r1, r3, r3, r2
 8002dfa:	1ad2      	subs	r2, r2, r3
 8002dfc:	0852      	lsrs	r2, r2, #1
 8002dfe:	4413      	add	r3, r2
 8002e00:	0a1b      	lsrs	r3, r3, #8
 8002e02:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 8002e04:	e005      	b.n	8002e12 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b3f      	cmp	r3, #63	; 0x3f
 8002e16:	d8f6      	bhi.n	8002e06 <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	b2da      	uxtb	r2, r3
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	4413      	add	r3, r2
 8002e24:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 8002e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	12c8b89f 	.word	0x12c8b89f

08002e38 <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	603a      	str	r2, [r7, #0]
 8002e42:	71fb      	strb	r3, [r7, #7]
 8002e44:	460b      	mov	r3, r1
 8002e46:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	4413      	add	r3, r2
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	789b      	ldrb	r3, [r3, #2]
 8002e54:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 8002e56:	79bb      	ldrb	r3, [r7, #6]
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	789b      	ldrb	r3, [r3, #2]
 8002e62:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	683a      	ldr	r2, [r7, #0]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	da21      	bge.n	8002eba <sort_sensor_data+0x82>
 8002e76:	79bb      	ldrb	r3, [r7, #6]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	b25b      	sxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	da18      	bge.n	8002eba <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 8002e88:	89ba      	ldrh	r2, [r7, #12]
 8002e8a:	89fb      	ldrh	r3, [r7, #14]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8002e92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002e96:	f113 0f02 	cmn.w	r3, #2
 8002e9a:	db03      	blt.n	8002ea4 <sort_sensor_data+0x6c>
 8002e9c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	db03      	blt.n	8002eac <sort_sensor_data+0x74>
 8002ea4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	dd16      	ble.n	8002eda <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8002eac:	79b9      	ldrb	r1, [r7, #6]
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 f816 	bl	8002ee4 <swap_fields>
    {
 8002eb8:	e00f      	b.n	8002eda <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 8002eba:	79bb      	ldrb	r3, [r7, #6]
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b25b      	sxtb	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	da07      	bge.n	8002edc <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8002ecc:	79b9      	ldrb	r1, [r7, #6]
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 f806 	bl	8002ee4 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 8002ed8:	e000      	b.n	8002edc <sort_sensor_data+0xa4>
    {
 8002eda:	bf00      	nop
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	603a      	str	r2, [r7, #0]
 8002eee:	71fb      	strb	r3, [r7, #7]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 8002ef4:	79fb      	ldrb	r3, [r7, #7]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 8002f00:	79bb      	ldrb	r3, [r7, #6]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	441a      	add	r2, r3
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	6839      	ldr	r1, [r7, #0]
 8002f0e:	440b      	add	r3, r1
 8002f10:	6812      	ldr	r2, [r2, #0]
 8002f12:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 8002f14:	79bb      	ldrb	r3, [r7, #6]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08e      	sub	sp, #56	; 0x38
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 8002f34:	f107 010c 	add.w	r1, r7, #12
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2217      	movs	r2, #23
 8002f3c:	208a      	movs	r0, #138	; 0x8a
 8002f3e:	f7fe f924 	bl	800118a <bme68x_get_regs>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (rslt == BME68X_OK)
 8002f48:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10b      	bne.n	8002f68 <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8002f50:	f107 030c 	add.w	r3, r7, #12
 8002f54:	f103 0117 	add.w	r1, r3, #23
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	220e      	movs	r2, #14
 8002f5c:	20e1      	movs	r0, #225	; 0xe1
 8002f5e:	f7fe f914 	bl	800118a <bme68x_get_regs>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    }

    if (rslt == BME68X_OK)
 8002f68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10b      	bne.n	8002f88 <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	2000      	movs	r0, #0
 8002f7e:	f7fe f904 	bl	800118a <bme68x_get_regs>
 8002f82:	4603      	mov	r3, r0
 8002f84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 8002f88:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f040 80cb 	bne.w	8003128 <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8002f92:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f96:	021b      	lsls	r3, r3, #8
 8002f98:	b21a      	sxth	r2, r3
 8002f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f9e:	b21b      	sxth	r3, r3
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	b21b      	sxth	r3, r3
 8002fa4:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 8002faa:	7b7b      	ldrb	r3, [r7, #13]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	b21a      	sxth	r2, r3
 8002fb0:	7b3b      	ldrb	r3, [r7, #12]
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8002fbc:	7bbb      	ldrb	r3, [r7, #14]
 8002fbe:	b25a      	sxtb	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 8002fc6:	7c7b      	ldrb	r3, [r7, #17]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	b21a      	sxth	r2, r3
 8002fcc:	7c3b      	ldrb	r3, [r7, #16]
 8002fce:	b21b      	sxth	r3, r3
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	b21b      	sxth	r3, r3
 8002fd4:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	849a      	strh	r2, [r3, #36]	; 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 8002fda:	7cfb      	ldrb	r3, [r7, #19]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	b21a      	sxth	r2, r3
 8002fe0:	7cbb      	ldrb	r3, [r7, #18]
 8002fe2:	b21b      	sxth	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	84da      	strh	r2, [r3, #38]	; 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 8002fec:	7d3b      	ldrb	r3, [r7, #20]
 8002fee:	b25a      	sxtb	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 8002ff6:	7dfb      	ldrb	r3, [r7, #23]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	b21a      	sxth	r2, r3
 8002ffc:	7dbb      	ldrb	r3, [r7, #22]
 8002ffe:	b21b      	sxth	r3, r3
 8003000:	4313      	orrs	r3, r2
 8003002:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	855a      	strh	r2, [r3, #42]	; 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 8003008:	7e7b      	ldrb	r3, [r7, #25]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	b21a      	sxth	r2, r3
 800300e:	7e3b      	ldrb	r3, [r7, #24]
 8003010:	b21b      	sxth	r3, r3
 8003012:	4313      	orrs	r3, r2
 8003014:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	859a      	strh	r2, [r3, #44]	; 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 800301a:	7efb      	ldrb	r3, [r7, #27]
 800301c:	b25a      	sxtb	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 8003024:	7ebb      	ldrb	r3, [r7, #26]
 8003026:	b25a      	sxtb	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 800302e:	7ffb      	ldrb	r3, [r7, #31]
 8003030:	021b      	lsls	r3, r3, #8
 8003032:	b21a      	sxth	r2, r3
 8003034:	7fbb      	ldrb	r3, [r7, #30]
 8003036:	b21b      	sxth	r3, r3
 8003038:	4313      	orrs	r3, r2
 800303a:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	861a      	strh	r2, [r3, #48]	; 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8003040:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003044:	021b      	lsls	r3, r3, #8
 8003046:	b21a      	sxth	r2, r3
 8003048:	f897 3020 	ldrb.w	r3, [r7, #32]
 800304c:	b21b      	sxth	r3, r3
 800304e:	4313      	orrs	r3, r2
 8003050:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	865a      	strh	r2, [r3, #50]	; 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 8003056:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8003060:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 8003068:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800306c:	b21b      	sxth	r3, r3
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8003074:	4313      	orrs	r3, r2
 8003076:	b21b      	sxth	r3, r3
 8003078:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 800307e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	b21a      	sxth	r2, r3
 8003086:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	b2db      	uxtb	r3, r3
 800308e:	b21b      	sxth	r3, r3
 8003090:	4313      	orrs	r3, r2
 8003092:	b21b      	sxth	r3, r3
 8003094:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 800309a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800309e:	b25a      	sxtb	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 80030a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030a8:	b25a      	sxtb	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 80030ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80030b2:	b25a      	sxtb	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 80030b8:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 80030c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80030c4:	b25a      	sxtb	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 80030ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80030ce:	b25a      	sxtb	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 80030d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	b21a      	sxth	r2, r3
 80030dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80030e0:	b21b      	sxth	r3, r3
 80030e2:	4313      	orrs	r3, r2
 80030e4:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 80030ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80030ee:	b25a      	sxtb	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 80030f4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	da00      	bge.n	8003102 <get_calib_data+0x1d6>
 8003100:	330f      	adds	r3, #15
 8003102:	111b      	asrs	r3, r3, #4
 8003104:	b2da      	uxtb	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 800310c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003110:	b25a      	sxtb	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 8003118:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800311c:	b25b      	sxtb	r3, r3
 800311e:	111b      	asrs	r3, r3, #4
 8003120:	b25a      	sxtb	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }

    return rslt;
 8003128:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800312c:	4618      	mov	r0, r3
 800312e:	3738      	adds	r7, #56	; 0x38
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8003140:	f107 010e 	add.w	r1, r7, #14
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	20f0      	movs	r0, #240	; 0xf0
 800314a:	f7fe f81e 	bl	800118a <bme68x_get_regs>
 800314e:	4603      	mov	r3, r0
 8003150:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8003152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d103      	bne.n	8003162 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 800315a:	7bbb      	ldrb	r3, [r7, #14]
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8003162:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003166:	4618      	mov	r0, r3
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <bme68x_start>:
int8_t getgasreference_count = 0;
float gas_lower_limit = 5000;   // Bad air quality limit
float gas_upper_limit = 50000;  // Good air quality limit

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler) {
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 800317a:	2254      	movs	r2, #84	; 0x54
 800317c:	6839      	ldr	r1, [r7, #0]
 800317e:	481e      	ldr	r0, [pc, #120]	; (80031f8 <bme68x_start+0x88>)
 8003180:	f003 f9d6 	bl	8006530 <memcpy>

	// Init.
	bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8003184:	2101      	movs	r1, #1
 8003186:	481d      	ldr	r0, [pc, #116]	; (80031fc <bme68x_start+0x8c>)
 8003188:	f000 f8e8 	bl	800335c <bme68x_interface_init>
	bme68x_init(&bme);
 800318c:	481b      	ldr	r0, [pc, #108]	; (80031fc <bme68x_start+0x8c>)
 800318e:	f7fd ff35 	bl	8000ffc <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 8003192:	4a1b      	ldr	r2, [pc, #108]	; (8003200 <bme68x_start+0x90>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <bme68x_start+0x94>)
 800319a:	2202      	movs	r2, #2
 800319c:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 800319e:	4b19      	ldr	r3, [pc, #100]	; (8003204 <bme68x_start+0x94>)
 80031a0:	2208      	movs	r2, #8
 80031a2:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <bme68x_start+0x94>)
 80031a6:	2202      	movs	r2, #2
 80031a8:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <bme68x_start+0x94>)
 80031ac:	2203      	movs	r2, #3
 80031ae:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 80031b0:	4b14      	ldr	r3, [pc, #80]	; (8003204 <bme68x_start+0x94>)
 80031b2:	2204      	movs	r2, #4
 80031b4:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 80031b6:	4911      	ldr	r1, [pc, #68]	; (80031fc <bme68x_start+0x8c>)
 80031b8:	4812      	ldr	r0, [pc, #72]	; (8003204 <bme68x_start+0x94>)
 80031ba:	f7fe f86d 	bl	8001298 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <bme68x_start+0x98>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 80031c4:	4b10      	ldr	r3, [pc, #64]	; (8003208 <bme68x_start+0x98>)
 80031c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80031ca:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <bme68x_start+0x98>)
 80031ce:	2296      	movs	r2, #150	; 0x96
 80031d0:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 80031d2:	4a0a      	ldr	r2, [pc, #40]	; (80031fc <bme68x_start+0x8c>)
 80031d4:	490c      	ldr	r1, [pc, #48]	; (8003208 <bme68x_start+0x98>)
 80031d6:	2001      	movs	r0, #1
 80031d8:	f7fe fb5c 	bl	8001894 <bme68x_set_heatr_conf>
 80031dc:	4603      	mov	r3, r0
 80031de:	461a      	mov	r2, r3
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <bme68x_start+0x9c>)
 80031e2:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 80031e4:	f000 f906 	bl	80033f4 <bme68x_GetGasReference>

	return rslt;
 80031e8:	4b08      	ldr	r3, [pc, #32]	; (800320c <bme68x_start+0x9c>)
 80031ea:	f993 3000 	ldrsb.w	r3, [r3]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3708      	adds	r7, #8
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	2000022c 	.word	0x2000022c
 80031fc:	20000280 	.word	0x20000280
 8003200:	20000220 	.word	0x20000220
 8003204:	20000224 	.word	0x20000224
 8003208:	200002d4 	.word	0x200002d4
 800320c:	2000022a 	.word	0x2000022a

08003210 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8003218:	4916      	ldr	r1, [pc, #88]	; (8003274 <bme68x_single_measure+0x64>)
 800321a:	2001      	movs	r0, #1
 800321c:	f7fe f940 	bl	80014a0 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8003220:	4a14      	ldr	r2, [pc, #80]	; (8003274 <bme68x_single_measure+0x64>)
 8003222:	4915      	ldr	r1, [pc, #84]	; (8003278 <bme68x_single_measure+0x68>)
 8003224:	2001      	movs	r0, #1
 8003226:	f7fe f9bd 	bl	80015a4 <bme68x_get_meas_dur>
 800322a:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 800322c:	4a13      	ldr	r2, [pc, #76]	; (800327c <bme68x_single_measure+0x6c>)
 800322e:	8892      	ldrh	r2, [r2, #4]
 8003230:	4611      	mov	r1, r2
 8003232:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003236:	fb02 f201 	mul.w	r2, r2, r1
 800323a:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 800323c:	4a10      	ldr	r2, [pc, #64]	; (8003280 <bme68x_single_measure+0x70>)
 800323e:	6013      	str	r3, [r2, #0]
	bme.delay_us(del_period, bme.intf_ptr);
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <bme68x_single_measure+0x64>)
 8003242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003244:	4a0e      	ldr	r2, [pc, #56]	; (8003280 <bme68x_single_measure+0x70>)
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	490a      	ldr	r1, [pc, #40]	; (8003274 <bme68x_single_measure+0x64>)
 800324a:	6849      	ldr	r1, [r1, #4]
 800324c:	4610      	mov	r0, r2
 800324e:	4798      	blx	r3

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <bme68x_single_measure+0x64>)
 8003252:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <bme68x_single_measure+0x74>)
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	2001      	movs	r0, #1
 8003258:	f7fe fa1c 	bl	8001694 <bme68x_get_data>
 800325c:	4603      	mov	r3, r0
 800325e:	461a      	mov	r2, r3
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <bme68x_single_measure+0x78>)
 8003262:	701a      	strb	r2, [r3, #0]

	return rslt;
 8003264:	4b08      	ldr	r3, [pc, #32]	; (8003288 <bme68x_single_measure+0x78>)
 8003266:	f993 3000 	ldrsb.w	r3, [r3]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000280 	.word	0x20000280
 8003278:	20000224 	.word	0x20000224
 800327c:	200002d4 	.word	0x200002d4
 8003280:	200002e8 	.word	0x200002e8
 8003284:	20000229 	.word	0x20000229
 8003288:	2000022a 	.word	0x2000022a

0800328c <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	; 0x28
 8003290:	af04      	add	r7, sp, #16
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	603b      	str	r3, [r7, #0]
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), reg_addr, 1,
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	b299      	uxth	r1, r3
 80032aa:	7bfb      	ldrb	r3, [r7, #15]
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	200f      	movs	r0, #15
 80032b4:	9002      	str	r0, [sp, #8]
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2301      	movs	r3, #1
 80032be:	4806      	ldr	r0, [pc, #24]	; (80032d8 <bme68x_i2c_write+0x4c>)
 80032c0:	f001 f9fc 	bl	80046bc <HAL_I2C_Mem_Write>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <bme68x_i2c_write+0x42>
			(uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <bme68x_i2c_write+0x44>

	return 1;
 80032ce:	2301      	movs	r3, #1
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	2000022c 	.word	0x2000022c

080032dc <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af04      	add	r7, sp, #16
 80032e2:	60b9      	str	r1, [r7, #8]
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4603      	mov	r3, r0
 80032ea:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler, (uint16_t) ((dev_addr << 1) | 0x1), reg_addr,
 80032f2:	7dfb      	ldrb	r3, [r7, #23]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	b21b      	sxth	r3, r3
 80032f8:	f043 0301 	orr.w	r3, r3, #1
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	b299      	uxth	r1, r3
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	b29a      	uxth	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	b29b      	uxth	r3, r3
 8003308:	200f      	movs	r0, #15
 800330a:	9002      	str	r0, [sp, #8]
 800330c:	9301      	str	r3, [sp, #4]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	9300      	str	r3, [sp, #0]
 8003312:	2301      	movs	r3, #1
 8003314:	4806      	ldr	r0, [pc, #24]	; (8003330 <bme68x_i2c_read+0x54>)
 8003316:	f001 facb 	bl	80048b0 <HAL_I2C_Mem_Read>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <bme68x_i2c_read+0x48>
			1, reg_data, len, 15) == HAL_OK)
		return 0;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <bme68x_i2c_read+0x4a>

	return 1;
 8003324:	2301      	movs	r3, #1
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	2000022c 	.word	0x2000022c

08003334 <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr) {
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a05      	ldr	r2, [pc, #20]	; (8003358 <bme68x_delay_us+0x24>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fde5 	bl	8003f18 <HAL_Delay>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf) {
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8003368:	2300      	movs	r3, #0
 800336a:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d02d      	beq.n	80033ce <bme68x_interface_init+0x72>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), 5, 5)
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <bme68x_interface_init+0x84>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	b299      	uxth	r1, r3
 800337c:	2305      	movs	r3, #5
 800337e:	2205      	movs	r2, #5
 8003380:	4818      	ldr	r0, [pc, #96]	; (80033e4 <bme68x_interface_init+0x88>)
 8003382:	f001 fcbb 	bl	8004cfc <HAL_I2C_IsDeviceReady>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <bme68x_interface_init+0x3c>
				== HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d118      	bne.n	80033c8 <bme68x_interface_init+0x6c>
 8003396:	e004      	b.n	80033a2 <bme68x_interface_init+0x46>
			rslt = -2; // Communication error.
 8003398:	23fe      	movs	r3, #254	; 0xfe
 800339a:	73fb      	strb	r3, [r7, #15]
			return rslt;
 800339c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a0:	e019      	b.n	80033d6 <bme68x_interface_init+0x7a>
			bme->read = bme68x_i2c_read;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <bme68x_interface_init+0x8c>)
 80033a6:	641a      	str	r2, [r3, #64]	; 0x40
			bme->write = bme68x_i2c_write;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <bme68x_interface_init+0x90>)
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44
			bme->intf = BME68X_I2C_INTF;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <bme68x_interface_init+0x94>)
 80033b8:	649a      	str	r2, [r3, #72]	; 0x48
		bme->intf_ptr = &dev_addr;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <bme68x_interface_init+0x84>)
 80033be:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	221e      	movs	r2, #30
 80033c4:	739a      	strb	r2, [r3, #14]
 80033c6:	e004      	b.n	80033d2 <bme68x_interface_init+0x76>
			return -2;
 80033c8:	f06f 0301 	mvn.w	r3, #1
 80033cc:	e003      	b.n	80033d6 <bme68x_interface_init+0x7a>
	} else {
		rslt = BME68X_E_NULL_PTR;
 80033ce:	23ff      	movs	r3, #255	; 0xff
 80033d0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80033d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000000 	.word	0x20000000
 80033e4:	2000022c 	.word	0x2000022c
 80033e8:	080032dd 	.word	0x080032dd
 80033ec:	0800328d 	.word	0x0800328d
 80033f0:	08003335 	.word	0x08003335

080033f4 <bme68x_GetGasReference>:
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 See more at http://www.dsbird.org.uk
*/

/* IAQ functions */
void bme68x_GetGasReference() {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 80033fa:	230a      	movs	r3, #10
 80033fc:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 80033fe:	2301      	movs	r3, #1
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	e013      	b.n	800342c <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 8003404:	4b14      	ldr	r3, [pc, #80]	; (8003458 <bme68x_GetGasReference+0x64>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff ff01 	bl	8003210 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 800340e:	4b12      	ldr	r3, [pc, #72]	; (8003458 <bme68x_GetGasReference+0x64>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	ed93 7a06 	vldr	s14, [r3, #24]
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <bme68x_GetGasReference+0x68>)
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <bme68x_GetGasReference+0x68>)
 8003422:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	3301      	adds	r3, #1
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	dde7      	ble.n	8003404 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8003434:	4b09      	ldr	r3, [pc, #36]	; (800345c <bme68x_GetGasReference+0x68>)
 8003436:	edd3 6a00 	vldr	s13, [r3]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	ee07 3a90 	vmov	s15, r3
 8003440:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <bme68x_GetGasReference+0x68>)
 800344a:	edc3 7a00 	vstr	s15, [r3]

}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	20000220 	.word	0x20000220
 800345c:	20000004 	.word	0x20000004

08003460 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore() {
 8003460:	b5b0      	push	{r4, r5, r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8003466:	4b52      	ldr	r3, [pc, #328]	; (80035b0 <bme68x_GetHumidityScore+0x150>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	edd3 7a05 	vldr	s15, [r3, #20]
 800346e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80035b4 <bme68x_GetHumidityScore+0x154>
 8003472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347a:	db0e      	blt.n	800349a <bme68x_GetHumidityScore+0x3a>
 800347c:	4b4c      	ldr	r3, [pc, #304]	; (80035b0 <bme68x_GetHumidityScore+0x150>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	edd3 7a05 	vldr	s15, [r3, #20]
 8003484:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 80035b8 <bme68x_GetHumidityScore+0x158>
 8003488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003490:	d803      	bhi.n	800349a <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8003492:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <bme68x_GetHumidityScore+0x15c>)
 8003494:	4a4a      	ldr	r2, [pc, #296]	; (80035c0 <bme68x_GetHumidityScore+0x160>)
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e076      	b.n	8003588 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 800349a:	4b45      	ldr	r3, [pc, #276]	; (80035b0 <bme68x_GetHumidityScore+0x150>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	edd3 7a05 	vldr	s15, [r3, #20]
 80034a2:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80035b4 <bme68x_GetHumidityScore+0x154>
 80034a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ae:	d52e      	bpl.n	800350e <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 80034b0:	4b44      	ldr	r3, [pc, #272]	; (80035c4 <bme68x_GetHumidityScore+0x164>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd f84f 	bl	8000558 <__aeabi_f2d>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	f04f 0000 	mov.w	r0, #0
 80034c2:	4941      	ldr	r1, [pc, #260]	; (80035c8 <bme68x_GetHumidityScore+0x168>)
 80034c4:	f7fd f9ca 	bl	800085c <__aeabi_ddiv>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4614      	mov	r4, r2
 80034ce:	461d      	mov	r5, r3
 80034d0:	4b37      	ldr	r3, [pc, #220]	; (80035b0 <bme68x_GetHumidityScore+0x150>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fd f83e 	bl	8000558 <__aeabi_f2d>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4620      	mov	r0, r4
 80034e2:	4629      	mov	r1, r5
 80034e4:	f7fd f890 	bl	8000608 <__aeabi_dmul>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	4b35      	ldr	r3, [pc, #212]	; (80035cc <bme68x_GetHumidityScore+0x16c>)
 80034f6:	f7fd f887 	bl	8000608 <__aeabi_dmul>
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4610      	mov	r0, r2
 8003500:	4619      	mov	r1, r3
 8003502:	f7fd fb79 	bl	8000bf8 <__aeabi_d2f>
 8003506:	4603      	mov	r3, r0
 8003508:	4a2c      	ldr	r2, [pc, #176]	; (80035bc <bme68x_GetHumidityScore+0x15c>)
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e03c      	b.n	8003588 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 800350e:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <bme68x_GetHumidityScore+0x164>)
 8003510:	edd3 7a00 	vldr	s15, [r3]
 8003514:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80035d0 <bme68x_GetHumidityScore+0x170>
 8003518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351c:	ee17 0a90 	vmov	r0, s15
 8003520:	f7fd f81a 	bl	8000558 <__aeabi_f2d>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	f04f 0000 	mov.w	r0, #0
 800352c:	4929      	ldr	r1, [pc, #164]	; (80035d4 <bme68x_GetHumidityScore+0x174>)
 800352e:	f7fd f995 	bl	800085c <__aeabi_ddiv>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4614      	mov	r4, r2
 8003538:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <bme68x_GetHumidityScore+0x150>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd f809 	bl	8000558 <__aeabi_f2d>
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4620      	mov	r0, r4
 800354c:	4629      	mov	r1, r5
 800354e:	f7fd f85b 	bl	8000608 <__aeabi_dmul>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4610      	mov	r0, r2
 8003558:	4619      	mov	r1, r3
 800355a:	a313      	add	r3, pc, #76	; (adr r3, 80035a8 <bme68x_GetHumidityScore+0x148>)
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f7fc fe9c 	bl	800029c <__adddf3>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4610      	mov	r0, r2
 800356a:	4619      	mov	r1, r3
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	4b16      	ldr	r3, [pc, #88]	; (80035cc <bme68x_GetHumidityScore+0x16c>)
 8003572:	f7fd f849 	bl	8000608 <__aeabi_dmul>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f7fd fb3b 	bl	8000bf8 <__aeabi_d2f>
 8003582:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 8003584:	4a0d      	ldr	r2, [pc, #52]	; (80035bc <bme68x_GetHumidityScore+0x15c>)
 8003586:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <bme68x_GetHumidityScore+0x15c>)
 800358a:	edd3 7a00 	vldr	s15, [r3]
 800358e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003592:	edc7 7a01 	vstr	s15, [r7, #4]
 8003596:	793b      	ldrb	r3, [r7, #4]
 8003598:	b25b      	sxtb	r3, r3
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bdb0      	pop	{r4, r5, r7, pc}
 80035a2:	bf00      	nop
 80035a4:	f3af 8000 	nop.w
 80035a8:	ded6ba8c 	.word	0xded6ba8c
 80035ac:	3fdaaaa7 	.word	0x3fdaaaa7
 80035b0:	20000220 	.word	0x20000220
 80035b4:	42180000 	.word	0x42180000
 80035b8:	42280000 	.word	0x42280000
 80035bc:	200002d0 	.word	0x200002d0
 80035c0:	41c80000 	.word	0x41c80000
 80035c4:	20000008 	.word	0x20000008
 80035c8:	3fd00000 	.word	0x3fd00000
 80035cc:	40590000 	.word	0x40590000
 80035d0:	42c80000 	.word	0x42c80000
 80035d4:	bfd00000 	.word	0xbfd00000

080035d8 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore() {
 80035d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 80035e0:	4b42      	ldr	r3, [pc, #264]	; (80036ec <bme68x_GetGasScore+0x114>)
 80035e2:	ed93 7a00 	vldr	s14, [r3]
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <bme68x_GetGasScore+0x118>)
 80035e8:	edd3 7a00 	vldr	s15, [r3]
 80035ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035f0:	ee17 0a90 	vmov	r0, s15
 80035f4:	f7fc ffb0 	bl	8000558 <__aeabi_f2d>
 80035f8:	4602      	mov	r2, r0
 80035fa:	460b      	mov	r3, r1
 80035fc:	f04f 0000 	mov.w	r0, #0
 8003600:	493c      	ldr	r1, [pc, #240]	; (80036f4 <bme68x_GetGasScore+0x11c>)
 8003602:	f7fd f92b 	bl	800085c <__aeabi_ddiv>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4614      	mov	r4, r2
 800360c:	461d      	mov	r5, r3
 800360e:	4b3a      	ldr	r3, [pc, #232]	; (80036f8 <bme68x_GetGasScore+0x120>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7fc ffa0 	bl	8000558 <__aeabi_f2d>
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4620      	mov	r0, r4
 800361e:	4629      	mov	r1, r5
 8003620:	f7fc fff2 	bl	8000608 <__aeabi_dmul>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4690      	mov	r8, r2
 800362a:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 800362c:	4b30      	ldr	r3, [pc, #192]	; (80036f0 <bme68x_GetGasScore+0x118>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff91 	bl	8000558 <__aeabi_f2d>
 8003636:	4604      	mov	r4, r0
 8003638:	460d      	mov	r5, r1
 800363a:	4b2c      	ldr	r3, [pc, #176]	; (80036ec <bme68x_GetGasScore+0x114>)
 800363c:	ed93 7a00 	vldr	s14, [r3]
 8003640:	4b2b      	ldr	r3, [pc, #172]	; (80036f0 <bme68x_GetGasScore+0x118>)
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800364a:	ee17 0a90 	vmov	r0, s15
 800364e:	f7fc ff83 	bl	8000558 <__aeabi_f2d>
 8003652:	4602      	mov	r2, r0
 8003654:	460b      	mov	r3, r1
 8003656:	f04f 0000 	mov.w	r0, #0
 800365a:	4926      	ldr	r1, [pc, #152]	; (80036f4 <bme68x_GetGasScore+0x11c>)
 800365c:	f7fd f8fe 	bl	800085c <__aeabi_ddiv>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4620      	mov	r0, r4
 8003666:	4629      	mov	r1, r5
 8003668:	f7fc ffce 	bl	8000608 <__aeabi_dmul>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4640      	mov	r0, r8
 8003672:	4649      	mov	r1, r9
 8003674:	f7fc fe10 	bl	8000298 <__aeabi_dsub>
 8003678:	4602      	mov	r2, r0
 800367a:	460b      	mov	r3, r1
 800367c:	4610      	mov	r0, r2
 800367e:	4619      	mov	r1, r3
			* 100.00;
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	4b1d      	ldr	r3, [pc, #116]	; (80036fc <bme68x_GetGasScore+0x124>)
 8003686:	f7fc ffbf 	bl	8000608 <__aeabi_dmul>
 800368a:	4602      	mov	r2, r0
 800368c:	460b      	mov	r3, r1
 800368e:	4610      	mov	r0, r2
 8003690:	4619      	mov	r1, r3
 8003692:	f7fd fab1 	bl	8000bf8 <__aeabi_d2f>
 8003696:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <bme68x_GetGasScore+0x128>)
 800369a:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 800369c:	4b18      	ldr	r3, [pc, #96]	; (8003700 <bme68x_GetGasScore+0x128>)
 800369e:	edd3 7a00 	vldr	s15, [r3]
 80036a2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003704 <bme68x_GetGasScore+0x12c>
 80036a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ae:	dd02      	ble.n	80036b6 <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 80036b0:	4b13      	ldr	r3, [pc, #76]	; (8003700 <bme68x_GetGasScore+0x128>)
 80036b2:	4a15      	ldr	r2, [pc, #84]	; (8003708 <bme68x_GetGasScore+0x130>)
 80036b4:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 80036b6:	4b12      	ldr	r3, [pc, #72]	; (8003700 <bme68x_GetGasScore+0x128>)
 80036b8:	edd3 7a00 	vldr	s15, [r3]
 80036bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c4:	d503      	bpl.n	80036ce <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 80036c6:	4b0e      	ldr	r3, [pc, #56]	; (8003700 <bme68x_GetGasScore+0x128>)
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

	return gas_score;
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <bme68x_GetGasScore+0x128>)
 80036d0:	edd3 7a00 	vldr	s15, [r3]
 80036d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80036d8:	edc7 7a01 	vstr	s15, [r7, #4]
 80036dc:	793b      	ldrb	r3, [r7, #4]
 80036de:	b25b      	sxtb	r3, r3
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036ea:	bf00      	nop
 80036ec:	20000010 	.word	0x20000010
 80036f0:	2000000c 	.word	0x2000000c
 80036f4:	3fe80000 	.word	0x3fe80000
 80036f8:	20000004 	.word	0x20000004
 80036fc:	40590000 	.word	0x40590000
 8003700:	200002ec 	.word	0x200002ec
 8003704:	42960000 	.word	0x42960000
 8003708:	42960000 	.word	0x42960000

0800370c <bme68x_iaq>:

float bme68x_iaq() {
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <bme68x_iaq+0x80>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fea2 	bl	8003460 <bme68x_GetHumidityScore>
 800371c:	4603      	mov	r3, r0
 800371e:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <bme68x_iaq+0x80>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff57 	bl	80035d8 <bme68x_GetGasScore>
 800372a:	4603      	mov	r3, r0
 800372c:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 800372e:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
	float air_quality_score = (100
 8003738:	ee07 3a90 	vmov	s15, r3
 800373c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003740:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 8003744:	4b12      	ldr	r3, [pc, #72]	; (8003790 <bme68x_iaq+0x84>)
 8003746:	f993 2000 	ldrsb.w	r2, [r3]
 800374a:	b2d3      	uxtb	r3, r2
 800374c:	3301      	adds	r3, #1
 800374e:	b2db      	uxtb	r3, r3
 8003750:	b259      	sxtb	r1, r3
 8003752:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <bme68x_iaq+0x84>)
 8003754:	7019      	strb	r1, [r3, #0]
 8003756:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <bme68x_iaq+0x88>)
 8003758:	fb83 1302 	smull	r1, r3, r3, r2
 800375c:	1059      	asrs	r1, r3, #1
 800375e:	17d3      	asrs	r3, r2, #31
 8003760:	1ac9      	subs	r1, r1, r3
 8003762:	460b      	mov	r3, r1
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	b25b      	sxtb	r3, r3
 800376c:	2b00      	cmp	r3, #0
 800376e:	d104      	bne.n	800377a <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <bme68x_iaq+0x80>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff fe3d 	bl	80033f4 <bme68x_GetGasReference>

	return air_quality_score;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	ee07 3a90 	vmov	s15, r3

}
 8003780:	eeb0 0a67 	vmov.f32	s0, s15
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	bd90      	pop	{r4, r7, pc}
 800378a:	bf00      	nop
 800378c:	20000220 	.word	0x20000220
 8003790:	20000210 	.word	0x20000210
 8003794:	66666667 	.word	0x66666667

08003798 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800379c:	b0b0      	sub	sp, #192	; 0xc0
 800379e:	af08      	add	r7, sp, #32
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80037a0:	f000 fb48 	bl	8003e34 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80037a4:	f000 f874 	bl	8003890 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80037a8:	f000 f932 	bl	8003a10 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80037ac:	f000 f906 	bl	80039bc <MX_USART2_UART_Init>
	MX_I2C1_Init();
 80037b0:	f000 f8d6 	bl	8003960 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	/* BME680 API forced mode test */
	struct bme68x_data data;
	bme68x_start(&data, &hi2c1);
 80037b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037b8:	4932      	ldr	r1, [pc, #200]	; (8003884 <main+0xec>)
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fcd8 	bl	8003170 <bme68x_start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (bme68x_single_measure(&data) == 0) {
 80037c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff fd23 	bl	8003210 <bme68x_single_measure>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d153      	bne.n	8003878 <main+0xe0>

			// Measurement is successful, so continue with IAQ
			data.iaq_score = bme68x_iaq(); // Calculate IAQ
 80037d0:	f7ff ff9c 	bl	800370c <bme68x_iaq>
 80037d4:	eef0 7a40 	vmov.f32	s15, s0
 80037d8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

			// Create a message buffer and clear it.
			char msgBuffer[120];
			for(uint16_t i = 0; i < 120; i++){
 80037dc:	2300      	movs	r3, #0
 80037de:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80037e2:	e00c      	b.n	80037fe <main+0x66>
				msgBuffer[i] = ' ';
 80037e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80037e8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80037ec:	4413      	add	r3, r2
 80037ee:	2220      	movs	r2, #32
 80037f0:	f803 2c98 	strb.w	r2, [r3, #-152]
			for(uint16_t i = 0; i < 120; i++){
 80037f4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 80037fe:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8003802:	2b77      	cmp	r3, #119	; 0x77
 8003804:	d9ee      	bls.n	80037e4 <main+0x4c>
			}

			// Send the data through UART.
			sprintf(msgBuffer,
					"Temperature(deg C): %.2f, Pressure(Pa): %.2f, Humidity(%%): %.2f, IAQ: %.1f ,Gas resistance(ohm): %.2f\r\n",
					data.temperature, data.pressure, data.humidity,
 8003806:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
			sprintf(msgBuffer,
 800380a:	4618      	mov	r0, r3
 800380c:	f7fc fea4 	bl	8000558 <__aeabi_f2d>
 8003810:	e9c7 0100 	strd	r0, r1, [r7]
					data.temperature, data.pressure, data.humidity,
 8003814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
			sprintf(msgBuffer,
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc fe9d 	bl	8000558 <__aeabi_f2d>
 800381e:	4604      	mov	r4, r0
 8003820:	460d      	mov	r5, r1
					data.temperature, data.pressure, data.humidity,
 8003822:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
			sprintf(msgBuffer,
 8003826:	4618      	mov	r0, r3
 8003828:	f7fc fe96 	bl	8000558 <__aeabi_f2d>
 800382c:	4680      	mov	r8, r0
 800382e:	4689      	mov	r9, r1
					data.iaq_score, data.gas_resistance);
 8003830:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
			sprintf(msgBuffer,
 8003834:	4618      	mov	r0, r3
 8003836:	f7fc fe8f 	bl	8000558 <__aeabi_f2d>
 800383a:	4682      	mov	sl, r0
 800383c:	468b      	mov	fp, r1
					data.iaq_score, data.gas_resistance);
 800383e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
			sprintf(msgBuffer,
 8003842:	4618      	mov	r0, r3
 8003844:	f7fc fe88 	bl	8000558 <__aeabi_f2d>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	f107 0008 	add.w	r0, r7, #8
 8003850:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003854:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003858:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800385c:	e9cd 4500 	strd	r4, r5, [sp]
 8003860:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003864:	4908      	ldr	r1, [pc, #32]	; (8003888 <main+0xf0>)
 8003866:	f003 fcf9 	bl	800725c <siprintf>

			HAL_UART_Transmit(&huart2, (uint8_t *) msgBuffer, sizeof(msgBuffer), 10);
 800386a:	f107 0108 	add.w	r1, r7, #8
 800386e:	230a      	movs	r3, #10
 8003870:	2278      	movs	r2, #120	; 0x78
 8003872:	4806      	ldr	r0, [pc, #24]	; (800388c <main+0xf4>)
 8003874:	f002 fb8d 	bl	8005f92 <HAL_UART_Transmit>

		}

		HAL_Delay(2000);
 8003878:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800387c:	f000 fb4c 	bl	8003f18 <HAL_Delay>
		if (bme68x_single_measure(&data) == 0) {
 8003880:	e79e      	b.n	80037c0 <main+0x28>
 8003882:	bf00      	nop
 8003884:	200002f0 	.word	0x200002f0
 8003888:	0800ae44 	.word	0x0800ae44
 800388c:	20000344 	.word	0x20000344

08003890 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8003890:	b580      	push	{r7, lr}
 8003892:	b094      	sub	sp, #80	; 0x50
 8003894:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003896:	f107 0320 	add.w	r3, r7, #32
 800389a:	2230      	movs	r2, #48	; 0x30
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 fe54 	bl	800654c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	605a      	str	r2, [r3, #4]
 80038ae:	609a      	str	r2, [r3, #8]
 80038b0:	60da      	str	r2, [r3, #12]
 80038b2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80038b4:	2300      	movs	r3, #0
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	4b27      	ldr	r3, [pc, #156]	; (8003958 <SystemClock_Config+0xc8>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4a26      	ldr	r2, [pc, #152]	; (8003958 <SystemClock_Config+0xc8>)
 80038be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6413      	str	r3, [r2, #64]	; 0x40
 80038c4:	4b24      	ldr	r3, [pc, #144]	; (8003958 <SystemClock_Config+0xc8>)
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038d0:	2300      	movs	r3, #0
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	4b21      	ldr	r3, [pc, #132]	; (800395c <SystemClock_Config+0xcc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a20      	ldr	r2, [pc, #128]	; (800395c <SystemClock_Config+0xcc>)
 80038da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038de:	6013      	str	r3, [r2, #0]
 80038e0:	4b1e      	ldr	r3, [pc, #120]	; (800395c <SystemClock_Config+0xcc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038ec:	2302      	movs	r3, #2
 80038ee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038f0:	2301      	movs	r3, #1
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038f4:	2310      	movs	r3, #16
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038f8:	2302      	movs	r3, #2
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038fc:	2300      	movs	r3, #0
 80038fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003900:	2308      	movs	r3, #8
 8003902:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8003904:	2364      	movs	r3, #100	; 0x64
 8003906:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003908:	2302      	movs	r3, #2
 800390a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800390c:	2304      	movs	r3, #4
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003910:	f107 0320 	add.w	r3, r7, #32
 8003914:	4618      	mov	r0, r3
 8003916:	f001 fe7b 	bl	8005610 <HAL_RCC_OscConfig>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <SystemClock_Config+0x94>
		Error_Handler();
 8003920:	f000 f89e 	bl	8003a60 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003924:	230f      	movs	r3, #15
 8003926:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003928:	2302      	movs	r3, #2
 800392a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003934:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003936:	2300      	movs	r3, #0
 8003938:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800393a:	f107 030c 	add.w	r3, r7, #12
 800393e:	2103      	movs	r1, #3
 8003940:	4618      	mov	r0, r3
 8003942:	f002 f8dd 	bl	8005b00 <HAL_RCC_ClockConfig>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <SystemClock_Config+0xc0>
		Error_Handler();
 800394c:	f000 f888 	bl	8003a60 <Error_Handler>
	}
}
 8003950:	bf00      	nop
 8003952:	3750      	adds	r7, #80	; 0x50
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	40007000 	.word	0x40007000

08003960 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003964:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003966:	4a13      	ldr	r2, [pc, #76]	; (80039b4 <MX_I2C1_Init+0x54>)
 8003968:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800396a:	4b11      	ldr	r3, [pc, #68]	; (80039b0 <MX_I2C1_Init+0x50>)
 800396c:	4a12      	ldr	r2, [pc, #72]	; (80039b8 <MX_I2C1_Init+0x58>)
 800396e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003970:	4b0f      	ldr	r3, [pc, #60]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003976:	4b0e      	ldr	r3, [pc, #56]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003978:	2200      	movs	r2, #0
 800397a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800397c:	4b0c      	ldr	r3, [pc, #48]	; (80039b0 <MX_I2C1_Init+0x50>)
 800397e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003982:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003984:	4b0a      	ldr	r3, [pc, #40]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003986:	2200      	movs	r2, #0
 8003988:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800398a:	4b09      	ldr	r3, [pc, #36]	; (80039b0 <MX_I2C1_Init+0x50>)
 800398c:	2200      	movs	r2, #0
 800398e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003990:	4b07      	ldr	r3, [pc, #28]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003992:	2200      	movs	r2, #0
 8003994:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003996:	4b06      	ldr	r3, [pc, #24]	; (80039b0 <MX_I2C1_Init+0x50>)
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800399c:	4804      	ldr	r0, [pc, #16]	; (80039b0 <MX_I2C1_Init+0x50>)
 800399e:	f000 fd49 	bl	8004434 <HAL_I2C_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_I2C1_Init+0x4c>
		Error_Handler();
 80039a8:	f000 f85a 	bl	8003a60 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80039ac:	bf00      	nop
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	200002f0 	.word	0x200002f0
 80039b4:	40005400 	.word	0x40005400
 80039b8:	000186a0 	.word	0x000186a0

080039bc <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80039c0:	4b11      	ldr	r3, [pc, #68]	; (8003a08 <MX_USART2_UART_Init+0x4c>)
 80039c2:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <MX_USART2_UART_Init+0x50>)
 80039c4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80039c6:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <MX_USART2_UART_Init+0x4c>)
 80039c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039cc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <MX_USART2_UART_Init+0x4c>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <MX_USART2_UART_Init+0x4c>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <MX_USART2_UART_Init+0x4c>)
 80039dc:	2200      	movs	r2, #0
 80039de:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <MX_USART2_UART_Init+0x4c>)
 80039e2:	220c      	movs	r2, #12
 80039e4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039e6:	4b08      	ldr	r3, [pc, #32]	; (8003a08 <MX_USART2_UART_Init+0x4c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <MX_USART2_UART_Init+0x4c>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80039f2:	4805      	ldr	r0, [pc, #20]	; (8003a08 <MX_USART2_UART_Init+0x4c>)
 80039f4:	f002 fa80 	bl	8005ef8 <HAL_UART_Init>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80039fe:	f000 f82f 	bl	8003a60 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003a02:	bf00      	nop
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000344 	.word	0x20000344
 8003a0c:	40004400 	.word	0x40004400

08003a10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <MX_GPIO_Init+0x4c>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <MX_GPIO_Init+0x4c>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6313      	str	r3, [r2, #48]	; 0x30
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <MX_GPIO_Init+0x4c>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <MX_GPIO_Init+0x4c>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <MX_GPIO_Init+0x4c>)
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <MX_GPIO_Init+0x4c>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]

}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a64:	b672      	cpsid	i
}
 8003a66:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003a68:	e7fe      	b.n	8003a68 <Error_Handler+0x8>
	...

08003a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	607b      	str	r3, [r7, #4]
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	4a0f      	ldr	r2, [pc, #60]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a80:	6453      	str	r3, [r2, #68]	; 0x44
 8003a82:	4b0d      	ldr	r3, [pc, #52]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8a:	607b      	str	r3, [r7, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	4a08      	ldr	r2, [pc, #32]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9e:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <HAL_MspInit+0x4c>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003aaa:	2007      	movs	r0, #7
 8003aac:	f000 fb0a 	bl	80040c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800

08003abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac4:	f107 0314 	add.w	r3, r7, #20
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	60da      	str	r2, [r3, #12]
 8003ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_I2C_MspInit+0x84>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d12c      	bne.n	8003b38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	613b      	str	r3, [r7, #16]
 8003ae2:	4b18      	ldr	r3, [pc, #96]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	6313      	str	r3, [r2, #48]	; 0x30
 8003aee:	4b15      	ldr	r3, [pc, #84]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003afa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b00:	2312      	movs	r3, #18
 8003b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b04:	2301      	movs	r3, #1
 8003b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b0c:	2304      	movs	r3, #4
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4619      	mov	r1, r3
 8003b16:	480c      	ldr	r0, [pc, #48]	; (8003b48 <HAL_I2C_MspInit+0x8c>)
 8003b18:	f000 fb08 	bl	800412c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	4a07      	ldr	r2, [pc, #28]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_I2C_MspInit+0x88>)
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b38:	bf00      	nop
 8003b3a:	3728      	adds	r7, #40	; 0x28
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	40005400 	.word	0x40005400
 8003b44:	40023800 	.word	0x40023800
 8003b48:	40020400 	.word	0x40020400

08003b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b54:	f107 0314 	add.w	r3, r7, #20
 8003b58:	2200      	movs	r2, #0
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	605a      	str	r2, [r3, #4]
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a19      	ldr	r2, [pc, #100]	; (8003bd0 <HAL_UART_MspInit+0x84>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d12b      	bne.n	8003bc6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	4b18      	ldr	r3, [pc, #96]	; (8003bd4 <HAL_UART_MspInit+0x88>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <HAL_UART_MspInit+0x88>)
 8003b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b7e:	4b15      	ldr	r3, [pc, #84]	; (8003bd4 <HAL_UART_MspInit+0x88>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <HAL_UART_MspInit+0x88>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a10      	ldr	r2, [pc, #64]	; (8003bd4 <HAL_UART_MspInit+0x88>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <HAL_UART_MspInit+0x88>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003baa:	2302      	movs	r3, #2
 8003bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003bb6:	2307      	movs	r3, #7
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bba:	f107 0314 	add.w	r3, r7, #20
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4805      	ldr	r0, [pc, #20]	; (8003bd8 <HAL_UART_MspInit+0x8c>)
 8003bc2:	f000 fab3 	bl	800412c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003bc6:	bf00      	nop
 8003bc8:	3728      	adds	r7, #40	; 0x28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40004400 	.word	0x40004400
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	40020000 	.word	0x40020000

08003bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003be0:	e7fe      	b.n	8003be0 <NMI_Handler+0x4>

08003be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be2:	b480      	push	{r7}
 8003be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be6:	e7fe      	b.n	8003be6 <HardFault_Handler+0x4>

08003be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bec:	e7fe      	b.n	8003bec <MemManage_Handler+0x4>

08003bee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf2:	e7fe      	b.n	8003bf2 <BusFault_Handler+0x4>

08003bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bf8:	e7fe      	b.n	8003bf8 <UsageFault_Handler+0x4>

08003bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bfa:	b480      	push	{r7}
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c16:	b480      	push	{r7}
 8003c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c28:	f000 f956 	bl	8003ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c2c:	bf00      	nop
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
	return 1;
 8003c34:	2301      	movs	r3, #1
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <_kill>:

int _kill(int pid, int sig)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c4a:	f002 fc47 	bl	80064dc <__errno>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2216      	movs	r2, #22
 8003c52:	601a      	str	r2, [r3, #0]
	return -1;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <_exit>:

void _exit (int status)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c68:	f04f 31ff 	mov.w	r1, #4294967295
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ffe7 	bl	8003c40 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c72:	e7fe      	b.n	8003c72 <_exit+0x12>

08003c74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e00a      	b.n	8003c9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c86:	f3af 8000 	nop.w
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	60ba      	str	r2, [r7, #8]
 8003c92:	b2ca      	uxtb	r2, r1
 8003c94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	dbf0      	blt.n	8003c86 <_read+0x12>
	}

return len;
 8003ca4:	687b      	ldr	r3, [r7, #4]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b086      	sub	sp, #24
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	e009      	b.n	8003cd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	60ba      	str	r2, [r7, #8]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	dbf1      	blt.n	8003cc0 <_write+0x12>
	}
	return len;
 8003cdc:	687b      	ldr	r3, [r7, #4]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <_close>:

int _close(int file)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
	return -1;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d0e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <_isatty>:

int _isatty(int file)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
	return 1;
 8003d26:	2301      	movs	r3, #1
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
	...

08003d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d58:	4a14      	ldr	r2, [pc, #80]	; (8003dac <_sbrk+0x5c>)
 8003d5a:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <_sbrk+0x60>)
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d64:	4b13      	ldr	r3, [pc, #76]	; (8003db4 <_sbrk+0x64>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d102      	bne.n	8003d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d6c:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <_sbrk+0x64>)
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <_sbrk+0x68>)
 8003d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <_sbrk+0x64>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4413      	add	r3, r2
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d207      	bcs.n	8003d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d80:	f002 fbac 	bl	80064dc <__errno>
 8003d84:	4603      	mov	r3, r0
 8003d86:	220c      	movs	r2, #12
 8003d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d8e:	e009      	b.n	8003da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <_sbrk+0x64>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <_sbrk+0x64>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4a05      	ldr	r2, [pc, #20]	; (8003db4 <_sbrk+0x64>)
 8003da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003da2:	68fb      	ldr	r3, [r7, #12]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3718      	adds	r7, #24
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20020000 	.word	0x20020000
 8003db0:	00000400 	.word	0x00000400
 8003db4:	20000214 	.word	0x20000214
 8003db8:	200003a0 	.word	0x200003a0

08003dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003dc0:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <SystemInit+0x20>)
 8003dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc6:	4a05      	ldr	r2, [pc, #20]	; (8003ddc <SystemInit+0x20>)
 8003dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	e000ed00 	.word	0xe000ed00

08003de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003de0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003de4:	480d      	ldr	r0, [pc, #52]	; (8003e1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003de6:	490e      	ldr	r1, [pc, #56]	; (8003e20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003de8:	4a0e      	ldr	r2, [pc, #56]	; (8003e24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003dec:	e002      	b.n	8003df4 <LoopCopyDataInit>

08003dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003df2:	3304      	adds	r3, #4

08003df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003df8:	d3f9      	bcc.n	8003dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003dfa:	4a0b      	ldr	r2, [pc, #44]	; (8003e28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003dfc:	4c0b      	ldr	r4, [pc, #44]	; (8003e2c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e00:	e001      	b.n	8003e06 <LoopFillZerobss>

08003e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e04:	3204      	adds	r2, #4

08003e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e08:	d3fb      	bcc.n	8003e02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e0a:	f7ff ffd7 	bl	8003dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e0e:	f002 fb6b 	bl	80064e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e12:	f7ff fcc1 	bl	8003798 <main>
  bx  lr    
 8003e16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e20:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8003e24:	0800b38c 	.word	0x0800b38c
  ldr r2, =_sbss
 8003e28:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003e2c:	2000039c 	.word	0x2000039c

08003e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e30:	e7fe      	b.n	8003e30 <ADC_IRQHandler>
	...

08003e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e38:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <HAL_Init+0x40>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	; (8003e74 <HAL_Init+0x40>)
 8003e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_Init+0x40>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <HAL_Init+0x40>)
 8003e4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e50:	4b08      	ldr	r3, [pc, #32]	; (8003e74 <HAL_Init+0x40>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <HAL_Init+0x40>)
 8003e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e5c:	2003      	movs	r0, #3
 8003e5e:	f000 f931 	bl	80040c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e62:	2000      	movs	r0, #0
 8003e64:	f000 f808 	bl	8003e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e68:	f7ff fe00 	bl	8003a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	40023c00 	.word	0x40023c00

08003e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e80:	4b12      	ldr	r3, [pc, #72]	; (8003ecc <HAL_InitTick+0x54>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_InitTick+0x58>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 f93b 	bl	8004112 <HAL_SYSTICK_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00e      	b.n	8003ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b0f      	cmp	r3, #15
 8003eaa:	d80a      	bhi.n	8003ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003eac:	2200      	movs	r2, #0
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	f000 f911 	bl	80040da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003eb8:	4a06      	ldr	r2, [pc, #24]	; (8003ed4 <HAL_InitTick+0x5c>)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e000      	b.n	8003ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000014 	.word	0x20000014
 8003ed0:	2000001c 	.word	0x2000001c
 8003ed4:	20000018 	.word	0x20000018

08003ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003edc:	4b06      	ldr	r3, [pc, #24]	; (8003ef8 <HAL_IncTick+0x20>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <HAL_IncTick+0x24>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <HAL_IncTick+0x24>)
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	bf00      	nop
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	2000001c 	.word	0x2000001c
 8003efc:	20000388 	.word	0x20000388

08003f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  return uwTick;
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_GetTick+0x14>)
 8003f06:	681b      	ldr	r3, [r3, #0]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	20000388 	.word	0x20000388

08003f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f20:	f7ff ffee 	bl	8003f00 <HAL_GetTick>
 8003f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d005      	beq.n	8003f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f32:	4b0a      	ldr	r3, [pc, #40]	; (8003f5c <HAL_Delay+0x44>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f3e:	bf00      	nop
 8003f40:	f7ff ffde 	bl	8003f00 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d8f7      	bhi.n	8003f40 <HAL_Delay+0x28>
  {
  }
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	2000001c 	.word	0x2000001c

08003f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f003 0307 	and.w	r3, r3, #7
 8003f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f92:	4a04      	ldr	r2, [pc, #16]	; (8003fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	60d3      	str	r3, [r2, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fac:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	0a1b      	lsrs	r3, r3, #8
 8003fb2:	f003 0307 	and.w	r3, r3, #7
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	e000ed00 	.word	0xe000ed00

08003fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	4603      	mov	r3, r0
 8003fcc:	6039      	str	r1, [r7, #0]
 8003fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	db0a      	blt.n	8003fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	490c      	ldr	r1, [pc, #48]	; (8004010 <__NVIC_SetPriority+0x4c>)
 8003fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe2:	0112      	lsls	r2, r2, #4
 8003fe4:	b2d2      	uxtb	r2, r2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003fec:	e00a      	b.n	8004004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4908      	ldr	r1, [pc, #32]	; (8004014 <__NVIC_SetPriority+0x50>)
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	f003 030f 	and.w	r3, r3, #15
 8003ffa:	3b04      	subs	r3, #4
 8003ffc:	0112      	lsls	r2, r2, #4
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	440b      	add	r3, r1
 8004002:	761a      	strb	r2, [r3, #24]
}
 8004004:	bf00      	nop
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr
 8004010:	e000e100 	.word	0xe000e100
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004018:	b480      	push	{r7}
 800401a:	b089      	sub	sp, #36	; 0x24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	f1c3 0307 	rsb	r3, r3, #7
 8004032:	2b04      	cmp	r3, #4
 8004034:	bf28      	it	cs
 8004036:	2304      	movcs	r3, #4
 8004038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	3304      	adds	r3, #4
 800403e:	2b06      	cmp	r3, #6
 8004040:	d902      	bls.n	8004048 <NVIC_EncodePriority+0x30>
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3b03      	subs	r3, #3
 8004046:	e000      	b.n	800404a <NVIC_EncodePriority+0x32>
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800404c:	f04f 32ff 	mov.w	r2, #4294967295
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43da      	mvns	r2, r3
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	401a      	ands	r2, r3
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004060:	f04f 31ff 	mov.w	r1, #4294967295
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	fa01 f303 	lsl.w	r3, r1, r3
 800406a:	43d9      	mvns	r1, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004070:	4313      	orrs	r3, r2
         );
}
 8004072:	4618      	mov	r0, r3
 8004074:	3724      	adds	r7, #36	; 0x24
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
	...

08004080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	3b01      	subs	r3, #1
 800408c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004090:	d301      	bcc.n	8004096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004092:	2301      	movs	r3, #1
 8004094:	e00f      	b.n	80040b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004096:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <SysTick_Config+0x40>)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3b01      	subs	r3, #1
 800409c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800409e:	210f      	movs	r1, #15
 80040a0:	f04f 30ff 	mov.w	r0, #4294967295
 80040a4:	f7ff ff8e 	bl	8003fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040a8:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <SysTick_Config+0x40>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <SysTick_Config+0x40>)
 80040b0:	2207      	movs	r2, #7
 80040b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	e000e010 	.word	0xe000e010

080040c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ff47 	bl	8003f60 <__NVIC_SetPriorityGrouping>
}
 80040d2:	bf00      	nop
 80040d4:	3708      	adds	r7, #8
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	4603      	mov	r3, r0
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
 80040e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040ec:	f7ff ff5c 	bl	8003fa8 <__NVIC_GetPriorityGrouping>
 80040f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	6978      	ldr	r0, [r7, #20]
 80040f8:	f7ff ff8e 	bl	8004018 <NVIC_EncodePriority>
 80040fc:	4602      	mov	r2, r0
 80040fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004102:	4611      	mov	r1, r2
 8004104:	4618      	mov	r0, r3
 8004106:	f7ff ff5d 	bl	8003fc4 <__NVIC_SetPriority>
}
 800410a:	bf00      	nop
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b082      	sub	sp, #8
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f7ff ffb0 	bl	8004080 <SysTick_Config>
 8004120:	4603      	mov	r3, r0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800412c:	b480      	push	{r7}
 800412e:	b089      	sub	sp, #36	; 0x24
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004136:	2300      	movs	r3, #0
 8004138:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800413a:	2300      	movs	r3, #0
 800413c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800413e:	2300      	movs	r3, #0
 8004140:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004142:	2300      	movs	r3, #0
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	e159      	b.n	80043fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004148:	2201      	movs	r2, #1
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	fa02 f303 	lsl.w	r3, r2, r3
 8004150:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	429a      	cmp	r2, r3
 8004162:	f040 8148 	bne.w	80043f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d005      	beq.n	800417e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800417a:	2b02      	cmp	r3, #2
 800417c:	d130      	bne.n	80041e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	2203      	movs	r2, #3
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041b4:	2201      	movs	r2, #1
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	091b      	lsrs	r3, r3, #4
 80041ca:	f003 0201 	and.w	r2, r3, #1
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	fa02 f303 	lsl.w	r3, r2, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	2b03      	cmp	r3, #3
 80041ea:	d017      	beq.n	800421c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	2203      	movs	r2, #3
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	fa02 f303 	lsl.w	r3, r2, r3
 8004210:	69ba      	ldr	r2, [r7, #24]
 8004212:	4313      	orrs	r3, r2
 8004214:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d123      	bne.n	8004270 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	08da      	lsrs	r2, r3, #3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3208      	adds	r2, #8
 8004230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004234:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	220f      	movs	r2, #15
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	4013      	ands	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	fa02 f303 	lsl.w	r3, r2, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4313      	orrs	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	08da      	lsrs	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3208      	adds	r2, #8
 800426a:	69b9      	ldr	r1, [r7, #24]
 800426c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	2203      	movs	r2, #3
 800427c:	fa02 f303 	lsl.w	r3, r2, r3
 8004280:	43db      	mvns	r3, r3
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4013      	ands	r3, r2
 8004286:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 0203 	and.w	r2, r3, #3
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4313      	orrs	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80a2 	beq.w	80043f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	4b57      	ldr	r3, [pc, #348]	; (8004414 <HAL_GPIO_Init+0x2e8>)
 80042b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ba:	4a56      	ldr	r2, [pc, #344]	; (8004414 <HAL_GPIO_Init+0x2e8>)
 80042bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042c0:	6453      	str	r3, [r2, #68]	; 0x44
 80042c2:	4b54      	ldr	r3, [pc, #336]	; (8004414 <HAL_GPIO_Init+0x2e8>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ce:	4a52      	ldr	r2, [pc, #328]	; (8004418 <HAL_GPIO_Init+0x2ec>)
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	089b      	lsrs	r3, r3, #2
 80042d4:	3302      	adds	r3, #2
 80042d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f003 0303 	and.w	r3, r3, #3
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	220f      	movs	r2, #15
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4013      	ands	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a49      	ldr	r2, [pc, #292]	; (800441c <HAL_GPIO_Init+0x2f0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d019      	beq.n	800432e <HAL_GPIO_Init+0x202>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a48      	ldr	r2, [pc, #288]	; (8004420 <HAL_GPIO_Init+0x2f4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d013      	beq.n	800432a <HAL_GPIO_Init+0x1fe>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a47      	ldr	r2, [pc, #284]	; (8004424 <HAL_GPIO_Init+0x2f8>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d00d      	beq.n	8004326 <HAL_GPIO_Init+0x1fa>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a46      	ldr	r2, [pc, #280]	; (8004428 <HAL_GPIO_Init+0x2fc>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d007      	beq.n	8004322 <HAL_GPIO_Init+0x1f6>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a45      	ldr	r2, [pc, #276]	; (800442c <HAL_GPIO_Init+0x300>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d101      	bne.n	800431e <HAL_GPIO_Init+0x1f2>
 800431a:	2304      	movs	r3, #4
 800431c:	e008      	b.n	8004330 <HAL_GPIO_Init+0x204>
 800431e:	2307      	movs	r3, #7
 8004320:	e006      	b.n	8004330 <HAL_GPIO_Init+0x204>
 8004322:	2303      	movs	r3, #3
 8004324:	e004      	b.n	8004330 <HAL_GPIO_Init+0x204>
 8004326:	2302      	movs	r3, #2
 8004328:	e002      	b.n	8004330 <HAL_GPIO_Init+0x204>
 800432a:	2301      	movs	r3, #1
 800432c:	e000      	b.n	8004330 <HAL_GPIO_Init+0x204>
 800432e:	2300      	movs	r3, #0
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	f002 0203 	and.w	r2, r2, #3
 8004336:	0092      	lsls	r2, r2, #2
 8004338:	4093      	lsls	r3, r2
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4313      	orrs	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004340:	4935      	ldr	r1, [pc, #212]	; (8004418 <HAL_GPIO_Init+0x2ec>)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	089b      	lsrs	r3, r3, #2
 8004346:	3302      	adds	r3, #2
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800434e:	4b38      	ldr	r3, [pc, #224]	; (8004430 <HAL_GPIO_Init+0x304>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	43db      	mvns	r3, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4013      	ands	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004372:	4a2f      	ldr	r2, [pc, #188]	; (8004430 <HAL_GPIO_Init+0x304>)
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004378:	4b2d      	ldr	r3, [pc, #180]	; (8004430 <HAL_GPIO_Init+0x304>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800439c:	4a24      	ldr	r2, [pc, #144]	; (8004430 <HAL_GPIO_Init+0x304>)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043a2:	4b23      	ldr	r3, [pc, #140]	; (8004430 <HAL_GPIO_Init+0x304>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043c6:	4a1a      	ldr	r2, [pc, #104]	; (8004430 <HAL_GPIO_Init+0x304>)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043cc:	4b18      	ldr	r3, [pc, #96]	; (8004430 <HAL_GPIO_Init+0x304>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	43db      	mvns	r3, r3
 80043d6:	69ba      	ldr	r2, [r7, #24]
 80043d8:	4013      	ands	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043f0:	4a0f      	ldr	r2, [pc, #60]	; (8004430 <HAL_GPIO_Init+0x304>)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3301      	adds	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	f67f aea2 	bls.w	8004148 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004404:	bf00      	nop
 8004406:	bf00      	nop
 8004408:	3724      	adds	r7, #36	; 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40023800 	.word	0x40023800
 8004418:	40013800 	.word	0x40013800
 800441c:	40020000 	.word	0x40020000
 8004420:	40020400 	.word	0x40020400
 8004424:	40020800 	.word	0x40020800
 8004428:	40020c00 	.word	0x40020c00
 800442c:	40021000 	.word	0x40021000
 8004430:	40013c00 	.word	0x40013c00

08004434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e12b      	b.n	800469e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7ff fb2e 	bl	8003abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	; 0x24
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004498:	f001 fd06 	bl	8005ea8 <HAL_RCC_GetPCLK1Freq>
 800449c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4a81      	ldr	r2, [pc, #516]	; (80046a8 <HAL_I2C_Init+0x274>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d807      	bhi.n	80044b8 <HAL_I2C_Init+0x84>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a80      	ldr	r2, [pc, #512]	; (80046ac <HAL_I2C_Init+0x278>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	bf94      	ite	ls
 80044b0:	2301      	movls	r3, #1
 80044b2:	2300      	movhi	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e006      	b.n	80044c6 <HAL_I2C_Init+0x92>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a7d      	ldr	r2, [pc, #500]	; (80046b0 <HAL_I2C_Init+0x27c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	bf94      	ite	ls
 80044c0:	2301      	movls	r3, #1
 80044c2:	2300      	movhi	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0e7      	b.n	800469e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a78      	ldr	r2, [pc, #480]	; (80046b4 <HAL_I2C_Init+0x280>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	0c9b      	lsrs	r3, r3, #18
 80044d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a6a      	ldr	r2, [pc, #424]	; (80046a8 <HAL_I2C_Init+0x274>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d802      	bhi.n	8004508 <HAL_I2C_Init+0xd4>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3301      	adds	r3, #1
 8004506:	e009      	b.n	800451c <HAL_I2C_Init+0xe8>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	4a69      	ldr	r2, [pc, #420]	; (80046b8 <HAL_I2C_Init+0x284>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	099b      	lsrs	r3, r3, #6
 800451a:	3301      	adds	r3, #1
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	430b      	orrs	r3, r1
 8004522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800452e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	495c      	ldr	r1, [pc, #368]	; (80046a8 <HAL_I2C_Init+0x274>)
 8004538:	428b      	cmp	r3, r1
 800453a:	d819      	bhi.n	8004570 <HAL_I2C_Init+0x13c>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1e59      	subs	r1, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	fbb1 f3f3 	udiv	r3, r1, r3
 800454a:	1c59      	adds	r1, r3, #1
 800454c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004550:	400b      	ands	r3, r1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_I2C_Init+0x138>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1e59      	subs	r1, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fbb1 f3f3 	udiv	r3, r1, r3
 8004564:	3301      	adds	r3, #1
 8004566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456a:	e051      	b.n	8004610 <HAL_I2C_Init+0x1dc>
 800456c:	2304      	movs	r3, #4
 800456e:	e04f      	b.n	8004610 <HAL_I2C_Init+0x1dc>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d111      	bne.n	800459c <HAL_I2C_Init+0x168>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1e58      	subs	r0, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	440b      	add	r3, r1
 8004586:	fbb0 f3f3 	udiv	r3, r0, r3
 800458a:	3301      	adds	r3, #1
 800458c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	e012      	b.n	80045c2 <HAL_I2C_Init+0x18e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1e58      	subs	r0, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	0099      	lsls	r1, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b2:	3301      	adds	r3, #1
 80045b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Init+0x196>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e022      	b.n	8004610 <HAL_I2C_Init+0x1dc>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10e      	bne.n	80045f0 <HAL_I2C_Init+0x1bc>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1e58      	subs	r0, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6859      	ldr	r1, [r3, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	440b      	add	r3, r1
 80045e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e4:	3301      	adds	r3, #1
 80045e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ee:	e00f      	b.n	8004610 <HAL_I2C_Init+0x1dc>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e58      	subs	r0, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	0099      	lsls	r1, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	fbb0 f3f3 	udiv	r3, r0, r3
 8004606:	3301      	adds	r3, #1
 8004608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	6809      	ldr	r1, [r1, #0]
 8004614:	4313      	orrs	r3, r2
 8004616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800463e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6911      	ldr	r1, [r2, #16]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68d2      	ldr	r2, [r2, #12]
 800464a:	4311      	orrs	r1, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	430b      	orrs	r3, r1
 8004652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	000186a0 	.word	0x000186a0
 80046ac:	001e847f 	.word	0x001e847f
 80046b0:	003d08ff 	.word	0x003d08ff
 80046b4:	431bde83 	.word	0x431bde83
 80046b8:	10624dd3 	.word	0x10624dd3

080046bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	4608      	mov	r0, r1
 80046c6:	4611      	mov	r1, r2
 80046c8:	461a      	mov	r2, r3
 80046ca:	4603      	mov	r3, r0
 80046cc:	817b      	strh	r3, [r7, #10]
 80046ce:	460b      	mov	r3, r1
 80046d0:	813b      	strh	r3, [r7, #8]
 80046d2:	4613      	mov	r3, r2
 80046d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046d6:	f7ff fc13 	bl	8003f00 <HAL_GetTick>
 80046da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b20      	cmp	r3, #32
 80046e6:	f040 80d9 	bne.w	800489c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2319      	movs	r3, #25
 80046f0:	2201      	movs	r2, #1
 80046f2:	496d      	ldr	r1, [pc, #436]	; (80048a8 <HAL_I2C_Mem_Write+0x1ec>)
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 fdad 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d001      	beq.n	8004704 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004700:	2302      	movs	r3, #2
 8004702:	e0cc      	b.n	800489e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_I2C_Mem_Write+0x56>
 800470e:	2302      	movs	r3, #2
 8004710:	e0c5      	b.n	800489e <HAL_I2C_Mem_Write+0x1e2>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b01      	cmp	r3, #1
 8004726:	d007      	beq.n	8004738 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f042 0201 	orr.w	r2, r2, #1
 8004736:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004746:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2221      	movs	r2, #33	; 0x21
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2240      	movs	r2, #64	; 0x40
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a3a      	ldr	r2, [r7, #32]
 8004762:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	4a4d      	ldr	r2, [pc, #308]	; (80048ac <HAL_I2C_Mem_Write+0x1f0>)
 8004778:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800477a:	88f8      	ldrh	r0, [r7, #6]
 800477c:	893a      	ldrh	r2, [r7, #8]
 800477e:	8979      	ldrh	r1, [r7, #10]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	4603      	mov	r3, r0
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 fbe4 	bl	8004f58 <I2C_RequestMemoryWrite>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d052      	beq.n	800483c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e081      	b.n	800489e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fe2e 	bl	8005400 <I2C_WaitOnTXEFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00d      	beq.n	80047c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d107      	bne.n	80047c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e06b      	b.n	800489e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b04      	cmp	r3, #4
 8004802:	d11b      	bne.n	800483c <HAL_I2C_Mem_Write+0x180>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	2b00      	cmp	r3, #0
 800480a:	d017      	beq.n	800483c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	781a      	ldrb	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1aa      	bne.n	800479a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 fe1a 	bl	8005482 <I2C_WaitOnBTFFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00d      	beq.n	8004870 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b04      	cmp	r3, #4
 800485a:	d107      	bne.n	800486c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e016      	b.n	800489e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800487e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	00100002 	.word	0x00100002
 80048ac:	ffff0000 	.word	0xffff0000

080048b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b08c      	sub	sp, #48	; 0x30
 80048b4:	af02      	add	r7, sp, #8
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	4608      	mov	r0, r1
 80048ba:	4611      	mov	r1, r2
 80048bc:	461a      	mov	r2, r3
 80048be:	4603      	mov	r3, r0
 80048c0:	817b      	strh	r3, [r7, #10]
 80048c2:	460b      	mov	r3, r1
 80048c4:	813b      	strh	r3, [r7, #8]
 80048c6:	4613      	mov	r3, r2
 80048c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ca:	f7ff fb19 	bl	8003f00 <HAL_GetTick>
 80048ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b20      	cmp	r3, #32
 80048da:	f040 8208 	bne.w	8004cee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	2319      	movs	r3, #25
 80048e4:	2201      	movs	r2, #1
 80048e6:	497b      	ldr	r1, [pc, #492]	; (8004ad4 <HAL_I2C_Mem_Read+0x224>)
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 fcb3 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80048f4:	2302      	movs	r3, #2
 80048f6:	e1fb      	b.n	8004cf0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_I2C_Mem_Read+0x56>
 8004902:	2302      	movs	r3, #2
 8004904:	e1f4      	b.n	8004cf0 <HAL_I2C_Mem_Read+0x440>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b01      	cmp	r3, #1
 800491a:	d007      	beq.n	800492c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2222      	movs	r2, #34	; 0x22
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2240      	movs	r2, #64	; 0x40
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800495c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4a5b      	ldr	r2, [pc, #364]	; (8004ad8 <HAL_I2C_Mem_Read+0x228>)
 800496c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800496e:	88f8      	ldrh	r0, [r7, #6]
 8004970:	893a      	ldrh	r2, [r7, #8]
 8004972:	8979      	ldrh	r1, [r7, #10]
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	9301      	str	r3, [sp, #4]
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	4603      	mov	r3, r0
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fb80 	bl	8005084 <I2C_RequestMemoryRead>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e1b0      	b.n	8004cf0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	d113      	bne.n	80049be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004996:	2300      	movs	r3, #0
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	695b      	ldr	r3, [r3, #20]
 80049a0:	623b      	str	r3, [r7, #32]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	699b      	ldr	r3, [r3, #24]
 80049a8:	623b      	str	r3, [r7, #32]
 80049aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	e184      	b.n	8004cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d11b      	bne.n	80049fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	e164      	b.n	8004cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d11b      	bne.n	8004a3e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a26:	2300      	movs	r3, #0
 8004a28:	61bb      	str	r3, [r7, #24]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	e144      	b.n	8004cc8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a54:	e138      	b.n	8004cc8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	f200 80f1 	bhi.w	8004c42 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d123      	bne.n	8004ab0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fd49 	bl	8005504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e139      	b.n	8004cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	b2d2      	uxtb	r2, r2
 8004a88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	b29a      	uxth	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004aae:	e10b      	b.n	8004cc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d14e      	bne.n	8004b56 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	2200      	movs	r2, #0
 8004ac0:	4906      	ldr	r1, [pc, #24]	; (8004adc <HAL_I2C_Mem_Read+0x22c>)
 8004ac2:	68f8      	ldr	r0, [r7, #12]
 8004ac4:	f000 fbc6 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e10e      	b.n	8004cf0 <HAL_I2C_Mem_Read+0x440>
 8004ad2:	bf00      	nop
 8004ad4:	00100002 	.word	0x00100002
 8004ad8:	ffff0000 	.word	0xffff0000
 8004adc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afa:	b2d2      	uxtb	r2, r2
 8004afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	b2d2      	uxtb	r2, r2
 8004b2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	b29a      	uxth	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b54:	e0b8      	b.n	8004cc8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	4966      	ldr	r1, [pc, #408]	; (8004cf8 <HAL_I2C_Mem_Read+0x448>)
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 fb77 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e0bf      	b.n	8004cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bb8:	2200      	movs	r2, #0
 8004bba:	494f      	ldr	r1, [pc, #316]	; (8004cf8 <HAL_I2C_Mem_Read+0x448>)
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fb49 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d001      	beq.n	8004bcc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e091      	b.n	8004cf0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c40:	e042      	b.n	8004cc8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c44:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fc5c 	bl	8005504 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e04c      	b.n	8004cf0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c60:	b2d2      	uxtb	r2, r2
 8004c62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c72:	3b01      	subs	r3, #1
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d118      	bne.n	8004cc8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	691a      	ldr	r2, [r3, #16]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	f47f aec2 	bne.w	8004a56 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	e000      	b.n	8004cf0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004cee:	2302      	movs	r3, #2
  }
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	00010004 	.word	0x00010004

08004cfc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08a      	sub	sp, #40	; 0x28
 8004d00:	af02      	add	r7, sp, #8
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	607a      	str	r2, [r7, #4]
 8004d06:	603b      	str	r3, [r7, #0]
 8004d08:	460b      	mov	r3, r1
 8004d0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004d0c:	f7ff f8f8 	bl	8003f00 <HAL_GetTick>
 8004d10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004d12:	2301      	movs	r3, #1
 8004d14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	f040 8111 	bne.w	8004f46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	2319      	movs	r3, #25
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	4988      	ldr	r1, [pc, #544]	; (8004f50 <HAL_I2C_IsDeviceReady+0x254>)
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fa90 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e104      	b.n	8004f48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d101      	bne.n	8004d4c <HAL_I2C_IsDeviceReady+0x50>
 8004d48:	2302      	movs	r3, #2
 8004d4a:	e0fd      	b.n	8004f48 <HAL_I2C_IsDeviceReady+0x24c>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d007      	beq.n	8004d72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2224      	movs	r2, #36	; 0x24
 8004d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4a70      	ldr	r2, [pc, #448]	; (8004f54 <HAL_I2C_IsDeviceReady+0x258>)
 8004d94:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004da4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004da6:	69fb      	ldr	r3, [r7, #28]
 8004da8:	9300      	str	r3, [sp, #0]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2200      	movs	r2, #0
 8004dae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fa4e 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dcc:	d103      	bne.n	8004dd6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e0b6      	b.n	8004f48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004dda:	897b      	ldrh	r3, [r7, #10]
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	461a      	mov	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004de8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004dea:	f7ff f889 	bl	8003f00 <HAL_GetTick>
 8004dee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	bf0c      	ite	eq
 8004dfe:	2301      	moveq	r3, #1
 8004e00:	2300      	movne	r3, #0
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e14:	bf0c      	ite	eq
 8004e16:	2301      	moveq	r3, #1
 8004e18:	2300      	movne	r3, #0
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004e1e:	e025      	b.n	8004e6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e20:	f7ff f86e 	bl	8003f00 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d302      	bcc.n	8004e36 <HAL_I2C_IsDeviceReady+0x13a>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d103      	bne.n	8004e3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	22a0      	movs	r2, #160	; 0xa0
 8004e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695b      	ldr	r3, [r3, #20]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	bf0c      	ite	eq
 8004e4c:	2301      	moveq	r3, #1
 8004e4e:	2300      	movne	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e62:	bf0c      	ite	eq
 8004e64:	2301      	moveq	r3, #1
 8004e66:	2300      	movne	r3, #0
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2ba0      	cmp	r3, #160	; 0xa0
 8004e76:	d005      	beq.n	8004e84 <HAL_I2C_IsDeviceReady+0x188>
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <HAL_I2C_IsDeviceReady+0x188>
 8004e7e:	7dbb      	ldrb	r3, [r7, #22]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d0cd      	beq.n	8004e20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d129      	bne.n	8004eee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	9300      	str	r3, [sp, #0]
 8004ec4:	2319      	movs	r3, #25
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	4921      	ldr	r1, [pc, #132]	; (8004f50 <HAL_I2C_IsDeviceReady+0x254>)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f9c2 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e036      	b.n	8004f48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	e02c      	b.n	8004f48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004efc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	2319      	movs	r3, #25
 8004f0e:	2201      	movs	r2, #1
 8004f10:	490f      	ldr	r1, [pc, #60]	; (8004f50 <HAL_I2C_IsDeviceReady+0x254>)
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f99e 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d001      	beq.n	8004f22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e012      	b.n	8004f48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	3301      	adds	r3, #1
 8004f26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	f4ff af32 	bcc.w	8004d96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004f46:	2302      	movs	r3, #2
  }
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	00100002 	.word	0x00100002
 8004f54:	ffff0000 	.word	0xffff0000

08004f58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af02      	add	r7, sp, #8
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	4608      	mov	r0, r1
 8004f62:	4611      	mov	r1, r2
 8004f64:	461a      	mov	r2, r3
 8004f66:	4603      	mov	r3, r0
 8004f68:	817b      	strh	r3, [r7, #10]
 8004f6a:	460b      	mov	r3, r1
 8004f6c:	813b      	strh	r3, [r7, #8]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	6a3b      	ldr	r3, [r7, #32]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f960 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00d      	beq.n	8004fb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa8:	d103      	bne.n	8004fb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e05f      	b.n	8005076 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fb6:	897b      	ldrh	r3, [r7, #10]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc8:	6a3a      	ldr	r2, [r7, #32]
 8004fca:	492d      	ldr	r1, [pc, #180]	; (8005080 <I2C_RequestMemoryWrite+0x128>)
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 f998 	bl	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d001      	beq.n	8004fdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e04c      	b.n	8005076 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff4:	6a39      	ldr	r1, [r7, #32]
 8004ff6:	68f8      	ldr	r0, [r7, #12]
 8004ff8:	f000 fa02 	bl	8005400 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	2b04      	cmp	r3, #4
 8005008:	d107      	bne.n	800501a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005018:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e02b      	b.n	8005076 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800501e:	88fb      	ldrh	r3, [r7, #6]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d105      	bne.n	8005030 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005024:	893b      	ldrh	r3, [r7, #8]
 8005026:	b2da      	uxtb	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	611a      	str	r2, [r3, #16]
 800502e:	e021      	b.n	8005074 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005030:	893b      	ldrh	r3, [r7, #8]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	b29b      	uxth	r3, r3
 8005036:	b2da      	uxtb	r2, r3
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005040:	6a39      	ldr	r1, [r7, #32]
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f9dc 	bl	8005400 <I2C_WaitOnTXEFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00d      	beq.n	800506a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b04      	cmp	r3, #4
 8005054:	d107      	bne.n	8005066 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005064:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e005      	b.n	8005076 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800506a:	893b      	ldrh	r3, [r7, #8]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	00010002 	.word	0x00010002

08005084 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b088      	sub	sp, #32
 8005088:	af02      	add	r7, sp, #8
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	4608      	mov	r0, r1
 800508e:	4611      	mov	r1, r2
 8005090:	461a      	mov	r2, r3
 8005092:	4603      	mov	r3, r0
 8005094:	817b      	strh	r3, [r7, #10]
 8005096:	460b      	mov	r3, r1
 8005098:	813b      	strh	r3, [r7, #8]
 800509a:	4613      	mov	r3, r2
 800509c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 f8c2 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00d      	beq.n	80050f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e4:	d103      	bne.n	80050ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e0aa      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050f2:	897b      	ldrh	r3, [r7, #10]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	461a      	mov	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005100:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005104:	6a3a      	ldr	r2, [r7, #32]
 8005106:	4952      	ldr	r1, [pc, #328]	; (8005250 <I2C_RequestMemoryRead+0x1cc>)
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 f8fa 	bl	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e097      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800512e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005130:	6a39      	ldr	r1, [r7, #32]
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f000 f964 	bl	8005400 <I2C_WaitOnTXEFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00d      	beq.n	800515a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	2b04      	cmp	r3, #4
 8005144:	d107      	bne.n	8005156 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005154:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e076      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d105      	bne.n	800516c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005160:	893b      	ldrh	r3, [r7, #8]
 8005162:	b2da      	uxtb	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	611a      	str	r2, [r3, #16]
 800516a:	e021      	b.n	80051b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800516c:	893b      	ldrh	r3, [r7, #8]
 800516e:	0a1b      	lsrs	r3, r3, #8
 8005170:	b29b      	uxth	r3, r3
 8005172:	b2da      	uxtb	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800517a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517c:	6a39      	ldr	r1, [r7, #32]
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f93e 	bl	8005400 <I2C_WaitOnTXEFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00d      	beq.n	80051a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b04      	cmp	r3, #4
 8005190:	d107      	bne.n	80051a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e050      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80051a6:	893b      	ldrh	r3, [r7, #8]
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	6a39      	ldr	r1, [r7, #32]
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 f923 	bl	8005400 <I2C_WaitOnTXEFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00d      	beq.n	80051dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d107      	bne.n	80051d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e035      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f82b 	bl	8005254 <I2C_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005212:	d103      	bne.n	800521c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e013      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005220:	897b      	ldrh	r3, [r7, #10]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	b2da      	uxtb	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	6a3a      	ldr	r2, [r7, #32]
 8005234:	4906      	ldr	r1, [pc, #24]	; (8005250 <I2C_RequestMemoryRead+0x1cc>)
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f863 	bl	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e000      	b.n	8005248 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	00010002 	.word	0x00010002

08005254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	4613      	mov	r3, r2
 8005262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005264:	e025      	b.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d021      	beq.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800526e:	f7fe fe47 	bl	8003f00 <HAL_GetTick>
 8005272:	4602      	mov	r2, r0
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d302      	bcc.n	8005284 <I2C_WaitOnFlagUntilTimeout+0x30>
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d116      	bne.n	80052b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2220      	movs	r2, #32
 800528e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0220 	orr.w	r2, r3, #32
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e023      	b.n	80052fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	0c1b      	lsrs	r3, r3, #16
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d10d      	bne.n	80052d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	43da      	mvns	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4013      	ands	r3, r2
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bf0c      	ite	eq
 80052ce:	2301      	moveq	r3, #1
 80052d0:	2300      	movne	r3, #0
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	461a      	mov	r2, r3
 80052d6:	e00c      	b.n	80052f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	43da      	mvns	r2, r3
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	4013      	ands	r3, r2
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	461a      	mov	r2, r3
 80052f2:	79fb      	ldrb	r3, [r7, #7]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d0b6      	beq.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005310:	e051      	b.n	80053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d123      	bne.n	800536a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005330:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800533a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2200      	movs	r2, #0
 8005340:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2220      	movs	r2, #32
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f043 0204 	orr.w	r2, r3, #4
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e046      	b.n	80053f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d021      	beq.n	80053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fe fdc5 	bl	8003f00 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d116      	bne.n	80053b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f043 0220 	orr.w	r2, r3, #32
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e020      	b.n	80053f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	0c1b      	lsrs	r3, r3, #16
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d10c      	bne.n	80053da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	43da      	mvns	r2, r3
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	4013      	ands	r3, r2
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	bf14      	ite	ne
 80053d2:	2301      	movne	r3, #1
 80053d4:	2300      	moveq	r3, #0
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	e00b      	b.n	80053f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	43da      	mvns	r2, r3
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	4013      	ands	r3, r2
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bf14      	ite	ne
 80053ec:	2301      	movne	r3, #1
 80053ee:	2300      	moveq	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d18d      	bne.n	8005312 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800540c:	e02d      	b.n	800546a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 f8ce 	bl	80055b0 <I2C_IsAcknowledgeFailed>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e02d      	b.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005424:	d021      	beq.n	800546a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005426:	f7fe fd6b 	bl	8003f00 <HAL_GetTick>
 800542a:	4602      	mov	r2, r0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	d302      	bcc.n	800543c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d116      	bne.n	800546a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f043 0220 	orr.w	r2, r3, #32
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e007      	b.n	800547a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005474:	2b80      	cmp	r3, #128	; 0x80
 8005476:	d1ca      	bne.n	800540e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800548e:	e02d      	b.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005490:	68f8      	ldr	r0, [r7, #12]
 8005492:	f000 f88d 	bl	80055b0 <I2C_IsAcknowledgeFailed>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e02d      	b.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d021      	beq.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054a8:	f7fe fd2a 	bl	8003f00 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d302      	bcc.n	80054be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d116      	bne.n	80054ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2220      	movs	r2, #32
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e007      	b.n	80054fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d1ca      	bne.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005510:	e042      	b.n	8005598 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	f003 0310 	and.w	r3, r3, #16
 800551c:	2b10      	cmp	r3, #16
 800551e:	d119      	bne.n	8005554 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0210 	mvn.w	r2, #16
 8005528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e029      	b.n	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005554:	f7fe fcd4 	bl	8003f00 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	429a      	cmp	r2, r3
 8005562:	d302      	bcc.n	800556a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d116      	bne.n	8005598 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f043 0220 	orr.w	r2, r3, #32
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e007      	b.n	80055a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d1b5      	bne.n	8005512 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c6:	d11b      	bne.n	8005600 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80055d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	f043 0204 	orr.w	r2, r3, #4
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	e000      	b.n	8005602 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
	...

08005610 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d101      	bne.n	8005622 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e264      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d075      	beq.n	800571a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800562e:	4ba3      	ldr	r3, [pc, #652]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 030c 	and.w	r3, r3, #12
 8005636:	2b04      	cmp	r3, #4
 8005638:	d00c      	beq.n	8005654 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800563a:	4ba0      	ldr	r3, [pc, #640]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005642:	2b08      	cmp	r3, #8
 8005644:	d112      	bne.n	800566c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005646:	4b9d      	ldr	r3, [pc, #628]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800564e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005652:	d10b      	bne.n	800566c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005654:	4b99      	ldr	r3, [pc, #612]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d05b      	beq.n	8005718 <HAL_RCC_OscConfig+0x108>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d157      	bne.n	8005718 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e23f      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005674:	d106      	bne.n	8005684 <HAL_RCC_OscConfig+0x74>
 8005676:	4b91      	ldr	r3, [pc, #580]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a90      	ldr	r2, [pc, #576]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 800567c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	e01d      	b.n	80056c0 <HAL_RCC_OscConfig+0xb0>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800568c:	d10c      	bne.n	80056a8 <HAL_RCC_OscConfig+0x98>
 800568e:	4b8b      	ldr	r3, [pc, #556]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a8a      	ldr	r2, [pc, #552]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005694:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005698:	6013      	str	r3, [r2, #0]
 800569a:	4b88      	ldr	r3, [pc, #544]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a87      	ldr	r2, [pc, #540]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80056a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056a4:	6013      	str	r3, [r2, #0]
 80056a6:	e00b      	b.n	80056c0 <HAL_RCC_OscConfig+0xb0>
 80056a8:	4b84      	ldr	r3, [pc, #528]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a83      	ldr	r2, [pc, #524]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80056ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056b2:	6013      	str	r3, [r2, #0]
 80056b4:	4b81      	ldr	r3, [pc, #516]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a80      	ldr	r2, [pc, #512]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80056ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d013      	beq.n	80056f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056c8:	f7fe fc1a 	bl	8003f00 <HAL_GetTick>
 80056cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056d0:	f7fe fc16 	bl	8003f00 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b64      	cmp	r3, #100	; 0x64
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e204      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e2:	4b76      	ldr	r3, [pc, #472]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f0      	beq.n	80056d0 <HAL_RCC_OscConfig+0xc0>
 80056ee:	e014      	b.n	800571a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056f0:	f7fe fc06 	bl	8003f00 <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056f8:	f7fe fc02 	bl	8003f00 <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b64      	cmp	r3, #100	; 0x64
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e1f0      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800570a:	4b6c      	ldr	r3, [pc, #432]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0xe8>
 8005716:	e000      	b.n	800571a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005718:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d063      	beq.n	80057ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005726:	4b65      	ldr	r3, [pc, #404]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 030c 	and.w	r3, r3, #12
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005732:	4b62      	ldr	r3, [pc, #392]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800573a:	2b08      	cmp	r3, #8
 800573c:	d11c      	bne.n	8005778 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800573e:	4b5f      	ldr	r3, [pc, #380]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d116      	bne.n	8005778 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800574a:	4b5c      	ldr	r3, [pc, #368]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_RCC_OscConfig+0x152>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d001      	beq.n	8005762 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e1c4      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005762:	4b56      	ldr	r3, [pc, #344]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4952      	ldr	r1, [pc, #328]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005772:	4313      	orrs	r3, r2
 8005774:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005776:	e03a      	b.n	80057ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d020      	beq.n	80057c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005780:	4b4f      	ldr	r3, [pc, #316]	; (80058c0 <HAL_RCC_OscConfig+0x2b0>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005786:	f7fe fbbb 	bl	8003f00 <HAL_GetTick>
 800578a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800578c:	e008      	b.n	80057a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800578e:	f7fe fbb7 	bl	8003f00 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	2b02      	cmp	r3, #2
 800579a:	d901      	bls.n	80057a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e1a5      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057a0:	4b46      	ldr	r3, [pc, #280]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0f0      	beq.n	800578e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057ac:	4b43      	ldr	r3, [pc, #268]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4940      	ldr	r1, [pc, #256]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	600b      	str	r3, [r1, #0]
 80057c0:	e015      	b.n	80057ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057c2:	4b3f      	ldr	r3, [pc, #252]	; (80058c0 <HAL_RCC_OscConfig+0x2b0>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c8:	f7fe fb9a 	bl	8003f00 <HAL_GetTick>
 80057cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ce:	e008      	b.n	80057e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057d0:	f7fe fb96 	bl	8003f00 <HAL_GetTick>
 80057d4:	4602      	mov	r2, r0
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1ad3      	subs	r3, r2, r3
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d901      	bls.n	80057e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057de:	2303      	movs	r3, #3
 80057e0:	e184      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057e2:	4b36      	ldr	r3, [pc, #216]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1f0      	bne.n	80057d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d030      	beq.n	800585c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d016      	beq.n	8005830 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005802:	4b30      	ldr	r3, [pc, #192]	; (80058c4 <HAL_RCC_OscConfig+0x2b4>)
 8005804:	2201      	movs	r2, #1
 8005806:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005808:	f7fe fb7a 	bl	8003f00 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005810:	f7fe fb76 	bl	8003f00 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e164      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005822:	4b26      	ldr	r3, [pc, #152]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d0f0      	beq.n	8005810 <HAL_RCC_OscConfig+0x200>
 800582e:	e015      	b.n	800585c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005830:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <HAL_RCC_OscConfig+0x2b4>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005836:	f7fe fb63 	bl	8003f00 <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800583e:	f7fe fb5f 	bl	8003f00 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e14d      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005850:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f0      	bne.n	800583e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	f000 80a0 	beq.w	80059aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800586a:	2300      	movs	r3, #0
 800586c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800586e:	4b13      	ldr	r3, [pc, #76]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10f      	bne.n	800589a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800587a:	2300      	movs	r3, #0
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005882:	4a0e      	ldr	r2, [pc, #56]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 8005884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005888:	6413      	str	r3, [r2, #64]	; 0x40
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <HAL_RCC_OscConfig+0x2ac>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005896:	2301      	movs	r3, #1
 8005898:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800589a:	4b0b      	ldr	r3, [pc, #44]	; (80058c8 <HAL_RCC_OscConfig+0x2b8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d121      	bne.n	80058ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <HAL_RCC_OscConfig+0x2b8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a07      	ldr	r2, [pc, #28]	; (80058c8 <HAL_RCC_OscConfig+0x2b8>)
 80058ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80058b2:	f7fe fb25 	bl	8003f00 <HAL_GetTick>
 80058b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b8:	e011      	b.n	80058de <HAL_RCC_OscConfig+0x2ce>
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800
 80058c0:	42470000 	.word	0x42470000
 80058c4:	42470e80 	.word	0x42470e80
 80058c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058cc:	f7fe fb18 	bl	8003f00 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e106      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058de:	4b85      	ldr	r3, [pc, #532]	; (8005af4 <HAL_RCC_OscConfig+0x4e4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d106      	bne.n	8005900 <HAL_RCC_OscConfig+0x2f0>
 80058f2:	4b81      	ldr	r3, [pc, #516]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f6:	4a80      	ldr	r2, [pc, #512]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 80058f8:	f043 0301 	orr.w	r3, r3, #1
 80058fc:	6713      	str	r3, [r2, #112]	; 0x70
 80058fe:	e01c      	b.n	800593a <HAL_RCC_OscConfig+0x32a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b05      	cmp	r3, #5
 8005906:	d10c      	bne.n	8005922 <HAL_RCC_OscConfig+0x312>
 8005908:	4b7b      	ldr	r3, [pc, #492]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590c:	4a7a      	ldr	r2, [pc, #488]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 800590e:	f043 0304 	orr.w	r3, r3, #4
 8005912:	6713      	str	r3, [r2, #112]	; 0x70
 8005914:	4b78      	ldr	r3, [pc, #480]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005918:	4a77      	ldr	r2, [pc, #476]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	6713      	str	r3, [r2, #112]	; 0x70
 8005920:	e00b      	b.n	800593a <HAL_RCC_OscConfig+0x32a>
 8005922:	4b75      	ldr	r3, [pc, #468]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005926:	4a74      	ldr	r2, [pc, #464]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	6713      	str	r3, [r2, #112]	; 0x70
 800592e:	4b72      	ldr	r3, [pc, #456]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005932:	4a71      	ldr	r2, [pc, #452]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005934:	f023 0304 	bic.w	r3, r3, #4
 8005938:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d015      	beq.n	800596e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005942:	f7fe fadd 	bl	8003f00 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005948:	e00a      	b.n	8005960 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fe fad9 	bl	8003f00 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f241 3288 	movw	r2, #5000	; 0x1388
 8005958:	4293      	cmp	r3, r2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e0c5      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005960:	4b65      	ldr	r3, [pc, #404]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0ee      	beq.n	800594a <HAL_RCC_OscConfig+0x33a>
 800596c:	e014      	b.n	8005998 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800596e:	f7fe fac7 	bl	8003f00 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005974:	e00a      	b.n	800598c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005976:	f7fe fac3 	bl	8003f00 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f241 3288 	movw	r2, #5000	; 0x1388
 8005984:	4293      	cmp	r3, r2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e0af      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800598c:	4b5a      	ldr	r3, [pc, #360]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 800598e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005990:	f003 0302 	and.w	r3, r3, #2
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ee      	bne.n	8005976 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005998:	7dfb      	ldrb	r3, [r7, #23]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d105      	bne.n	80059aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800599e:	4b56      	ldr	r3, [pc, #344]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 80059a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a2:	4a55      	ldr	r2, [pc, #340]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 80059a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 809b 	beq.w	8005aea <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059b4:	4b50      	ldr	r3, [pc, #320]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 030c 	and.w	r3, r3, #12
 80059bc:	2b08      	cmp	r3, #8
 80059be:	d05c      	beq.n	8005a7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d141      	bne.n	8005a4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059c8:	4b4c      	ldr	r3, [pc, #304]	; (8005afc <HAL_RCC_OscConfig+0x4ec>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ce:	f7fe fa97 	bl	8003f00 <HAL_GetTick>
 80059d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059d4:	e008      	b.n	80059e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059d6:	f7fe fa93 	bl	8003f00 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d901      	bls.n	80059e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e081      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059e8:	4b43      	ldr	r3, [pc, #268]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1f0      	bne.n	80059d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69da      	ldr	r2, [r3, #28]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	019b      	lsls	r3, r3, #6
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	041b      	lsls	r3, r3, #16
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	061b      	lsls	r3, r3, #24
 8005a18:	4937      	ldr	r1, [pc, #220]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a1e:	4b37      	ldr	r3, [pc, #220]	; (8005afc <HAL_RCC_OscConfig+0x4ec>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a24:	f7fe fa6c 	bl	8003f00 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a2c:	f7fe fa68 	bl	8003f00 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e056      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x41c>
 8005a4a:	e04e      	b.n	8005aea <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a4c:	4b2b      	ldr	r3, [pc, #172]	; (8005afc <HAL_RCC_OscConfig+0x4ec>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a52:	f7fe fa55 	bl	8003f00 <HAL_GetTick>
 8005a56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a58:	e008      	b.n	8005a6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a5a:	f7fe fa51 	bl	8003f00 <HAL_GetTick>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d901      	bls.n	8005a6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	e03f      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a6c:	4b22      	ldr	r3, [pc, #136]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f0      	bne.n	8005a5a <HAL_RCC_OscConfig+0x44a>
 8005a78:	e037      	b.n	8005aea <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e032      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a86:	4b1c      	ldr	r3, [pc, #112]	; (8005af8 <HAL_RCC_OscConfig+0x4e8>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	699b      	ldr	r3, [r3, #24]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d028      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d121      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d11a      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005abc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d111      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005acc:	085b      	lsrs	r3, r3, #1
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d107      	bne.n	8005ae6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d001      	beq.n	8005aea <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40007000 	.word	0x40007000
 8005af8:	40023800 	.word	0x40023800
 8005afc:	42470060 	.word	0x42470060

08005b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d101      	bne.n	8005b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e0cc      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b14:	4b68      	ldr	r3, [pc, #416]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d90c      	bls.n	8005b3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b22:	4b65      	ldr	r3, [pc, #404]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2a:	4b63      	ldr	r3, [pc, #396]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d001      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e0b8      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d020      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b54:	4b59      	ldr	r3, [pc, #356]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	4a58      	ldr	r2, [pc, #352]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005b5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b6c:	4b53      	ldr	r3, [pc, #332]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	4a52      	ldr	r2, [pc, #328]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b78:	4b50      	ldr	r3, [pc, #320]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	494d      	ldr	r1, [pc, #308]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005b86:	4313      	orrs	r3, r2
 8005b88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d044      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9e:	4b47      	ldr	r3, [pc, #284]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d119      	bne.n	8005bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e07f      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d107      	bne.n	8005bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bbe:	4b3f      	ldr	r3, [pc, #252]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d109      	bne.n	8005bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e06f      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bce:	4b3b      	ldr	r3, [pc, #236]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e067      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bde:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f023 0203 	bic.w	r2, r3, #3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	4934      	ldr	r1, [pc, #208]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005bec:	4313      	orrs	r3, r2
 8005bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bf0:	f7fe f986 	bl	8003f00 <HAL_GetTick>
 8005bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bf6:	e00a      	b.n	8005c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bf8:	f7fe f982 	bl	8003f00 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e04f      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c0e:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f003 020c 	and.w	r2, r3, #12
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d1eb      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005c20:	4b25      	ldr	r3, [pc, #148]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	683a      	ldr	r2, [r7, #0]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d20c      	bcs.n	8005c48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2e:	4b22      	ldr	r3, [pc, #136]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c36:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d001      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e032      	b.n	8005cae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c54:	4b19      	ldr	r3, [pc, #100]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4916      	ldr	r1, [pc, #88]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c72:	4b12      	ldr	r3, [pc, #72]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	490e      	ldr	r1, [pc, #56]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c86:	f000 f821 	bl	8005ccc <HAL_RCC_GetSysClockFreq>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	4b0b      	ldr	r3, [pc, #44]	; (8005cbc <HAL_RCC_ClockConfig+0x1bc>)
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	490a      	ldr	r1, [pc, #40]	; (8005cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c98:	5ccb      	ldrb	r3, [r1, r3]
 8005c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9e:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ca2:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fe f8e6 	bl	8003e78 <HAL_InitTick>

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023c00 	.word	0x40023c00
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	0800aeb0 	.word	0x0800aeb0
 8005cc4:	20000014 	.word	0x20000014
 8005cc8:	20000018 	.word	0x20000018

08005ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ccc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	607b      	str	r3, [r7, #4]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	2300      	movs	r3, #0
 8005cde:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ce4:	4b67      	ldr	r3, [pc, #412]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	f003 030c 	and.w	r3, r3, #12
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d00d      	beq.n	8005d0c <HAL_RCC_GetSysClockFreq+0x40>
 8005cf0:	2b08      	cmp	r3, #8
 8005cf2:	f200 80bd 	bhi.w	8005e70 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <HAL_RCC_GetSysClockFreq+0x34>
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d003      	beq.n	8005d06 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cfe:	e0b7      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d00:	4b61      	ldr	r3, [pc, #388]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d02:	60bb      	str	r3, [r7, #8]
       break;
 8005d04:	e0b7      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d06:	4b61      	ldr	r3, [pc, #388]	; (8005e8c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005d08:	60bb      	str	r3, [r7, #8]
      break;
 8005d0a:	e0b4      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d0c:	4b5d      	ldr	r3, [pc, #372]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d14:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d16:	4b5b      	ldr	r3, [pc, #364]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d04d      	beq.n	8005dbe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d22:	4b58      	ldr	r3, [pc, #352]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	099b      	lsrs	r3, r3, #6
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005d32:	f04f 0100 	mov.w	r1, #0
 8005d36:	ea02 0800 	and.w	r8, r2, r0
 8005d3a:	ea03 0901 	and.w	r9, r3, r1
 8005d3e:	4640      	mov	r0, r8
 8005d40:	4649      	mov	r1, r9
 8005d42:	f04f 0200 	mov.w	r2, #0
 8005d46:	f04f 0300 	mov.w	r3, #0
 8005d4a:	014b      	lsls	r3, r1, #5
 8005d4c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d50:	0142      	lsls	r2, r0, #5
 8005d52:	4610      	mov	r0, r2
 8005d54:	4619      	mov	r1, r3
 8005d56:	ebb0 0008 	subs.w	r0, r0, r8
 8005d5a:	eb61 0109 	sbc.w	r1, r1, r9
 8005d5e:	f04f 0200 	mov.w	r2, #0
 8005d62:	f04f 0300 	mov.w	r3, #0
 8005d66:	018b      	lsls	r3, r1, #6
 8005d68:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d6c:	0182      	lsls	r2, r0, #6
 8005d6e:	1a12      	subs	r2, r2, r0
 8005d70:	eb63 0301 	sbc.w	r3, r3, r1
 8005d74:	f04f 0000 	mov.w	r0, #0
 8005d78:	f04f 0100 	mov.w	r1, #0
 8005d7c:	00d9      	lsls	r1, r3, #3
 8005d7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d82:	00d0      	lsls	r0, r2, #3
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	eb12 0208 	adds.w	r2, r2, r8
 8005d8c:	eb43 0309 	adc.w	r3, r3, r9
 8005d90:	f04f 0000 	mov.w	r0, #0
 8005d94:	f04f 0100 	mov.w	r1, #0
 8005d98:	0259      	lsls	r1, r3, #9
 8005d9a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005d9e:	0250      	lsls	r0, r2, #9
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4610      	mov	r0, r2
 8005da6:	4619      	mov	r1, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f04f 0300 	mov.w	r3, #0
 8005db0:	f7fa ff72 	bl	8000c98 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4613      	mov	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e04a      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dbe:	4b31      	ldr	r3, [pc, #196]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	099b      	lsrs	r3, r3, #6
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005dce:	f04f 0100 	mov.w	r1, #0
 8005dd2:	ea02 0400 	and.w	r4, r2, r0
 8005dd6:	ea03 0501 	and.w	r5, r3, r1
 8005dda:	4620      	mov	r0, r4
 8005ddc:	4629      	mov	r1, r5
 8005dde:	f04f 0200 	mov.w	r2, #0
 8005de2:	f04f 0300 	mov.w	r3, #0
 8005de6:	014b      	lsls	r3, r1, #5
 8005de8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005dec:	0142      	lsls	r2, r0, #5
 8005dee:	4610      	mov	r0, r2
 8005df0:	4619      	mov	r1, r3
 8005df2:	1b00      	subs	r0, r0, r4
 8005df4:	eb61 0105 	sbc.w	r1, r1, r5
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	018b      	lsls	r3, r1, #6
 8005e02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005e06:	0182      	lsls	r2, r0, #6
 8005e08:	1a12      	subs	r2, r2, r0
 8005e0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005e0e:	f04f 0000 	mov.w	r0, #0
 8005e12:	f04f 0100 	mov.w	r1, #0
 8005e16:	00d9      	lsls	r1, r3, #3
 8005e18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e1c:	00d0      	lsls	r0, r2, #3
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	1912      	adds	r2, r2, r4
 8005e24:	eb45 0303 	adc.w	r3, r5, r3
 8005e28:	f04f 0000 	mov.w	r0, #0
 8005e2c:	f04f 0100 	mov.w	r1, #0
 8005e30:	0299      	lsls	r1, r3, #10
 8005e32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005e36:	0290      	lsls	r0, r2, #10
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	4619      	mov	r1, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	f7fa ff26 	bl	8000c98 <__aeabi_uldivmod>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4613      	mov	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	0c1b      	lsrs	r3, r3, #16
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	3301      	adds	r3, #1
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	60bb      	str	r3, [r7, #8]
      break;
 8005e6e:	e002      	b.n	8005e76 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005e72:	60bb      	str	r3, [r7, #8]
      break;
 8005e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e76:	68bb      	ldr	r3, [r7, #8]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005e82:	bf00      	nop
 8005e84:	40023800 	.word	0x40023800
 8005e88:	00f42400 	.word	0x00f42400
 8005e8c:	007a1200 	.word	0x007a1200

08005e90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e94:	4b03      	ldr	r3, [pc, #12]	; (8005ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e96:	681b      	ldr	r3, [r3, #0]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	20000014 	.word	0x20000014

08005ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005eac:	f7ff fff0 	bl	8005e90 <HAL_RCC_GetHCLKFreq>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	4b05      	ldr	r3, [pc, #20]	; (8005ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	0a9b      	lsrs	r3, r3, #10
 8005eb8:	f003 0307 	and.w	r3, r3, #7
 8005ebc:	4903      	ldr	r1, [pc, #12]	; (8005ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ebe:	5ccb      	ldrb	r3, [r1, r3]
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40023800 	.word	0x40023800
 8005ecc:	0800aec0 	.word	0x0800aec0

08005ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ed4:	f7ff ffdc 	bl	8005e90 <HAL_RCC_GetHCLKFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b05      	ldr	r3, [pc, #20]	; (8005ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	0b5b      	lsrs	r3, r3, #13
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	4903      	ldr	r1, [pc, #12]	; (8005ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	0800aec0 	.word	0x0800aec0

08005ef8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e03f      	b.n	8005f8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fd fe14 	bl	8003b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2224      	movs	r2, #36	; 0x24
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68da      	ldr	r2, [r3, #12]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f905 	bl	800614c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	695a      	ldr	r2, [r3, #20]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2220      	movs	r2, #32
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3708      	adds	r7, #8
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}

08005f92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b08a      	sub	sp, #40	; 0x28
 8005f96:	af02      	add	r7, sp, #8
 8005f98:	60f8      	str	r0, [r7, #12]
 8005f9a:	60b9      	str	r1, [r7, #8]
 8005f9c:	603b      	str	r3, [r7, #0]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d17c      	bne.n	80060ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <HAL_UART_Transmit+0x2c>
 8005fb8:	88fb      	ldrh	r3, [r7, #6]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e075      	b.n	80060ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d101      	bne.n	8005fd0 <HAL_UART_Transmit+0x3e>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e06e      	b.n	80060ae <HAL_UART_Transmit+0x11c>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2221      	movs	r2, #33	; 0x21
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fe6:	f7fd ff8b 	bl	8003f00 <HAL_GetTick>
 8005fea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	88fa      	ldrh	r2, [r7, #6]
 8005ff0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006000:	d108      	bne.n	8006014 <HAL_UART_Transmit+0x82>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d104      	bne.n	8006014 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	61bb      	str	r3, [r7, #24]
 8006012:	e003      	b.n	800601c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006024:	e02a      	b.n	800607c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	2200      	movs	r2, #0
 800602e:	2180      	movs	r1, #128	; 0x80
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f840 	bl	80060b6 <UART_WaitOnFlagUntilTimeout>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d001      	beq.n	8006040 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800603c:	2303      	movs	r3, #3
 800603e:	e036      	b.n	80060ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10b      	bne.n	800605e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006054:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	3302      	adds	r3, #2
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	e007      	b.n	800606e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	781a      	ldrb	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	3301      	adds	r3, #1
 800606c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1cf      	bne.n	8006026 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2200      	movs	r2, #0
 800608e:	2140      	movs	r1, #64	; 0x40
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 f810 	bl	80060b6 <UART_WaitOnFlagUntilTimeout>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e006      	b.n	80060ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	e000      	b.n	80060ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
  }
}
 80060ae:	4618      	mov	r0, r3
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b084      	sub	sp, #16
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	60f8      	str	r0, [r7, #12]
 80060be:	60b9      	str	r1, [r7, #8]
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	4613      	mov	r3, r2
 80060c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060c6:	e02c      	b.n	8006122 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ce:	d028      	beq.n	8006122 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d007      	beq.n	80060e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80060d6:	f7fd ff13 	bl	8003f00 <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d21d      	bcs.n	8006122 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060f4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0201 	bic.w	r2, r2, #1
 8006104:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2220      	movs	r2, #32
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e00f      	b.n	8006142 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	4013      	ands	r3, r2
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	bf0c      	ite	eq
 8006132:	2301      	moveq	r3, #1
 8006134:	2300      	movne	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	79fb      	ldrb	r3, [r7, #7]
 800613c:	429a      	cmp	r2, r3
 800613e:	d0c3      	beq.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
	...

0800614c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006150:	b09f      	sub	sp, #124	; 0x7c
 8006152:	af00      	add	r7, sp, #0
 8006154:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006162:	68d9      	ldr	r1, [r3, #12]
 8006164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	ea40 0301 	orr.w	r3, r0, r1
 800616c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800616e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	431a      	orrs	r2, r3
 8006178:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800617a:	695b      	ldr	r3, [r3, #20]
 800617c:	431a      	orrs	r2, r3
 800617e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	4313      	orrs	r3, r2
 8006184:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006190:	f021 010c 	bic.w	r1, r1, #12
 8006194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800619a:	430b      	orrs	r3, r1
 800619c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800619e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80061a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061aa:	6999      	ldr	r1, [r3, #24]
 80061ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	ea40 0301 	orr.w	r3, r0, r1
 80061b4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80061b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	4bc5      	ldr	r3, [pc, #788]	; (80064d0 <UART_SetConfig+0x384>)
 80061bc:	429a      	cmp	r2, r3
 80061be:	d004      	beq.n	80061ca <UART_SetConfig+0x7e>
 80061c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4bc3      	ldr	r3, [pc, #780]	; (80064d4 <UART_SetConfig+0x388>)
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d103      	bne.n	80061d2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80061ca:	f7ff fe81 	bl	8005ed0 <HAL_RCC_GetPCLK2Freq>
 80061ce:	6778      	str	r0, [r7, #116]	; 0x74
 80061d0:	e002      	b.n	80061d8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061d2:	f7ff fe69 	bl	8005ea8 <HAL_RCC_GetPCLK1Freq>
 80061d6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061e0:	f040 80b6 	bne.w	8006350 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e6:	461c      	mov	r4, r3
 80061e8:	f04f 0500 	mov.w	r5, #0
 80061ec:	4622      	mov	r2, r4
 80061ee:	462b      	mov	r3, r5
 80061f0:	1891      	adds	r1, r2, r2
 80061f2:	6439      	str	r1, [r7, #64]	; 0x40
 80061f4:	415b      	adcs	r3, r3
 80061f6:	647b      	str	r3, [r7, #68]	; 0x44
 80061f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80061fc:	1912      	adds	r2, r2, r4
 80061fe:	eb45 0303 	adc.w	r3, r5, r3
 8006202:	f04f 0000 	mov.w	r0, #0
 8006206:	f04f 0100 	mov.w	r1, #0
 800620a:	00d9      	lsls	r1, r3, #3
 800620c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006210:	00d0      	lsls	r0, r2, #3
 8006212:	4602      	mov	r2, r0
 8006214:	460b      	mov	r3, r1
 8006216:	1911      	adds	r1, r2, r4
 8006218:	6639      	str	r1, [r7, #96]	; 0x60
 800621a:	416b      	adcs	r3, r5
 800621c:	667b      	str	r3, [r7, #100]	; 0x64
 800621e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	461a      	mov	r2, r3
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	1891      	adds	r1, r2, r2
 800622a:	63b9      	str	r1, [r7, #56]	; 0x38
 800622c:	415b      	adcs	r3, r3
 800622e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006234:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006238:	f7fa fd2e 	bl	8000c98 <__aeabi_uldivmod>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4ba5      	ldr	r3, [pc, #660]	; (80064d8 <UART_SetConfig+0x38c>)
 8006242:	fba3 2302 	umull	r2, r3, r3, r2
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	011e      	lsls	r6, r3, #4
 800624a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800624c:	461c      	mov	r4, r3
 800624e:	f04f 0500 	mov.w	r5, #0
 8006252:	4622      	mov	r2, r4
 8006254:	462b      	mov	r3, r5
 8006256:	1891      	adds	r1, r2, r2
 8006258:	6339      	str	r1, [r7, #48]	; 0x30
 800625a:	415b      	adcs	r3, r3
 800625c:	637b      	str	r3, [r7, #52]	; 0x34
 800625e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006262:	1912      	adds	r2, r2, r4
 8006264:	eb45 0303 	adc.w	r3, r5, r3
 8006268:	f04f 0000 	mov.w	r0, #0
 800626c:	f04f 0100 	mov.w	r1, #0
 8006270:	00d9      	lsls	r1, r3, #3
 8006272:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006276:	00d0      	lsls	r0, r2, #3
 8006278:	4602      	mov	r2, r0
 800627a:	460b      	mov	r3, r1
 800627c:	1911      	adds	r1, r2, r4
 800627e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006280:	416b      	adcs	r3, r5
 8006282:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	461a      	mov	r2, r3
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	1891      	adds	r1, r2, r2
 8006290:	62b9      	str	r1, [r7, #40]	; 0x28
 8006292:	415b      	adcs	r3, r3
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800629a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800629e:	f7fa fcfb 	bl	8000c98 <__aeabi_uldivmod>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4b8c      	ldr	r3, [pc, #560]	; (80064d8 <UART_SetConfig+0x38c>)
 80062a8:	fba3 1302 	umull	r1, r3, r3, r2
 80062ac:	095b      	lsrs	r3, r3, #5
 80062ae:	2164      	movs	r1, #100	; 0x64
 80062b0:	fb01 f303 	mul.w	r3, r1, r3
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	3332      	adds	r3, #50	; 0x32
 80062ba:	4a87      	ldr	r2, [pc, #540]	; (80064d8 <UART_SetConfig+0x38c>)
 80062bc:	fba2 2303 	umull	r2, r3, r2, r3
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062c8:	441e      	add	r6, r3
 80062ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062cc:	4618      	mov	r0, r3
 80062ce:	f04f 0100 	mov.w	r1, #0
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	1894      	adds	r4, r2, r2
 80062d8:	623c      	str	r4, [r7, #32]
 80062da:	415b      	adcs	r3, r3
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
 80062de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062e2:	1812      	adds	r2, r2, r0
 80062e4:	eb41 0303 	adc.w	r3, r1, r3
 80062e8:	f04f 0400 	mov.w	r4, #0
 80062ec:	f04f 0500 	mov.w	r5, #0
 80062f0:	00dd      	lsls	r5, r3, #3
 80062f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80062f6:	00d4      	lsls	r4, r2, #3
 80062f8:	4622      	mov	r2, r4
 80062fa:	462b      	mov	r3, r5
 80062fc:	1814      	adds	r4, r2, r0
 80062fe:	653c      	str	r4, [r7, #80]	; 0x50
 8006300:	414b      	adcs	r3, r1
 8006302:	657b      	str	r3, [r7, #84]	; 0x54
 8006304:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	461a      	mov	r2, r3
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	1891      	adds	r1, r2, r2
 8006310:	61b9      	str	r1, [r7, #24]
 8006312:	415b      	adcs	r3, r3
 8006314:	61fb      	str	r3, [r7, #28]
 8006316:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800631a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800631e:	f7fa fcbb 	bl	8000c98 <__aeabi_uldivmod>
 8006322:	4602      	mov	r2, r0
 8006324:	460b      	mov	r3, r1
 8006326:	4b6c      	ldr	r3, [pc, #432]	; (80064d8 <UART_SetConfig+0x38c>)
 8006328:	fba3 1302 	umull	r1, r3, r3, r2
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	2164      	movs	r1, #100	; 0x64
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	3332      	adds	r3, #50	; 0x32
 800633a:	4a67      	ldr	r2, [pc, #412]	; (80064d8 <UART_SetConfig+0x38c>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	f003 0207 	and.w	r2, r3, #7
 8006346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4432      	add	r2, r6
 800634c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800634e:	e0b9      	b.n	80064c4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006352:	461c      	mov	r4, r3
 8006354:	f04f 0500 	mov.w	r5, #0
 8006358:	4622      	mov	r2, r4
 800635a:	462b      	mov	r3, r5
 800635c:	1891      	adds	r1, r2, r2
 800635e:	6139      	str	r1, [r7, #16]
 8006360:	415b      	adcs	r3, r3
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006368:	1912      	adds	r2, r2, r4
 800636a:	eb45 0303 	adc.w	r3, r5, r3
 800636e:	f04f 0000 	mov.w	r0, #0
 8006372:	f04f 0100 	mov.w	r1, #0
 8006376:	00d9      	lsls	r1, r3, #3
 8006378:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800637c:	00d0      	lsls	r0, r2, #3
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	eb12 0804 	adds.w	r8, r2, r4
 8006386:	eb43 0905 	adc.w	r9, r3, r5
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	4618      	mov	r0, r3
 8006390:	f04f 0100 	mov.w	r1, #0
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	008b      	lsls	r3, r1, #2
 800639e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063a2:	0082      	lsls	r2, r0, #2
 80063a4:	4640      	mov	r0, r8
 80063a6:	4649      	mov	r1, r9
 80063a8:	f7fa fc76 	bl	8000c98 <__aeabi_uldivmod>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4b49      	ldr	r3, [pc, #292]	; (80064d8 <UART_SetConfig+0x38c>)
 80063b2:	fba3 2302 	umull	r2, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	011e      	lsls	r6, r3, #4
 80063ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063bc:	4618      	mov	r0, r3
 80063be:	f04f 0100 	mov.w	r1, #0
 80063c2:	4602      	mov	r2, r0
 80063c4:	460b      	mov	r3, r1
 80063c6:	1894      	adds	r4, r2, r2
 80063c8:	60bc      	str	r4, [r7, #8]
 80063ca:	415b      	adcs	r3, r3
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063d2:	1812      	adds	r2, r2, r0
 80063d4:	eb41 0303 	adc.w	r3, r1, r3
 80063d8:	f04f 0400 	mov.w	r4, #0
 80063dc:	f04f 0500 	mov.w	r5, #0
 80063e0:	00dd      	lsls	r5, r3, #3
 80063e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80063e6:	00d4      	lsls	r4, r2, #3
 80063e8:	4622      	mov	r2, r4
 80063ea:	462b      	mov	r3, r5
 80063ec:	1814      	adds	r4, r2, r0
 80063ee:	64bc      	str	r4, [r7, #72]	; 0x48
 80063f0:	414b      	adcs	r3, r1
 80063f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f04f 0100 	mov.w	r1, #0
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	008b      	lsls	r3, r1, #2
 8006408:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800640c:	0082      	lsls	r2, r0, #2
 800640e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006412:	f7fa fc41 	bl	8000c98 <__aeabi_uldivmod>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4b2f      	ldr	r3, [pc, #188]	; (80064d8 <UART_SetConfig+0x38c>)
 800641c:	fba3 1302 	umull	r1, r3, r3, r2
 8006420:	095b      	lsrs	r3, r3, #5
 8006422:	2164      	movs	r1, #100	; 0x64
 8006424:	fb01 f303 	mul.w	r3, r1, r3
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	011b      	lsls	r3, r3, #4
 800642c:	3332      	adds	r3, #50	; 0x32
 800642e:	4a2a      	ldr	r2, [pc, #168]	; (80064d8 <UART_SetConfig+0x38c>)
 8006430:	fba2 2303 	umull	r2, r3, r2, r3
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800643a:	441e      	add	r6, r3
 800643c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800643e:	4618      	mov	r0, r3
 8006440:	f04f 0100 	mov.w	r1, #0
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	1894      	adds	r4, r2, r2
 800644a:	603c      	str	r4, [r7, #0]
 800644c:	415b      	adcs	r3, r3
 800644e:	607b      	str	r3, [r7, #4]
 8006450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006454:	1812      	adds	r2, r2, r0
 8006456:	eb41 0303 	adc.w	r3, r1, r3
 800645a:	f04f 0400 	mov.w	r4, #0
 800645e:	f04f 0500 	mov.w	r5, #0
 8006462:	00dd      	lsls	r5, r3, #3
 8006464:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006468:	00d4      	lsls	r4, r2, #3
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	eb12 0a00 	adds.w	sl, r2, r0
 8006472:	eb43 0b01 	adc.w	fp, r3, r1
 8006476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	f04f 0100 	mov.w	r1, #0
 8006480:	f04f 0200 	mov.w	r2, #0
 8006484:	f04f 0300 	mov.w	r3, #0
 8006488:	008b      	lsls	r3, r1, #2
 800648a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800648e:	0082      	lsls	r2, r0, #2
 8006490:	4650      	mov	r0, sl
 8006492:	4659      	mov	r1, fp
 8006494:	f7fa fc00 	bl	8000c98 <__aeabi_uldivmod>
 8006498:	4602      	mov	r2, r0
 800649a:	460b      	mov	r3, r1
 800649c:	4b0e      	ldr	r3, [pc, #56]	; (80064d8 <UART_SetConfig+0x38c>)
 800649e:	fba3 1302 	umull	r1, r3, r3, r2
 80064a2:	095b      	lsrs	r3, r3, #5
 80064a4:	2164      	movs	r1, #100	; 0x64
 80064a6:	fb01 f303 	mul.w	r3, r1, r3
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	3332      	adds	r3, #50	; 0x32
 80064b0:	4a09      	ldr	r2, [pc, #36]	; (80064d8 <UART_SetConfig+0x38c>)
 80064b2:	fba2 2303 	umull	r2, r3, r2, r3
 80064b6:	095b      	lsrs	r3, r3, #5
 80064b8:	f003 020f 	and.w	r2, r3, #15
 80064bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4432      	add	r2, r6
 80064c2:	609a      	str	r2, [r3, #8]
}
 80064c4:	bf00      	nop
 80064c6:	377c      	adds	r7, #124	; 0x7c
 80064c8:	46bd      	mov	sp, r7
 80064ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064ce:	bf00      	nop
 80064d0:	40011000 	.word	0x40011000
 80064d4:	40011400 	.word	0x40011400
 80064d8:	51eb851f 	.word	0x51eb851f

080064dc <__errno>:
 80064dc:	4b01      	ldr	r3, [pc, #4]	; (80064e4 <__errno+0x8>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	20000020 	.word	0x20000020

080064e8 <__libc_init_array>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	4d0d      	ldr	r5, [pc, #52]	; (8006520 <__libc_init_array+0x38>)
 80064ec:	4c0d      	ldr	r4, [pc, #52]	; (8006524 <__libc_init_array+0x3c>)
 80064ee:	1b64      	subs	r4, r4, r5
 80064f0:	10a4      	asrs	r4, r4, #2
 80064f2:	2600      	movs	r6, #0
 80064f4:	42a6      	cmp	r6, r4
 80064f6:	d109      	bne.n	800650c <__libc_init_array+0x24>
 80064f8:	4d0b      	ldr	r5, [pc, #44]	; (8006528 <__libc_init_array+0x40>)
 80064fa:	4c0c      	ldr	r4, [pc, #48]	; (800652c <__libc_init_array+0x44>)
 80064fc:	f004 fc48 	bl	800ad90 <_init>
 8006500:	1b64      	subs	r4, r4, r5
 8006502:	10a4      	asrs	r4, r4, #2
 8006504:	2600      	movs	r6, #0
 8006506:	42a6      	cmp	r6, r4
 8006508:	d105      	bne.n	8006516 <__libc_init_array+0x2e>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006510:	4798      	blx	r3
 8006512:	3601      	adds	r6, #1
 8006514:	e7ee      	b.n	80064f4 <__libc_init_array+0xc>
 8006516:	f855 3b04 	ldr.w	r3, [r5], #4
 800651a:	4798      	blx	r3
 800651c:	3601      	adds	r6, #1
 800651e:	e7f2      	b.n	8006506 <__libc_init_array+0x1e>
 8006520:	0800b384 	.word	0x0800b384
 8006524:	0800b384 	.word	0x0800b384
 8006528:	0800b384 	.word	0x0800b384
 800652c:	0800b388 	.word	0x0800b388

08006530 <memcpy>:
 8006530:	440a      	add	r2, r1
 8006532:	4291      	cmp	r1, r2
 8006534:	f100 33ff 	add.w	r3, r0, #4294967295
 8006538:	d100      	bne.n	800653c <memcpy+0xc>
 800653a:	4770      	bx	lr
 800653c:	b510      	push	{r4, lr}
 800653e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006546:	4291      	cmp	r1, r2
 8006548:	d1f9      	bne.n	800653e <memcpy+0xe>
 800654a:	bd10      	pop	{r4, pc}

0800654c <memset>:
 800654c:	4402      	add	r2, r0
 800654e:	4603      	mov	r3, r0
 8006550:	4293      	cmp	r3, r2
 8006552:	d100      	bne.n	8006556 <memset+0xa>
 8006554:	4770      	bx	lr
 8006556:	f803 1b01 	strb.w	r1, [r3], #1
 800655a:	e7f9      	b.n	8006550 <memset+0x4>

0800655c <__cvt>:
 800655c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006560:	ec55 4b10 	vmov	r4, r5, d0
 8006564:	2d00      	cmp	r5, #0
 8006566:	460e      	mov	r6, r1
 8006568:	4619      	mov	r1, r3
 800656a:	462b      	mov	r3, r5
 800656c:	bfbb      	ittet	lt
 800656e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006572:	461d      	movlt	r5, r3
 8006574:	2300      	movge	r3, #0
 8006576:	232d      	movlt	r3, #45	; 0x2d
 8006578:	700b      	strb	r3, [r1, #0]
 800657a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800657c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006580:	4691      	mov	r9, r2
 8006582:	f023 0820 	bic.w	r8, r3, #32
 8006586:	bfbc      	itt	lt
 8006588:	4622      	movlt	r2, r4
 800658a:	4614      	movlt	r4, r2
 800658c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006590:	d005      	beq.n	800659e <__cvt+0x42>
 8006592:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006596:	d100      	bne.n	800659a <__cvt+0x3e>
 8006598:	3601      	adds	r6, #1
 800659a:	2102      	movs	r1, #2
 800659c:	e000      	b.n	80065a0 <__cvt+0x44>
 800659e:	2103      	movs	r1, #3
 80065a0:	ab03      	add	r3, sp, #12
 80065a2:	9301      	str	r3, [sp, #4]
 80065a4:	ab02      	add	r3, sp, #8
 80065a6:	9300      	str	r3, [sp, #0]
 80065a8:	ec45 4b10 	vmov	d0, r4, r5
 80065ac:	4653      	mov	r3, sl
 80065ae:	4632      	mov	r2, r6
 80065b0:	f001 fdb6 	bl	8008120 <_dtoa_r>
 80065b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80065b8:	4607      	mov	r7, r0
 80065ba:	d102      	bne.n	80065c2 <__cvt+0x66>
 80065bc:	f019 0f01 	tst.w	r9, #1
 80065c0:	d022      	beq.n	8006608 <__cvt+0xac>
 80065c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80065c6:	eb07 0906 	add.w	r9, r7, r6
 80065ca:	d110      	bne.n	80065ee <__cvt+0x92>
 80065cc:	783b      	ldrb	r3, [r7, #0]
 80065ce:	2b30      	cmp	r3, #48	; 0x30
 80065d0:	d10a      	bne.n	80065e8 <__cvt+0x8c>
 80065d2:	2200      	movs	r2, #0
 80065d4:	2300      	movs	r3, #0
 80065d6:	4620      	mov	r0, r4
 80065d8:	4629      	mov	r1, r5
 80065da:	f7fa fa7d 	bl	8000ad8 <__aeabi_dcmpeq>
 80065de:	b918      	cbnz	r0, 80065e8 <__cvt+0x8c>
 80065e0:	f1c6 0601 	rsb	r6, r6, #1
 80065e4:	f8ca 6000 	str.w	r6, [sl]
 80065e8:	f8da 3000 	ldr.w	r3, [sl]
 80065ec:	4499      	add	r9, r3
 80065ee:	2200      	movs	r2, #0
 80065f0:	2300      	movs	r3, #0
 80065f2:	4620      	mov	r0, r4
 80065f4:	4629      	mov	r1, r5
 80065f6:	f7fa fa6f 	bl	8000ad8 <__aeabi_dcmpeq>
 80065fa:	b108      	cbz	r0, 8006600 <__cvt+0xa4>
 80065fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006600:	2230      	movs	r2, #48	; 0x30
 8006602:	9b03      	ldr	r3, [sp, #12]
 8006604:	454b      	cmp	r3, r9
 8006606:	d307      	bcc.n	8006618 <__cvt+0xbc>
 8006608:	9b03      	ldr	r3, [sp, #12]
 800660a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800660c:	1bdb      	subs	r3, r3, r7
 800660e:	4638      	mov	r0, r7
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	b004      	add	sp, #16
 8006614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006618:	1c59      	adds	r1, r3, #1
 800661a:	9103      	str	r1, [sp, #12]
 800661c:	701a      	strb	r2, [r3, #0]
 800661e:	e7f0      	b.n	8006602 <__cvt+0xa6>

08006620 <__exponent>:
 8006620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006622:	4603      	mov	r3, r0
 8006624:	2900      	cmp	r1, #0
 8006626:	bfb8      	it	lt
 8006628:	4249      	neglt	r1, r1
 800662a:	f803 2b02 	strb.w	r2, [r3], #2
 800662e:	bfb4      	ite	lt
 8006630:	222d      	movlt	r2, #45	; 0x2d
 8006632:	222b      	movge	r2, #43	; 0x2b
 8006634:	2909      	cmp	r1, #9
 8006636:	7042      	strb	r2, [r0, #1]
 8006638:	dd2a      	ble.n	8006690 <__exponent+0x70>
 800663a:	f10d 0407 	add.w	r4, sp, #7
 800663e:	46a4      	mov	ip, r4
 8006640:	270a      	movs	r7, #10
 8006642:	46a6      	mov	lr, r4
 8006644:	460a      	mov	r2, r1
 8006646:	fb91 f6f7 	sdiv	r6, r1, r7
 800664a:	fb07 1516 	mls	r5, r7, r6, r1
 800664e:	3530      	adds	r5, #48	; 0x30
 8006650:	2a63      	cmp	r2, #99	; 0x63
 8006652:	f104 34ff 	add.w	r4, r4, #4294967295
 8006656:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800665a:	4631      	mov	r1, r6
 800665c:	dcf1      	bgt.n	8006642 <__exponent+0x22>
 800665e:	3130      	adds	r1, #48	; 0x30
 8006660:	f1ae 0502 	sub.w	r5, lr, #2
 8006664:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006668:	1c44      	adds	r4, r0, #1
 800666a:	4629      	mov	r1, r5
 800666c:	4561      	cmp	r1, ip
 800666e:	d30a      	bcc.n	8006686 <__exponent+0x66>
 8006670:	f10d 0209 	add.w	r2, sp, #9
 8006674:	eba2 020e 	sub.w	r2, r2, lr
 8006678:	4565      	cmp	r5, ip
 800667a:	bf88      	it	hi
 800667c:	2200      	movhi	r2, #0
 800667e:	4413      	add	r3, r2
 8006680:	1a18      	subs	r0, r3, r0
 8006682:	b003      	add	sp, #12
 8006684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006686:	f811 2b01 	ldrb.w	r2, [r1], #1
 800668a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800668e:	e7ed      	b.n	800666c <__exponent+0x4c>
 8006690:	2330      	movs	r3, #48	; 0x30
 8006692:	3130      	adds	r1, #48	; 0x30
 8006694:	7083      	strb	r3, [r0, #2]
 8006696:	70c1      	strb	r1, [r0, #3]
 8006698:	1d03      	adds	r3, r0, #4
 800669a:	e7f1      	b.n	8006680 <__exponent+0x60>

0800669c <_printf_float>:
 800669c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	ed2d 8b02 	vpush	{d8}
 80066a4:	b08d      	sub	sp, #52	; 0x34
 80066a6:	460c      	mov	r4, r1
 80066a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80066ac:	4616      	mov	r6, r2
 80066ae:	461f      	mov	r7, r3
 80066b0:	4605      	mov	r5, r0
 80066b2:	f002 fe91 	bl	80093d8 <_localeconv_r>
 80066b6:	f8d0 a000 	ldr.w	sl, [r0]
 80066ba:	4650      	mov	r0, sl
 80066bc:	f7f9 fd90 	bl	80001e0 <strlen>
 80066c0:	2300      	movs	r3, #0
 80066c2:	930a      	str	r3, [sp, #40]	; 0x28
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	9305      	str	r3, [sp, #20]
 80066c8:	f8d8 3000 	ldr.w	r3, [r8]
 80066cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80066d0:	3307      	adds	r3, #7
 80066d2:	f023 0307 	bic.w	r3, r3, #7
 80066d6:	f103 0208 	add.w	r2, r3, #8
 80066da:	f8c8 2000 	str.w	r2, [r8]
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066e6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80066ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80066ee:	9307      	str	r3, [sp, #28]
 80066f0:	f8cd 8018 	str.w	r8, [sp, #24]
 80066f4:	ee08 0a10 	vmov	s16, r0
 80066f8:	4b9f      	ldr	r3, [pc, #636]	; (8006978 <_printf_float+0x2dc>)
 80066fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006702:	f7fa fa1b 	bl	8000b3c <__aeabi_dcmpun>
 8006706:	bb88      	cbnz	r0, 800676c <_printf_float+0xd0>
 8006708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800670c:	4b9a      	ldr	r3, [pc, #616]	; (8006978 <_printf_float+0x2dc>)
 800670e:	f04f 32ff 	mov.w	r2, #4294967295
 8006712:	f7fa f9f5 	bl	8000b00 <__aeabi_dcmple>
 8006716:	bb48      	cbnz	r0, 800676c <_printf_float+0xd0>
 8006718:	2200      	movs	r2, #0
 800671a:	2300      	movs	r3, #0
 800671c:	4640      	mov	r0, r8
 800671e:	4649      	mov	r1, r9
 8006720:	f7fa f9e4 	bl	8000aec <__aeabi_dcmplt>
 8006724:	b110      	cbz	r0, 800672c <_printf_float+0x90>
 8006726:	232d      	movs	r3, #45	; 0x2d
 8006728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800672c:	4b93      	ldr	r3, [pc, #588]	; (800697c <_printf_float+0x2e0>)
 800672e:	4894      	ldr	r0, [pc, #592]	; (8006980 <_printf_float+0x2e4>)
 8006730:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006734:	bf94      	ite	ls
 8006736:	4698      	movls	r8, r3
 8006738:	4680      	movhi	r8, r0
 800673a:	2303      	movs	r3, #3
 800673c:	6123      	str	r3, [r4, #16]
 800673e:	9b05      	ldr	r3, [sp, #20]
 8006740:	f023 0204 	bic.w	r2, r3, #4
 8006744:	6022      	str	r2, [r4, #0]
 8006746:	f04f 0900 	mov.w	r9, #0
 800674a:	9700      	str	r7, [sp, #0]
 800674c:	4633      	mov	r3, r6
 800674e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006750:	4621      	mov	r1, r4
 8006752:	4628      	mov	r0, r5
 8006754:	f000 f9d8 	bl	8006b08 <_printf_common>
 8006758:	3001      	adds	r0, #1
 800675a:	f040 8090 	bne.w	800687e <_printf_float+0x1e2>
 800675e:	f04f 30ff 	mov.w	r0, #4294967295
 8006762:	b00d      	add	sp, #52	; 0x34
 8006764:	ecbd 8b02 	vpop	{d8}
 8006768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800676c:	4642      	mov	r2, r8
 800676e:	464b      	mov	r3, r9
 8006770:	4640      	mov	r0, r8
 8006772:	4649      	mov	r1, r9
 8006774:	f7fa f9e2 	bl	8000b3c <__aeabi_dcmpun>
 8006778:	b140      	cbz	r0, 800678c <_printf_float+0xf0>
 800677a:	464b      	mov	r3, r9
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfbc      	itt	lt
 8006780:	232d      	movlt	r3, #45	; 0x2d
 8006782:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006786:	487f      	ldr	r0, [pc, #508]	; (8006984 <_printf_float+0x2e8>)
 8006788:	4b7f      	ldr	r3, [pc, #508]	; (8006988 <_printf_float+0x2ec>)
 800678a:	e7d1      	b.n	8006730 <_printf_float+0x94>
 800678c:	6863      	ldr	r3, [r4, #4]
 800678e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006792:	9206      	str	r2, [sp, #24]
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	d13f      	bne.n	8006818 <_printf_float+0x17c>
 8006798:	2306      	movs	r3, #6
 800679a:	6063      	str	r3, [r4, #4]
 800679c:	9b05      	ldr	r3, [sp, #20]
 800679e:	6861      	ldr	r1, [r4, #4]
 80067a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80067a4:	2300      	movs	r3, #0
 80067a6:	9303      	str	r3, [sp, #12]
 80067a8:	ab0a      	add	r3, sp, #40	; 0x28
 80067aa:	e9cd b301 	strd	fp, r3, [sp, #4]
 80067ae:	ab09      	add	r3, sp, #36	; 0x24
 80067b0:	ec49 8b10 	vmov	d0, r8, r9
 80067b4:	9300      	str	r3, [sp, #0]
 80067b6:	6022      	str	r2, [r4, #0]
 80067b8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80067bc:	4628      	mov	r0, r5
 80067be:	f7ff fecd 	bl	800655c <__cvt>
 80067c2:	9b06      	ldr	r3, [sp, #24]
 80067c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067c6:	2b47      	cmp	r3, #71	; 0x47
 80067c8:	4680      	mov	r8, r0
 80067ca:	d108      	bne.n	80067de <_printf_float+0x142>
 80067cc:	1cc8      	adds	r0, r1, #3
 80067ce:	db02      	blt.n	80067d6 <_printf_float+0x13a>
 80067d0:	6863      	ldr	r3, [r4, #4]
 80067d2:	4299      	cmp	r1, r3
 80067d4:	dd41      	ble.n	800685a <_printf_float+0x1be>
 80067d6:	f1ab 0b02 	sub.w	fp, fp, #2
 80067da:	fa5f fb8b 	uxtb.w	fp, fp
 80067de:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80067e2:	d820      	bhi.n	8006826 <_printf_float+0x18a>
 80067e4:	3901      	subs	r1, #1
 80067e6:	465a      	mov	r2, fp
 80067e8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067ec:	9109      	str	r1, [sp, #36]	; 0x24
 80067ee:	f7ff ff17 	bl	8006620 <__exponent>
 80067f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067f4:	1813      	adds	r3, r2, r0
 80067f6:	2a01      	cmp	r2, #1
 80067f8:	4681      	mov	r9, r0
 80067fa:	6123      	str	r3, [r4, #16]
 80067fc:	dc02      	bgt.n	8006804 <_printf_float+0x168>
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	07d2      	lsls	r2, r2, #31
 8006802:	d501      	bpl.n	8006808 <_printf_float+0x16c>
 8006804:	3301      	adds	r3, #1
 8006806:	6123      	str	r3, [r4, #16]
 8006808:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800680c:	2b00      	cmp	r3, #0
 800680e:	d09c      	beq.n	800674a <_printf_float+0xae>
 8006810:	232d      	movs	r3, #45	; 0x2d
 8006812:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006816:	e798      	b.n	800674a <_printf_float+0xae>
 8006818:	9a06      	ldr	r2, [sp, #24]
 800681a:	2a47      	cmp	r2, #71	; 0x47
 800681c:	d1be      	bne.n	800679c <_printf_float+0x100>
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1bc      	bne.n	800679c <_printf_float+0x100>
 8006822:	2301      	movs	r3, #1
 8006824:	e7b9      	b.n	800679a <_printf_float+0xfe>
 8006826:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800682a:	d118      	bne.n	800685e <_printf_float+0x1c2>
 800682c:	2900      	cmp	r1, #0
 800682e:	6863      	ldr	r3, [r4, #4]
 8006830:	dd0b      	ble.n	800684a <_printf_float+0x1ae>
 8006832:	6121      	str	r1, [r4, #16]
 8006834:	b913      	cbnz	r3, 800683c <_printf_float+0x1a0>
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	07d0      	lsls	r0, r2, #31
 800683a:	d502      	bpl.n	8006842 <_printf_float+0x1a6>
 800683c:	3301      	adds	r3, #1
 800683e:	440b      	add	r3, r1
 8006840:	6123      	str	r3, [r4, #16]
 8006842:	65a1      	str	r1, [r4, #88]	; 0x58
 8006844:	f04f 0900 	mov.w	r9, #0
 8006848:	e7de      	b.n	8006808 <_printf_float+0x16c>
 800684a:	b913      	cbnz	r3, 8006852 <_printf_float+0x1b6>
 800684c:	6822      	ldr	r2, [r4, #0]
 800684e:	07d2      	lsls	r2, r2, #31
 8006850:	d501      	bpl.n	8006856 <_printf_float+0x1ba>
 8006852:	3302      	adds	r3, #2
 8006854:	e7f4      	b.n	8006840 <_printf_float+0x1a4>
 8006856:	2301      	movs	r3, #1
 8006858:	e7f2      	b.n	8006840 <_printf_float+0x1a4>
 800685a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800685e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006860:	4299      	cmp	r1, r3
 8006862:	db05      	blt.n	8006870 <_printf_float+0x1d4>
 8006864:	6823      	ldr	r3, [r4, #0]
 8006866:	6121      	str	r1, [r4, #16]
 8006868:	07d8      	lsls	r0, r3, #31
 800686a:	d5ea      	bpl.n	8006842 <_printf_float+0x1a6>
 800686c:	1c4b      	adds	r3, r1, #1
 800686e:	e7e7      	b.n	8006840 <_printf_float+0x1a4>
 8006870:	2900      	cmp	r1, #0
 8006872:	bfd4      	ite	le
 8006874:	f1c1 0202 	rsble	r2, r1, #2
 8006878:	2201      	movgt	r2, #1
 800687a:	4413      	add	r3, r2
 800687c:	e7e0      	b.n	8006840 <_printf_float+0x1a4>
 800687e:	6823      	ldr	r3, [r4, #0]
 8006880:	055a      	lsls	r2, r3, #21
 8006882:	d407      	bmi.n	8006894 <_printf_float+0x1f8>
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	4642      	mov	r2, r8
 8006888:	4631      	mov	r1, r6
 800688a:	4628      	mov	r0, r5
 800688c:	47b8      	blx	r7
 800688e:	3001      	adds	r0, #1
 8006890:	d12c      	bne.n	80068ec <_printf_float+0x250>
 8006892:	e764      	b.n	800675e <_printf_float+0xc2>
 8006894:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006898:	f240 80e0 	bls.w	8006a5c <_printf_float+0x3c0>
 800689c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068a0:	2200      	movs	r2, #0
 80068a2:	2300      	movs	r3, #0
 80068a4:	f7fa f918 	bl	8000ad8 <__aeabi_dcmpeq>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d034      	beq.n	8006916 <_printf_float+0x27a>
 80068ac:	4a37      	ldr	r2, [pc, #220]	; (800698c <_printf_float+0x2f0>)
 80068ae:	2301      	movs	r3, #1
 80068b0:	4631      	mov	r1, r6
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f af51 	beq.w	800675e <_printf_float+0xc2>
 80068bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80068c0:	429a      	cmp	r2, r3
 80068c2:	db02      	blt.n	80068ca <_printf_float+0x22e>
 80068c4:	6823      	ldr	r3, [r4, #0]
 80068c6:	07d8      	lsls	r0, r3, #31
 80068c8:	d510      	bpl.n	80068ec <_printf_float+0x250>
 80068ca:	ee18 3a10 	vmov	r3, s16
 80068ce:	4652      	mov	r2, sl
 80068d0:	4631      	mov	r1, r6
 80068d2:	4628      	mov	r0, r5
 80068d4:	47b8      	blx	r7
 80068d6:	3001      	adds	r0, #1
 80068d8:	f43f af41 	beq.w	800675e <_printf_float+0xc2>
 80068dc:	f04f 0800 	mov.w	r8, #0
 80068e0:	f104 091a 	add.w	r9, r4, #26
 80068e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068e6:	3b01      	subs	r3, #1
 80068e8:	4543      	cmp	r3, r8
 80068ea:	dc09      	bgt.n	8006900 <_printf_float+0x264>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	079b      	lsls	r3, r3, #30
 80068f0:	f100 8105 	bmi.w	8006afe <_printf_float+0x462>
 80068f4:	68e0      	ldr	r0, [r4, #12]
 80068f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068f8:	4298      	cmp	r0, r3
 80068fa:	bfb8      	it	lt
 80068fc:	4618      	movlt	r0, r3
 80068fe:	e730      	b.n	8006762 <_printf_float+0xc6>
 8006900:	2301      	movs	r3, #1
 8006902:	464a      	mov	r2, r9
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	47b8      	blx	r7
 800690a:	3001      	adds	r0, #1
 800690c:	f43f af27 	beq.w	800675e <_printf_float+0xc2>
 8006910:	f108 0801 	add.w	r8, r8, #1
 8006914:	e7e6      	b.n	80068e4 <_printf_float+0x248>
 8006916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006918:	2b00      	cmp	r3, #0
 800691a:	dc39      	bgt.n	8006990 <_printf_float+0x2f4>
 800691c:	4a1b      	ldr	r2, [pc, #108]	; (800698c <_printf_float+0x2f0>)
 800691e:	2301      	movs	r3, #1
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f af19 	beq.w	800675e <_printf_float+0xc2>
 800692c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006930:	4313      	orrs	r3, r2
 8006932:	d102      	bne.n	800693a <_printf_float+0x29e>
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	07d9      	lsls	r1, r3, #31
 8006938:	d5d8      	bpl.n	80068ec <_printf_float+0x250>
 800693a:	ee18 3a10 	vmov	r3, s16
 800693e:	4652      	mov	r2, sl
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	f43f af09 	beq.w	800675e <_printf_float+0xc2>
 800694c:	f04f 0900 	mov.w	r9, #0
 8006950:	f104 0a1a 	add.w	sl, r4, #26
 8006954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006956:	425b      	negs	r3, r3
 8006958:	454b      	cmp	r3, r9
 800695a:	dc01      	bgt.n	8006960 <_printf_float+0x2c4>
 800695c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800695e:	e792      	b.n	8006886 <_printf_float+0x1ea>
 8006960:	2301      	movs	r3, #1
 8006962:	4652      	mov	r2, sl
 8006964:	4631      	mov	r1, r6
 8006966:	4628      	mov	r0, r5
 8006968:	47b8      	blx	r7
 800696a:	3001      	adds	r0, #1
 800696c:	f43f aef7 	beq.w	800675e <_printf_float+0xc2>
 8006970:	f109 0901 	add.w	r9, r9, #1
 8006974:	e7ee      	b.n	8006954 <_printf_float+0x2b8>
 8006976:	bf00      	nop
 8006978:	7fefffff 	.word	0x7fefffff
 800697c:	0800aecc 	.word	0x0800aecc
 8006980:	0800aed0 	.word	0x0800aed0
 8006984:	0800aed8 	.word	0x0800aed8
 8006988:	0800aed4 	.word	0x0800aed4
 800698c:	0800aedc 	.word	0x0800aedc
 8006990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006992:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006994:	429a      	cmp	r2, r3
 8006996:	bfa8      	it	ge
 8006998:	461a      	movge	r2, r3
 800699a:	2a00      	cmp	r2, #0
 800699c:	4691      	mov	r9, r2
 800699e:	dc37      	bgt.n	8006a10 <_printf_float+0x374>
 80069a0:	f04f 0b00 	mov.w	fp, #0
 80069a4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069a8:	f104 021a 	add.w	r2, r4, #26
 80069ac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069ae:	9305      	str	r3, [sp, #20]
 80069b0:	eba3 0309 	sub.w	r3, r3, r9
 80069b4:	455b      	cmp	r3, fp
 80069b6:	dc33      	bgt.n	8006a20 <_printf_float+0x384>
 80069b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069bc:	429a      	cmp	r2, r3
 80069be:	db3b      	blt.n	8006a38 <_printf_float+0x39c>
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	07da      	lsls	r2, r3, #31
 80069c4:	d438      	bmi.n	8006a38 <_printf_float+0x39c>
 80069c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069c8:	9b05      	ldr	r3, [sp, #20]
 80069ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	eba2 0901 	sub.w	r9, r2, r1
 80069d2:	4599      	cmp	r9, r3
 80069d4:	bfa8      	it	ge
 80069d6:	4699      	movge	r9, r3
 80069d8:	f1b9 0f00 	cmp.w	r9, #0
 80069dc:	dc35      	bgt.n	8006a4a <_printf_float+0x3ae>
 80069de:	f04f 0800 	mov.w	r8, #0
 80069e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069e6:	f104 0a1a 	add.w	sl, r4, #26
 80069ea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	eba3 0309 	sub.w	r3, r3, r9
 80069f4:	4543      	cmp	r3, r8
 80069f6:	f77f af79 	ble.w	80068ec <_printf_float+0x250>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4652      	mov	r2, sl
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b8      	blx	r7
 8006a04:	3001      	adds	r0, #1
 8006a06:	f43f aeaa 	beq.w	800675e <_printf_float+0xc2>
 8006a0a:	f108 0801 	add.w	r8, r8, #1
 8006a0e:	e7ec      	b.n	80069ea <_printf_float+0x34e>
 8006a10:	4613      	mov	r3, r2
 8006a12:	4631      	mov	r1, r6
 8006a14:	4642      	mov	r2, r8
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d1c0      	bne.n	80069a0 <_printf_float+0x304>
 8006a1e:	e69e      	b.n	800675e <_printf_float+0xc2>
 8006a20:	2301      	movs	r3, #1
 8006a22:	4631      	mov	r1, r6
 8006a24:	4628      	mov	r0, r5
 8006a26:	9205      	str	r2, [sp, #20]
 8006a28:	47b8      	blx	r7
 8006a2a:	3001      	adds	r0, #1
 8006a2c:	f43f ae97 	beq.w	800675e <_printf_float+0xc2>
 8006a30:	9a05      	ldr	r2, [sp, #20]
 8006a32:	f10b 0b01 	add.w	fp, fp, #1
 8006a36:	e7b9      	b.n	80069ac <_printf_float+0x310>
 8006a38:	ee18 3a10 	vmov	r3, s16
 8006a3c:	4652      	mov	r2, sl
 8006a3e:	4631      	mov	r1, r6
 8006a40:	4628      	mov	r0, r5
 8006a42:	47b8      	blx	r7
 8006a44:	3001      	adds	r0, #1
 8006a46:	d1be      	bne.n	80069c6 <_printf_float+0x32a>
 8006a48:	e689      	b.n	800675e <_printf_float+0xc2>
 8006a4a:	9a05      	ldr	r2, [sp, #20]
 8006a4c:	464b      	mov	r3, r9
 8006a4e:	4442      	add	r2, r8
 8006a50:	4631      	mov	r1, r6
 8006a52:	4628      	mov	r0, r5
 8006a54:	47b8      	blx	r7
 8006a56:	3001      	adds	r0, #1
 8006a58:	d1c1      	bne.n	80069de <_printf_float+0x342>
 8006a5a:	e680      	b.n	800675e <_printf_float+0xc2>
 8006a5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a5e:	2a01      	cmp	r2, #1
 8006a60:	dc01      	bgt.n	8006a66 <_printf_float+0x3ca>
 8006a62:	07db      	lsls	r3, r3, #31
 8006a64:	d538      	bpl.n	8006ad8 <_printf_float+0x43c>
 8006a66:	2301      	movs	r3, #1
 8006a68:	4642      	mov	r2, r8
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b8      	blx	r7
 8006a70:	3001      	adds	r0, #1
 8006a72:	f43f ae74 	beq.w	800675e <_printf_float+0xc2>
 8006a76:	ee18 3a10 	vmov	r3, s16
 8006a7a:	4652      	mov	r2, sl
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	f43f ae6b 	beq.w	800675e <_printf_float+0xc2>
 8006a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f7fa f822 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a94:	b9d8      	cbnz	r0, 8006ace <_printf_float+0x432>
 8006a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a98:	f108 0201 	add.w	r2, r8, #1
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	d10e      	bne.n	8006ac6 <_printf_float+0x42a>
 8006aa8:	e659      	b.n	800675e <_printf_float+0xc2>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4652      	mov	r2, sl
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	f43f ae52 	beq.w	800675e <_printf_float+0xc2>
 8006aba:	f108 0801 	add.w	r8, r8, #1
 8006abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	4543      	cmp	r3, r8
 8006ac4:	dcf1      	bgt.n	8006aaa <_printf_float+0x40e>
 8006ac6:	464b      	mov	r3, r9
 8006ac8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006acc:	e6dc      	b.n	8006888 <_printf_float+0x1ec>
 8006ace:	f04f 0800 	mov.w	r8, #0
 8006ad2:	f104 0a1a 	add.w	sl, r4, #26
 8006ad6:	e7f2      	b.n	8006abe <_printf_float+0x422>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4642      	mov	r2, r8
 8006adc:	e7df      	b.n	8006a9e <_printf_float+0x402>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	464a      	mov	r2, r9
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b8      	blx	r7
 8006ae8:	3001      	adds	r0, #1
 8006aea:	f43f ae38 	beq.w	800675e <_printf_float+0xc2>
 8006aee:	f108 0801 	add.w	r8, r8, #1
 8006af2:	68e3      	ldr	r3, [r4, #12]
 8006af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006af6:	1a5b      	subs	r3, r3, r1
 8006af8:	4543      	cmp	r3, r8
 8006afa:	dcf0      	bgt.n	8006ade <_printf_float+0x442>
 8006afc:	e6fa      	b.n	80068f4 <_printf_float+0x258>
 8006afe:	f04f 0800 	mov.w	r8, #0
 8006b02:	f104 0919 	add.w	r9, r4, #25
 8006b06:	e7f4      	b.n	8006af2 <_printf_float+0x456>

08006b08 <_printf_common>:
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	4616      	mov	r6, r2
 8006b0e:	4699      	mov	r9, r3
 8006b10:	688a      	ldr	r2, [r1, #8]
 8006b12:	690b      	ldr	r3, [r1, #16]
 8006b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	bfb8      	it	lt
 8006b1c:	4613      	movlt	r3, r2
 8006b1e:	6033      	str	r3, [r6, #0]
 8006b20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b24:	4607      	mov	r7, r0
 8006b26:	460c      	mov	r4, r1
 8006b28:	b10a      	cbz	r2, 8006b2e <_printf_common+0x26>
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	6033      	str	r3, [r6, #0]
 8006b2e:	6823      	ldr	r3, [r4, #0]
 8006b30:	0699      	lsls	r1, r3, #26
 8006b32:	bf42      	ittt	mi
 8006b34:	6833      	ldrmi	r3, [r6, #0]
 8006b36:	3302      	addmi	r3, #2
 8006b38:	6033      	strmi	r3, [r6, #0]
 8006b3a:	6825      	ldr	r5, [r4, #0]
 8006b3c:	f015 0506 	ands.w	r5, r5, #6
 8006b40:	d106      	bne.n	8006b50 <_printf_common+0x48>
 8006b42:	f104 0a19 	add.w	sl, r4, #25
 8006b46:	68e3      	ldr	r3, [r4, #12]
 8006b48:	6832      	ldr	r2, [r6, #0]
 8006b4a:	1a9b      	subs	r3, r3, r2
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	dc26      	bgt.n	8006b9e <_printf_common+0x96>
 8006b50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b54:	1e13      	subs	r3, r2, #0
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	bf18      	it	ne
 8006b5a:	2301      	movne	r3, #1
 8006b5c:	0692      	lsls	r2, r2, #26
 8006b5e:	d42b      	bmi.n	8006bb8 <_printf_common+0xb0>
 8006b60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b64:	4649      	mov	r1, r9
 8006b66:	4638      	mov	r0, r7
 8006b68:	47c0      	blx	r8
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d01e      	beq.n	8006bac <_printf_common+0xa4>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	68e5      	ldr	r5, [r4, #12]
 8006b72:	6832      	ldr	r2, [r6, #0]
 8006b74:	f003 0306 	and.w	r3, r3, #6
 8006b78:	2b04      	cmp	r3, #4
 8006b7a:	bf08      	it	eq
 8006b7c:	1aad      	subeq	r5, r5, r2
 8006b7e:	68a3      	ldr	r3, [r4, #8]
 8006b80:	6922      	ldr	r2, [r4, #16]
 8006b82:	bf0c      	ite	eq
 8006b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b88:	2500      	movne	r5, #0
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	bfc4      	itt	gt
 8006b8e:	1a9b      	subgt	r3, r3, r2
 8006b90:	18ed      	addgt	r5, r5, r3
 8006b92:	2600      	movs	r6, #0
 8006b94:	341a      	adds	r4, #26
 8006b96:	42b5      	cmp	r5, r6
 8006b98:	d11a      	bne.n	8006bd0 <_printf_common+0xc8>
 8006b9a:	2000      	movs	r0, #0
 8006b9c:	e008      	b.n	8006bb0 <_printf_common+0xa8>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	4652      	mov	r2, sl
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	47c0      	blx	r8
 8006ba8:	3001      	adds	r0, #1
 8006baa:	d103      	bne.n	8006bb4 <_printf_common+0xac>
 8006bac:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb4:	3501      	adds	r5, #1
 8006bb6:	e7c6      	b.n	8006b46 <_printf_common+0x3e>
 8006bb8:	18e1      	adds	r1, r4, r3
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	2030      	movs	r0, #48	; 0x30
 8006bbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006bc2:	4422      	add	r2, r4
 8006bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006bc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bcc:	3302      	adds	r3, #2
 8006bce:	e7c7      	b.n	8006b60 <_printf_common+0x58>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	4622      	mov	r2, r4
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	4638      	mov	r0, r7
 8006bd8:	47c0      	blx	r8
 8006bda:	3001      	adds	r0, #1
 8006bdc:	d0e6      	beq.n	8006bac <_printf_common+0xa4>
 8006bde:	3601      	adds	r6, #1
 8006be0:	e7d9      	b.n	8006b96 <_printf_common+0x8e>
	...

08006be4 <_printf_i>:
 8006be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006be8:	460c      	mov	r4, r1
 8006bea:	4691      	mov	r9, r2
 8006bec:	7e27      	ldrb	r7, [r4, #24]
 8006bee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006bf0:	2f78      	cmp	r7, #120	; 0x78
 8006bf2:	4680      	mov	r8, r0
 8006bf4:	469a      	mov	sl, r3
 8006bf6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bfa:	d807      	bhi.n	8006c0c <_printf_i+0x28>
 8006bfc:	2f62      	cmp	r7, #98	; 0x62
 8006bfe:	d80a      	bhi.n	8006c16 <_printf_i+0x32>
 8006c00:	2f00      	cmp	r7, #0
 8006c02:	f000 80d8 	beq.w	8006db6 <_printf_i+0x1d2>
 8006c06:	2f58      	cmp	r7, #88	; 0x58
 8006c08:	f000 80a3 	beq.w	8006d52 <_printf_i+0x16e>
 8006c0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c10:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c14:	e03a      	b.n	8006c8c <_printf_i+0xa8>
 8006c16:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c1a:	2b15      	cmp	r3, #21
 8006c1c:	d8f6      	bhi.n	8006c0c <_printf_i+0x28>
 8006c1e:	a001      	add	r0, pc, #4	; (adr r0, 8006c24 <_printf_i+0x40>)
 8006c20:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006c24:	08006c7d 	.word	0x08006c7d
 8006c28:	08006c91 	.word	0x08006c91
 8006c2c:	08006c0d 	.word	0x08006c0d
 8006c30:	08006c0d 	.word	0x08006c0d
 8006c34:	08006c0d 	.word	0x08006c0d
 8006c38:	08006c0d 	.word	0x08006c0d
 8006c3c:	08006c91 	.word	0x08006c91
 8006c40:	08006c0d 	.word	0x08006c0d
 8006c44:	08006c0d 	.word	0x08006c0d
 8006c48:	08006c0d 	.word	0x08006c0d
 8006c4c:	08006c0d 	.word	0x08006c0d
 8006c50:	08006d9d 	.word	0x08006d9d
 8006c54:	08006cc1 	.word	0x08006cc1
 8006c58:	08006d7f 	.word	0x08006d7f
 8006c5c:	08006c0d 	.word	0x08006c0d
 8006c60:	08006c0d 	.word	0x08006c0d
 8006c64:	08006dbf 	.word	0x08006dbf
 8006c68:	08006c0d 	.word	0x08006c0d
 8006c6c:	08006cc1 	.word	0x08006cc1
 8006c70:	08006c0d 	.word	0x08006c0d
 8006c74:	08006c0d 	.word	0x08006c0d
 8006c78:	08006d87 	.word	0x08006d87
 8006c7c:	680b      	ldr	r3, [r1, #0]
 8006c7e:	1d1a      	adds	r2, r3, #4
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	600a      	str	r2, [r1, #0]
 8006c84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0a3      	b.n	8006dd8 <_printf_i+0x1f4>
 8006c90:	6825      	ldr	r5, [r4, #0]
 8006c92:	6808      	ldr	r0, [r1, #0]
 8006c94:	062e      	lsls	r6, r5, #24
 8006c96:	f100 0304 	add.w	r3, r0, #4
 8006c9a:	d50a      	bpl.n	8006cb2 <_printf_i+0xce>
 8006c9c:	6805      	ldr	r5, [r0, #0]
 8006c9e:	600b      	str	r3, [r1, #0]
 8006ca0:	2d00      	cmp	r5, #0
 8006ca2:	da03      	bge.n	8006cac <_printf_i+0xc8>
 8006ca4:	232d      	movs	r3, #45	; 0x2d
 8006ca6:	426d      	negs	r5, r5
 8006ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cac:	485e      	ldr	r0, [pc, #376]	; (8006e28 <_printf_i+0x244>)
 8006cae:	230a      	movs	r3, #10
 8006cb0:	e019      	b.n	8006ce6 <_printf_i+0x102>
 8006cb2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006cb6:	6805      	ldr	r5, [r0, #0]
 8006cb8:	600b      	str	r3, [r1, #0]
 8006cba:	bf18      	it	ne
 8006cbc:	b22d      	sxthne	r5, r5
 8006cbe:	e7ef      	b.n	8006ca0 <_printf_i+0xbc>
 8006cc0:	680b      	ldr	r3, [r1, #0]
 8006cc2:	6825      	ldr	r5, [r4, #0]
 8006cc4:	1d18      	adds	r0, r3, #4
 8006cc6:	6008      	str	r0, [r1, #0]
 8006cc8:	0628      	lsls	r0, r5, #24
 8006cca:	d501      	bpl.n	8006cd0 <_printf_i+0xec>
 8006ccc:	681d      	ldr	r5, [r3, #0]
 8006cce:	e002      	b.n	8006cd6 <_printf_i+0xf2>
 8006cd0:	0669      	lsls	r1, r5, #25
 8006cd2:	d5fb      	bpl.n	8006ccc <_printf_i+0xe8>
 8006cd4:	881d      	ldrh	r5, [r3, #0]
 8006cd6:	4854      	ldr	r0, [pc, #336]	; (8006e28 <_printf_i+0x244>)
 8006cd8:	2f6f      	cmp	r7, #111	; 0x6f
 8006cda:	bf0c      	ite	eq
 8006cdc:	2308      	moveq	r3, #8
 8006cde:	230a      	movne	r3, #10
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ce6:	6866      	ldr	r6, [r4, #4]
 8006ce8:	60a6      	str	r6, [r4, #8]
 8006cea:	2e00      	cmp	r6, #0
 8006cec:	bfa2      	ittt	ge
 8006cee:	6821      	ldrge	r1, [r4, #0]
 8006cf0:	f021 0104 	bicge.w	r1, r1, #4
 8006cf4:	6021      	strge	r1, [r4, #0]
 8006cf6:	b90d      	cbnz	r5, 8006cfc <_printf_i+0x118>
 8006cf8:	2e00      	cmp	r6, #0
 8006cfa:	d04d      	beq.n	8006d98 <_printf_i+0x1b4>
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d02:	fb03 5711 	mls	r7, r3, r1, r5
 8006d06:	5dc7      	ldrb	r7, [r0, r7]
 8006d08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d0c:	462f      	mov	r7, r5
 8006d0e:	42bb      	cmp	r3, r7
 8006d10:	460d      	mov	r5, r1
 8006d12:	d9f4      	bls.n	8006cfe <_printf_i+0x11a>
 8006d14:	2b08      	cmp	r3, #8
 8006d16:	d10b      	bne.n	8006d30 <_printf_i+0x14c>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	07df      	lsls	r7, r3, #31
 8006d1c:	d508      	bpl.n	8006d30 <_printf_i+0x14c>
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	6861      	ldr	r1, [r4, #4]
 8006d22:	4299      	cmp	r1, r3
 8006d24:	bfde      	ittt	le
 8006d26:	2330      	movle	r3, #48	; 0x30
 8006d28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d30:	1b92      	subs	r2, r2, r6
 8006d32:	6122      	str	r2, [r4, #16]
 8006d34:	f8cd a000 	str.w	sl, [sp]
 8006d38:	464b      	mov	r3, r9
 8006d3a:	aa03      	add	r2, sp, #12
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4640      	mov	r0, r8
 8006d40:	f7ff fee2 	bl	8006b08 <_printf_common>
 8006d44:	3001      	adds	r0, #1
 8006d46:	d14c      	bne.n	8006de2 <_printf_i+0x1fe>
 8006d48:	f04f 30ff 	mov.w	r0, #4294967295
 8006d4c:	b004      	add	sp, #16
 8006d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d52:	4835      	ldr	r0, [pc, #212]	; (8006e28 <_printf_i+0x244>)
 8006d54:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	680e      	ldr	r6, [r1, #0]
 8006d5c:	061f      	lsls	r7, r3, #24
 8006d5e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d62:	600e      	str	r6, [r1, #0]
 8006d64:	d514      	bpl.n	8006d90 <_printf_i+0x1ac>
 8006d66:	07d9      	lsls	r1, r3, #31
 8006d68:	bf44      	itt	mi
 8006d6a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d6e:	6023      	strmi	r3, [r4, #0]
 8006d70:	b91d      	cbnz	r5, 8006d7a <_printf_i+0x196>
 8006d72:	6823      	ldr	r3, [r4, #0]
 8006d74:	f023 0320 	bic.w	r3, r3, #32
 8006d78:	6023      	str	r3, [r4, #0]
 8006d7a:	2310      	movs	r3, #16
 8006d7c:	e7b0      	b.n	8006ce0 <_printf_i+0xfc>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f043 0320 	orr.w	r3, r3, #32
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	2378      	movs	r3, #120	; 0x78
 8006d88:	4828      	ldr	r0, [pc, #160]	; (8006e2c <_printf_i+0x248>)
 8006d8a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d8e:	e7e3      	b.n	8006d58 <_printf_i+0x174>
 8006d90:	065e      	lsls	r6, r3, #25
 8006d92:	bf48      	it	mi
 8006d94:	b2ad      	uxthmi	r5, r5
 8006d96:	e7e6      	b.n	8006d66 <_printf_i+0x182>
 8006d98:	4616      	mov	r6, r2
 8006d9a:	e7bb      	b.n	8006d14 <_printf_i+0x130>
 8006d9c:	680b      	ldr	r3, [r1, #0]
 8006d9e:	6826      	ldr	r6, [r4, #0]
 8006da0:	6960      	ldr	r0, [r4, #20]
 8006da2:	1d1d      	adds	r5, r3, #4
 8006da4:	600d      	str	r5, [r1, #0]
 8006da6:	0635      	lsls	r5, r6, #24
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	d501      	bpl.n	8006db0 <_printf_i+0x1cc>
 8006dac:	6018      	str	r0, [r3, #0]
 8006dae:	e002      	b.n	8006db6 <_printf_i+0x1d2>
 8006db0:	0671      	lsls	r1, r6, #25
 8006db2:	d5fb      	bpl.n	8006dac <_printf_i+0x1c8>
 8006db4:	8018      	strh	r0, [r3, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	4616      	mov	r6, r2
 8006dbc:	e7ba      	b.n	8006d34 <_printf_i+0x150>
 8006dbe:	680b      	ldr	r3, [r1, #0]
 8006dc0:	1d1a      	adds	r2, r3, #4
 8006dc2:	600a      	str	r2, [r1, #0]
 8006dc4:	681e      	ldr	r6, [r3, #0]
 8006dc6:	6862      	ldr	r2, [r4, #4]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f7f9 fa10 	bl	80001f0 <memchr>
 8006dd0:	b108      	cbz	r0, 8006dd6 <_printf_i+0x1f2>
 8006dd2:	1b80      	subs	r0, r0, r6
 8006dd4:	6060      	str	r0, [r4, #4]
 8006dd6:	6863      	ldr	r3, [r4, #4]
 8006dd8:	6123      	str	r3, [r4, #16]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de0:	e7a8      	b.n	8006d34 <_printf_i+0x150>
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	4632      	mov	r2, r6
 8006de6:	4649      	mov	r1, r9
 8006de8:	4640      	mov	r0, r8
 8006dea:	47d0      	blx	sl
 8006dec:	3001      	adds	r0, #1
 8006dee:	d0ab      	beq.n	8006d48 <_printf_i+0x164>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	079b      	lsls	r3, r3, #30
 8006df4:	d413      	bmi.n	8006e1e <_printf_i+0x23a>
 8006df6:	68e0      	ldr	r0, [r4, #12]
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	4298      	cmp	r0, r3
 8006dfc:	bfb8      	it	lt
 8006dfe:	4618      	movlt	r0, r3
 8006e00:	e7a4      	b.n	8006d4c <_printf_i+0x168>
 8006e02:	2301      	movs	r3, #1
 8006e04:	4632      	mov	r2, r6
 8006e06:	4649      	mov	r1, r9
 8006e08:	4640      	mov	r0, r8
 8006e0a:	47d0      	blx	sl
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d09b      	beq.n	8006d48 <_printf_i+0x164>
 8006e10:	3501      	adds	r5, #1
 8006e12:	68e3      	ldr	r3, [r4, #12]
 8006e14:	9903      	ldr	r1, [sp, #12]
 8006e16:	1a5b      	subs	r3, r3, r1
 8006e18:	42ab      	cmp	r3, r5
 8006e1a:	dcf2      	bgt.n	8006e02 <_printf_i+0x21e>
 8006e1c:	e7eb      	b.n	8006df6 <_printf_i+0x212>
 8006e1e:	2500      	movs	r5, #0
 8006e20:	f104 0619 	add.w	r6, r4, #25
 8006e24:	e7f5      	b.n	8006e12 <_printf_i+0x22e>
 8006e26:	bf00      	nop
 8006e28:	0800aede 	.word	0x0800aede
 8006e2c:	0800aeef 	.word	0x0800aeef

08006e30 <_scanf_float>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	b087      	sub	sp, #28
 8006e36:	4617      	mov	r7, r2
 8006e38:	9303      	str	r3, [sp, #12]
 8006e3a:	688b      	ldr	r3, [r1, #8]
 8006e3c:	1e5a      	subs	r2, r3, #1
 8006e3e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006e42:	bf83      	ittte	hi
 8006e44:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006e48:	195b      	addhi	r3, r3, r5
 8006e4a:	9302      	strhi	r3, [sp, #8]
 8006e4c:	2300      	movls	r3, #0
 8006e4e:	bf86      	itte	hi
 8006e50:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006e54:	608b      	strhi	r3, [r1, #8]
 8006e56:	9302      	strls	r3, [sp, #8]
 8006e58:	680b      	ldr	r3, [r1, #0]
 8006e5a:	468b      	mov	fp, r1
 8006e5c:	2500      	movs	r5, #0
 8006e5e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006e62:	f84b 3b1c 	str.w	r3, [fp], #28
 8006e66:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	465e      	mov	r6, fp
 8006e70:	46aa      	mov	sl, r5
 8006e72:	46a9      	mov	r9, r5
 8006e74:	9501      	str	r5, [sp, #4]
 8006e76:	68a2      	ldr	r2, [r4, #8]
 8006e78:	b152      	cbz	r2, 8006e90 <_scanf_float+0x60>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	2b4e      	cmp	r3, #78	; 0x4e
 8006e80:	d864      	bhi.n	8006f4c <_scanf_float+0x11c>
 8006e82:	2b40      	cmp	r3, #64	; 0x40
 8006e84:	d83c      	bhi.n	8006f00 <_scanf_float+0xd0>
 8006e86:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006e8a:	b2c8      	uxtb	r0, r1
 8006e8c:	280e      	cmp	r0, #14
 8006e8e:	d93a      	bls.n	8006f06 <_scanf_float+0xd6>
 8006e90:	f1b9 0f00 	cmp.w	r9, #0
 8006e94:	d003      	beq.n	8006e9e <_scanf_float+0x6e>
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ea2:	f1ba 0f01 	cmp.w	sl, #1
 8006ea6:	f200 8113 	bhi.w	80070d0 <_scanf_float+0x2a0>
 8006eaa:	455e      	cmp	r6, fp
 8006eac:	f200 8105 	bhi.w	80070ba <_scanf_float+0x28a>
 8006eb0:	2501      	movs	r5, #1
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	b007      	add	sp, #28
 8006eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eba:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ebe:	2a0d      	cmp	r2, #13
 8006ec0:	d8e6      	bhi.n	8006e90 <_scanf_float+0x60>
 8006ec2:	a101      	add	r1, pc, #4	; (adr r1, 8006ec8 <_scanf_float+0x98>)
 8006ec4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ec8:	08007007 	.word	0x08007007
 8006ecc:	08006e91 	.word	0x08006e91
 8006ed0:	08006e91 	.word	0x08006e91
 8006ed4:	08006e91 	.word	0x08006e91
 8006ed8:	08007067 	.word	0x08007067
 8006edc:	0800703f 	.word	0x0800703f
 8006ee0:	08006e91 	.word	0x08006e91
 8006ee4:	08006e91 	.word	0x08006e91
 8006ee8:	08007015 	.word	0x08007015
 8006eec:	08006e91 	.word	0x08006e91
 8006ef0:	08006e91 	.word	0x08006e91
 8006ef4:	08006e91 	.word	0x08006e91
 8006ef8:	08006e91 	.word	0x08006e91
 8006efc:	08006fcd 	.word	0x08006fcd
 8006f00:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006f04:	e7db      	b.n	8006ebe <_scanf_float+0x8e>
 8006f06:	290e      	cmp	r1, #14
 8006f08:	d8c2      	bhi.n	8006e90 <_scanf_float+0x60>
 8006f0a:	a001      	add	r0, pc, #4	; (adr r0, 8006f10 <_scanf_float+0xe0>)
 8006f0c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006f10:	08006fbf 	.word	0x08006fbf
 8006f14:	08006e91 	.word	0x08006e91
 8006f18:	08006fbf 	.word	0x08006fbf
 8006f1c:	08007053 	.word	0x08007053
 8006f20:	08006e91 	.word	0x08006e91
 8006f24:	08006f6d 	.word	0x08006f6d
 8006f28:	08006fa9 	.word	0x08006fa9
 8006f2c:	08006fa9 	.word	0x08006fa9
 8006f30:	08006fa9 	.word	0x08006fa9
 8006f34:	08006fa9 	.word	0x08006fa9
 8006f38:	08006fa9 	.word	0x08006fa9
 8006f3c:	08006fa9 	.word	0x08006fa9
 8006f40:	08006fa9 	.word	0x08006fa9
 8006f44:	08006fa9 	.word	0x08006fa9
 8006f48:	08006fa9 	.word	0x08006fa9
 8006f4c:	2b6e      	cmp	r3, #110	; 0x6e
 8006f4e:	d809      	bhi.n	8006f64 <_scanf_float+0x134>
 8006f50:	2b60      	cmp	r3, #96	; 0x60
 8006f52:	d8b2      	bhi.n	8006eba <_scanf_float+0x8a>
 8006f54:	2b54      	cmp	r3, #84	; 0x54
 8006f56:	d077      	beq.n	8007048 <_scanf_float+0x218>
 8006f58:	2b59      	cmp	r3, #89	; 0x59
 8006f5a:	d199      	bne.n	8006e90 <_scanf_float+0x60>
 8006f5c:	2d07      	cmp	r5, #7
 8006f5e:	d197      	bne.n	8006e90 <_scanf_float+0x60>
 8006f60:	2508      	movs	r5, #8
 8006f62:	e029      	b.n	8006fb8 <_scanf_float+0x188>
 8006f64:	2b74      	cmp	r3, #116	; 0x74
 8006f66:	d06f      	beq.n	8007048 <_scanf_float+0x218>
 8006f68:	2b79      	cmp	r3, #121	; 0x79
 8006f6a:	e7f6      	b.n	8006f5a <_scanf_float+0x12a>
 8006f6c:	6821      	ldr	r1, [r4, #0]
 8006f6e:	05c8      	lsls	r0, r1, #23
 8006f70:	d51a      	bpl.n	8006fa8 <_scanf_float+0x178>
 8006f72:	9b02      	ldr	r3, [sp, #8]
 8006f74:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006f78:	6021      	str	r1, [r4, #0]
 8006f7a:	f109 0901 	add.w	r9, r9, #1
 8006f7e:	b11b      	cbz	r3, 8006f88 <_scanf_float+0x158>
 8006f80:	3b01      	subs	r3, #1
 8006f82:	3201      	adds	r2, #1
 8006f84:	9302      	str	r3, [sp, #8]
 8006f86:	60a2      	str	r2, [r4, #8]
 8006f88:	68a3      	ldr	r3, [r4, #8]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	60a3      	str	r3, [r4, #8]
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	3301      	adds	r3, #1
 8006f92:	6123      	str	r3, [r4, #16]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	607b      	str	r3, [r7, #4]
 8006f9c:	f340 8084 	ble.w	80070a8 <_scanf_float+0x278>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	e766      	b.n	8006e76 <_scanf_float+0x46>
 8006fa8:	eb1a 0f05 	cmn.w	sl, r5
 8006fac:	f47f af70 	bne.w	8006e90 <_scanf_float+0x60>
 8006fb0:	6822      	ldr	r2, [r4, #0]
 8006fb2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006fb6:	6022      	str	r2, [r4, #0]
 8006fb8:	f806 3b01 	strb.w	r3, [r6], #1
 8006fbc:	e7e4      	b.n	8006f88 <_scanf_float+0x158>
 8006fbe:	6822      	ldr	r2, [r4, #0]
 8006fc0:	0610      	lsls	r0, r2, #24
 8006fc2:	f57f af65 	bpl.w	8006e90 <_scanf_float+0x60>
 8006fc6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fca:	e7f4      	b.n	8006fb6 <_scanf_float+0x186>
 8006fcc:	f1ba 0f00 	cmp.w	sl, #0
 8006fd0:	d10e      	bne.n	8006ff0 <_scanf_float+0x1c0>
 8006fd2:	f1b9 0f00 	cmp.w	r9, #0
 8006fd6:	d10e      	bne.n	8006ff6 <_scanf_float+0x1c6>
 8006fd8:	6822      	ldr	r2, [r4, #0]
 8006fda:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006fde:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006fe2:	d108      	bne.n	8006ff6 <_scanf_float+0x1c6>
 8006fe4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006fe8:	6022      	str	r2, [r4, #0]
 8006fea:	f04f 0a01 	mov.w	sl, #1
 8006fee:	e7e3      	b.n	8006fb8 <_scanf_float+0x188>
 8006ff0:	f1ba 0f02 	cmp.w	sl, #2
 8006ff4:	d055      	beq.n	80070a2 <_scanf_float+0x272>
 8006ff6:	2d01      	cmp	r5, #1
 8006ff8:	d002      	beq.n	8007000 <_scanf_float+0x1d0>
 8006ffa:	2d04      	cmp	r5, #4
 8006ffc:	f47f af48 	bne.w	8006e90 <_scanf_float+0x60>
 8007000:	3501      	adds	r5, #1
 8007002:	b2ed      	uxtb	r5, r5
 8007004:	e7d8      	b.n	8006fb8 <_scanf_float+0x188>
 8007006:	f1ba 0f01 	cmp.w	sl, #1
 800700a:	f47f af41 	bne.w	8006e90 <_scanf_float+0x60>
 800700e:	f04f 0a02 	mov.w	sl, #2
 8007012:	e7d1      	b.n	8006fb8 <_scanf_float+0x188>
 8007014:	b97d      	cbnz	r5, 8007036 <_scanf_float+0x206>
 8007016:	f1b9 0f00 	cmp.w	r9, #0
 800701a:	f47f af3c 	bne.w	8006e96 <_scanf_float+0x66>
 800701e:	6822      	ldr	r2, [r4, #0]
 8007020:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007024:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007028:	f47f af39 	bne.w	8006e9e <_scanf_float+0x6e>
 800702c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007030:	6022      	str	r2, [r4, #0]
 8007032:	2501      	movs	r5, #1
 8007034:	e7c0      	b.n	8006fb8 <_scanf_float+0x188>
 8007036:	2d03      	cmp	r5, #3
 8007038:	d0e2      	beq.n	8007000 <_scanf_float+0x1d0>
 800703a:	2d05      	cmp	r5, #5
 800703c:	e7de      	b.n	8006ffc <_scanf_float+0x1cc>
 800703e:	2d02      	cmp	r5, #2
 8007040:	f47f af26 	bne.w	8006e90 <_scanf_float+0x60>
 8007044:	2503      	movs	r5, #3
 8007046:	e7b7      	b.n	8006fb8 <_scanf_float+0x188>
 8007048:	2d06      	cmp	r5, #6
 800704a:	f47f af21 	bne.w	8006e90 <_scanf_float+0x60>
 800704e:	2507      	movs	r5, #7
 8007050:	e7b2      	b.n	8006fb8 <_scanf_float+0x188>
 8007052:	6822      	ldr	r2, [r4, #0]
 8007054:	0591      	lsls	r1, r2, #22
 8007056:	f57f af1b 	bpl.w	8006e90 <_scanf_float+0x60>
 800705a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800705e:	6022      	str	r2, [r4, #0]
 8007060:	f8cd 9004 	str.w	r9, [sp, #4]
 8007064:	e7a8      	b.n	8006fb8 <_scanf_float+0x188>
 8007066:	6822      	ldr	r2, [r4, #0]
 8007068:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800706c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007070:	d006      	beq.n	8007080 <_scanf_float+0x250>
 8007072:	0550      	lsls	r0, r2, #21
 8007074:	f57f af0c 	bpl.w	8006e90 <_scanf_float+0x60>
 8007078:	f1b9 0f00 	cmp.w	r9, #0
 800707c:	f43f af0f 	beq.w	8006e9e <_scanf_float+0x6e>
 8007080:	0591      	lsls	r1, r2, #22
 8007082:	bf58      	it	pl
 8007084:	9901      	ldrpl	r1, [sp, #4]
 8007086:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800708a:	bf58      	it	pl
 800708c:	eba9 0101 	subpl.w	r1, r9, r1
 8007090:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007094:	bf58      	it	pl
 8007096:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800709a:	6022      	str	r2, [r4, #0]
 800709c:	f04f 0900 	mov.w	r9, #0
 80070a0:	e78a      	b.n	8006fb8 <_scanf_float+0x188>
 80070a2:	f04f 0a03 	mov.w	sl, #3
 80070a6:	e787      	b.n	8006fb8 <_scanf_float+0x188>
 80070a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80070ac:	4639      	mov	r1, r7
 80070ae:	4640      	mov	r0, r8
 80070b0:	4798      	blx	r3
 80070b2:	2800      	cmp	r0, #0
 80070b4:	f43f aedf 	beq.w	8006e76 <_scanf_float+0x46>
 80070b8:	e6ea      	b.n	8006e90 <_scanf_float+0x60>
 80070ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070c2:	463a      	mov	r2, r7
 80070c4:	4640      	mov	r0, r8
 80070c6:	4798      	blx	r3
 80070c8:	6923      	ldr	r3, [r4, #16]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	6123      	str	r3, [r4, #16]
 80070ce:	e6ec      	b.n	8006eaa <_scanf_float+0x7a>
 80070d0:	1e6b      	subs	r3, r5, #1
 80070d2:	2b06      	cmp	r3, #6
 80070d4:	d825      	bhi.n	8007122 <_scanf_float+0x2f2>
 80070d6:	2d02      	cmp	r5, #2
 80070d8:	d836      	bhi.n	8007148 <_scanf_float+0x318>
 80070da:	455e      	cmp	r6, fp
 80070dc:	f67f aee8 	bls.w	8006eb0 <_scanf_float+0x80>
 80070e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070e8:	463a      	mov	r2, r7
 80070ea:	4640      	mov	r0, r8
 80070ec:	4798      	blx	r3
 80070ee:	6923      	ldr	r3, [r4, #16]
 80070f0:	3b01      	subs	r3, #1
 80070f2:	6123      	str	r3, [r4, #16]
 80070f4:	e7f1      	b.n	80070da <_scanf_float+0x2aa>
 80070f6:	9802      	ldr	r0, [sp, #8]
 80070f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80070fc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007100:	9002      	str	r0, [sp, #8]
 8007102:	463a      	mov	r2, r7
 8007104:	4640      	mov	r0, r8
 8007106:	4798      	blx	r3
 8007108:	6923      	ldr	r3, [r4, #16]
 800710a:	3b01      	subs	r3, #1
 800710c:	6123      	str	r3, [r4, #16]
 800710e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007112:	fa5f fa8a 	uxtb.w	sl, sl
 8007116:	f1ba 0f02 	cmp.w	sl, #2
 800711a:	d1ec      	bne.n	80070f6 <_scanf_float+0x2c6>
 800711c:	3d03      	subs	r5, #3
 800711e:	b2ed      	uxtb	r5, r5
 8007120:	1b76      	subs	r6, r6, r5
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	05da      	lsls	r2, r3, #23
 8007126:	d52f      	bpl.n	8007188 <_scanf_float+0x358>
 8007128:	055b      	lsls	r3, r3, #21
 800712a:	d510      	bpl.n	800714e <_scanf_float+0x31e>
 800712c:	455e      	cmp	r6, fp
 800712e:	f67f aebf 	bls.w	8006eb0 <_scanf_float+0x80>
 8007132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007136:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800713a:	463a      	mov	r2, r7
 800713c:	4640      	mov	r0, r8
 800713e:	4798      	blx	r3
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	3b01      	subs	r3, #1
 8007144:	6123      	str	r3, [r4, #16]
 8007146:	e7f1      	b.n	800712c <_scanf_float+0x2fc>
 8007148:	46aa      	mov	sl, r5
 800714a:	9602      	str	r6, [sp, #8]
 800714c:	e7df      	b.n	800710e <_scanf_float+0x2de>
 800714e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007152:	6923      	ldr	r3, [r4, #16]
 8007154:	2965      	cmp	r1, #101	; 0x65
 8007156:	f103 33ff 	add.w	r3, r3, #4294967295
 800715a:	f106 35ff 	add.w	r5, r6, #4294967295
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	d00c      	beq.n	800717c <_scanf_float+0x34c>
 8007162:	2945      	cmp	r1, #69	; 0x45
 8007164:	d00a      	beq.n	800717c <_scanf_float+0x34c>
 8007166:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800716a:	463a      	mov	r2, r7
 800716c:	4640      	mov	r0, r8
 800716e:	4798      	blx	r3
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007176:	3b01      	subs	r3, #1
 8007178:	1eb5      	subs	r5, r6, #2
 800717a:	6123      	str	r3, [r4, #16]
 800717c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007180:	463a      	mov	r2, r7
 8007182:	4640      	mov	r0, r8
 8007184:	4798      	blx	r3
 8007186:	462e      	mov	r6, r5
 8007188:	6825      	ldr	r5, [r4, #0]
 800718a:	f015 0510 	ands.w	r5, r5, #16
 800718e:	d158      	bne.n	8007242 <_scanf_float+0x412>
 8007190:	7035      	strb	r5, [r6, #0]
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800719c:	d11c      	bne.n	80071d8 <_scanf_float+0x3a8>
 800719e:	9b01      	ldr	r3, [sp, #4]
 80071a0:	454b      	cmp	r3, r9
 80071a2:	eba3 0209 	sub.w	r2, r3, r9
 80071a6:	d124      	bne.n	80071f2 <_scanf_float+0x3c2>
 80071a8:	2200      	movs	r2, #0
 80071aa:	4659      	mov	r1, fp
 80071ac:	4640      	mov	r0, r8
 80071ae:	f000 fe9d 	bl	8007eec <_strtod_r>
 80071b2:	9b03      	ldr	r3, [sp, #12]
 80071b4:	6821      	ldr	r1, [r4, #0]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f011 0f02 	tst.w	r1, #2
 80071bc:	ec57 6b10 	vmov	r6, r7, d0
 80071c0:	f103 0204 	add.w	r2, r3, #4
 80071c4:	d020      	beq.n	8007208 <_scanf_float+0x3d8>
 80071c6:	9903      	ldr	r1, [sp, #12]
 80071c8:	600a      	str	r2, [r1, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	e9c3 6700 	strd	r6, r7, [r3]
 80071d0:	68e3      	ldr	r3, [r4, #12]
 80071d2:	3301      	adds	r3, #1
 80071d4:	60e3      	str	r3, [r4, #12]
 80071d6:	e66c      	b.n	8006eb2 <_scanf_float+0x82>
 80071d8:	9b04      	ldr	r3, [sp, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d0e4      	beq.n	80071a8 <_scanf_float+0x378>
 80071de:	9905      	ldr	r1, [sp, #20]
 80071e0:	230a      	movs	r3, #10
 80071e2:	462a      	mov	r2, r5
 80071e4:	3101      	adds	r1, #1
 80071e6:	4640      	mov	r0, r8
 80071e8:	f000 ff0a 	bl	8008000 <_strtol_r>
 80071ec:	9b04      	ldr	r3, [sp, #16]
 80071ee:	9e05      	ldr	r6, [sp, #20]
 80071f0:	1ac2      	subs	r2, r0, r3
 80071f2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80071f6:	429e      	cmp	r6, r3
 80071f8:	bf28      	it	cs
 80071fa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80071fe:	4912      	ldr	r1, [pc, #72]	; (8007248 <_scanf_float+0x418>)
 8007200:	4630      	mov	r0, r6
 8007202:	f000 f82b 	bl	800725c <siprintf>
 8007206:	e7cf      	b.n	80071a8 <_scanf_float+0x378>
 8007208:	f011 0f04 	tst.w	r1, #4
 800720c:	9903      	ldr	r1, [sp, #12]
 800720e:	600a      	str	r2, [r1, #0]
 8007210:	d1db      	bne.n	80071ca <_scanf_float+0x39a>
 8007212:	f8d3 8000 	ldr.w	r8, [r3]
 8007216:	ee10 2a10 	vmov	r2, s0
 800721a:	ee10 0a10 	vmov	r0, s0
 800721e:	463b      	mov	r3, r7
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 fc8b 	bl	8000b3c <__aeabi_dcmpun>
 8007226:	b128      	cbz	r0, 8007234 <_scanf_float+0x404>
 8007228:	4808      	ldr	r0, [pc, #32]	; (800724c <_scanf_float+0x41c>)
 800722a:	f000 f811 	bl	8007250 <nanf>
 800722e:	ed88 0a00 	vstr	s0, [r8]
 8007232:	e7cd      	b.n	80071d0 <_scanf_float+0x3a0>
 8007234:	4630      	mov	r0, r6
 8007236:	4639      	mov	r1, r7
 8007238:	f7f9 fcde 	bl	8000bf8 <__aeabi_d2f>
 800723c:	f8c8 0000 	str.w	r0, [r8]
 8007240:	e7c6      	b.n	80071d0 <_scanf_float+0x3a0>
 8007242:	2500      	movs	r5, #0
 8007244:	e635      	b.n	8006eb2 <_scanf_float+0x82>
 8007246:	bf00      	nop
 8007248:	0800af00 	.word	0x0800af00
 800724c:	0800b318 	.word	0x0800b318

08007250 <nanf>:
 8007250:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007258 <nanf+0x8>
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	7fc00000 	.word	0x7fc00000

0800725c <siprintf>:
 800725c:	b40e      	push	{r1, r2, r3}
 800725e:	b500      	push	{lr}
 8007260:	b09c      	sub	sp, #112	; 0x70
 8007262:	ab1d      	add	r3, sp, #116	; 0x74
 8007264:	9002      	str	r0, [sp, #8]
 8007266:	9006      	str	r0, [sp, #24]
 8007268:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800726c:	4809      	ldr	r0, [pc, #36]	; (8007294 <siprintf+0x38>)
 800726e:	9107      	str	r1, [sp, #28]
 8007270:	9104      	str	r1, [sp, #16]
 8007272:	4909      	ldr	r1, [pc, #36]	; (8007298 <siprintf+0x3c>)
 8007274:	f853 2b04 	ldr.w	r2, [r3], #4
 8007278:	9105      	str	r1, [sp, #20]
 800727a:	6800      	ldr	r0, [r0, #0]
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	a902      	add	r1, sp, #8
 8007280:	f002 fe98 	bl	8009fb4 <_svfiprintf_r>
 8007284:	9b02      	ldr	r3, [sp, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	b01c      	add	sp, #112	; 0x70
 800728c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007290:	b003      	add	sp, #12
 8007292:	4770      	bx	lr
 8007294:	20000020 	.word	0x20000020
 8007298:	ffff0208 	.word	0xffff0208

0800729c <sulp>:
 800729c:	b570      	push	{r4, r5, r6, lr}
 800729e:	4604      	mov	r4, r0
 80072a0:	460d      	mov	r5, r1
 80072a2:	ec45 4b10 	vmov	d0, r4, r5
 80072a6:	4616      	mov	r6, r2
 80072a8:	f002 fc20 	bl	8009aec <__ulp>
 80072ac:	ec51 0b10 	vmov	r0, r1, d0
 80072b0:	b17e      	cbz	r6, 80072d2 <sulp+0x36>
 80072b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80072b6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	dd09      	ble.n	80072d2 <sulp+0x36>
 80072be:	051b      	lsls	r3, r3, #20
 80072c0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80072c4:	2400      	movs	r4, #0
 80072c6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80072ca:	4622      	mov	r2, r4
 80072cc:	462b      	mov	r3, r5
 80072ce:	f7f9 f99b 	bl	8000608 <__aeabi_dmul>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	0000      	movs	r0, r0
	...

080072d8 <_strtod_l>:
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072dc:	b0a3      	sub	sp, #140	; 0x8c
 80072de:	461f      	mov	r7, r3
 80072e0:	2300      	movs	r3, #0
 80072e2:	931e      	str	r3, [sp, #120]	; 0x78
 80072e4:	4ba4      	ldr	r3, [pc, #656]	; (8007578 <_strtod_l+0x2a0>)
 80072e6:	9219      	str	r2, [sp, #100]	; 0x64
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	9307      	str	r3, [sp, #28]
 80072ec:	4604      	mov	r4, r0
 80072ee:	4618      	mov	r0, r3
 80072f0:	4688      	mov	r8, r1
 80072f2:	f7f8 ff75 	bl	80001e0 <strlen>
 80072f6:	f04f 0a00 	mov.w	sl, #0
 80072fa:	4605      	mov	r5, r0
 80072fc:	f04f 0b00 	mov.w	fp, #0
 8007300:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007304:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007306:	781a      	ldrb	r2, [r3, #0]
 8007308:	2a2b      	cmp	r2, #43	; 0x2b
 800730a:	d04c      	beq.n	80073a6 <_strtod_l+0xce>
 800730c:	d839      	bhi.n	8007382 <_strtod_l+0xaa>
 800730e:	2a0d      	cmp	r2, #13
 8007310:	d832      	bhi.n	8007378 <_strtod_l+0xa0>
 8007312:	2a08      	cmp	r2, #8
 8007314:	d832      	bhi.n	800737c <_strtod_l+0xa4>
 8007316:	2a00      	cmp	r2, #0
 8007318:	d03c      	beq.n	8007394 <_strtod_l+0xbc>
 800731a:	2300      	movs	r3, #0
 800731c:	930e      	str	r3, [sp, #56]	; 0x38
 800731e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007320:	7833      	ldrb	r3, [r6, #0]
 8007322:	2b30      	cmp	r3, #48	; 0x30
 8007324:	f040 80b4 	bne.w	8007490 <_strtod_l+0x1b8>
 8007328:	7873      	ldrb	r3, [r6, #1]
 800732a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800732e:	2b58      	cmp	r3, #88	; 0x58
 8007330:	d16c      	bne.n	800740c <_strtod_l+0x134>
 8007332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	ab1e      	add	r3, sp, #120	; 0x78
 8007338:	9702      	str	r7, [sp, #8]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	4a8f      	ldr	r2, [pc, #572]	; (800757c <_strtod_l+0x2a4>)
 800733e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007340:	a91d      	add	r1, sp, #116	; 0x74
 8007342:	4620      	mov	r0, r4
 8007344:	f001 fd40 	bl	8008dc8 <__gethex>
 8007348:	f010 0707 	ands.w	r7, r0, #7
 800734c:	4605      	mov	r5, r0
 800734e:	d005      	beq.n	800735c <_strtod_l+0x84>
 8007350:	2f06      	cmp	r7, #6
 8007352:	d12a      	bne.n	80073aa <_strtod_l+0xd2>
 8007354:	3601      	adds	r6, #1
 8007356:	2300      	movs	r3, #0
 8007358:	961d      	str	r6, [sp, #116]	; 0x74
 800735a:	930e      	str	r3, [sp, #56]	; 0x38
 800735c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800735e:	2b00      	cmp	r3, #0
 8007360:	f040 8596 	bne.w	8007e90 <_strtod_l+0xbb8>
 8007364:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007366:	b1db      	cbz	r3, 80073a0 <_strtod_l+0xc8>
 8007368:	4652      	mov	r2, sl
 800736a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800736e:	ec43 2b10 	vmov	d0, r2, r3
 8007372:	b023      	add	sp, #140	; 0x8c
 8007374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007378:	2a20      	cmp	r2, #32
 800737a:	d1ce      	bne.n	800731a <_strtod_l+0x42>
 800737c:	3301      	adds	r3, #1
 800737e:	931d      	str	r3, [sp, #116]	; 0x74
 8007380:	e7c0      	b.n	8007304 <_strtod_l+0x2c>
 8007382:	2a2d      	cmp	r2, #45	; 0x2d
 8007384:	d1c9      	bne.n	800731a <_strtod_l+0x42>
 8007386:	2201      	movs	r2, #1
 8007388:	920e      	str	r2, [sp, #56]	; 0x38
 800738a:	1c5a      	adds	r2, r3, #1
 800738c:	921d      	str	r2, [sp, #116]	; 0x74
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d1c4      	bne.n	800731e <_strtod_l+0x46>
 8007394:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007396:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800739a:	2b00      	cmp	r3, #0
 800739c:	f040 8576 	bne.w	8007e8c <_strtod_l+0xbb4>
 80073a0:	4652      	mov	r2, sl
 80073a2:	465b      	mov	r3, fp
 80073a4:	e7e3      	b.n	800736e <_strtod_l+0x96>
 80073a6:	2200      	movs	r2, #0
 80073a8:	e7ee      	b.n	8007388 <_strtod_l+0xb0>
 80073aa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80073ac:	b13a      	cbz	r2, 80073be <_strtod_l+0xe6>
 80073ae:	2135      	movs	r1, #53	; 0x35
 80073b0:	a820      	add	r0, sp, #128	; 0x80
 80073b2:	f002 fca6 	bl	8009d02 <__copybits>
 80073b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80073b8:	4620      	mov	r0, r4
 80073ba:	f002 f86b 	bl	8009494 <_Bfree>
 80073be:	3f01      	subs	r7, #1
 80073c0:	2f05      	cmp	r7, #5
 80073c2:	d807      	bhi.n	80073d4 <_strtod_l+0xfc>
 80073c4:	e8df f007 	tbb	[pc, r7]
 80073c8:	1d180b0e 	.word	0x1d180b0e
 80073cc:	030e      	.short	0x030e
 80073ce:	f04f 0b00 	mov.w	fp, #0
 80073d2:	46da      	mov	sl, fp
 80073d4:	0728      	lsls	r0, r5, #28
 80073d6:	d5c1      	bpl.n	800735c <_strtod_l+0x84>
 80073d8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80073dc:	e7be      	b.n	800735c <_strtod_l+0x84>
 80073de:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80073e2:	e7f7      	b.n	80073d4 <_strtod_l+0xfc>
 80073e4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80073e8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80073ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80073f6:	e7ed      	b.n	80073d4 <_strtod_l+0xfc>
 80073f8:	f8df b184 	ldr.w	fp, [pc, #388]	; 8007580 <_strtod_l+0x2a8>
 80073fc:	f04f 0a00 	mov.w	sl, #0
 8007400:	e7e8      	b.n	80073d4 <_strtod_l+0xfc>
 8007402:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007406:	f04f 3aff 	mov.w	sl, #4294967295
 800740a:	e7e3      	b.n	80073d4 <_strtod_l+0xfc>
 800740c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800740e:	1c5a      	adds	r2, r3, #1
 8007410:	921d      	str	r2, [sp, #116]	; 0x74
 8007412:	785b      	ldrb	r3, [r3, #1]
 8007414:	2b30      	cmp	r3, #48	; 0x30
 8007416:	d0f9      	beq.n	800740c <_strtod_l+0x134>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d09f      	beq.n	800735c <_strtod_l+0x84>
 800741c:	2301      	movs	r3, #1
 800741e:	f04f 0900 	mov.w	r9, #0
 8007422:	9304      	str	r3, [sp, #16]
 8007424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007426:	930a      	str	r3, [sp, #40]	; 0x28
 8007428:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800742c:	464f      	mov	r7, r9
 800742e:	220a      	movs	r2, #10
 8007430:	981d      	ldr	r0, [sp, #116]	; 0x74
 8007432:	7806      	ldrb	r6, [r0, #0]
 8007434:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007438:	b2d9      	uxtb	r1, r3
 800743a:	2909      	cmp	r1, #9
 800743c:	d92a      	bls.n	8007494 <_strtod_l+0x1bc>
 800743e:	9907      	ldr	r1, [sp, #28]
 8007440:	462a      	mov	r2, r5
 8007442:	f002 fed1 	bl	800a1e8 <strncmp>
 8007446:	b398      	cbz	r0, 80074b0 <_strtod_l+0x1d8>
 8007448:	2000      	movs	r0, #0
 800744a:	4633      	mov	r3, r6
 800744c:	463d      	mov	r5, r7
 800744e:	9007      	str	r0, [sp, #28]
 8007450:	4602      	mov	r2, r0
 8007452:	2b65      	cmp	r3, #101	; 0x65
 8007454:	d001      	beq.n	800745a <_strtod_l+0x182>
 8007456:	2b45      	cmp	r3, #69	; 0x45
 8007458:	d118      	bne.n	800748c <_strtod_l+0x1b4>
 800745a:	b91d      	cbnz	r5, 8007464 <_strtod_l+0x18c>
 800745c:	9b04      	ldr	r3, [sp, #16]
 800745e:	4303      	orrs	r3, r0
 8007460:	d098      	beq.n	8007394 <_strtod_l+0xbc>
 8007462:	2500      	movs	r5, #0
 8007464:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8007468:	f108 0301 	add.w	r3, r8, #1
 800746c:	931d      	str	r3, [sp, #116]	; 0x74
 800746e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007472:	2b2b      	cmp	r3, #43	; 0x2b
 8007474:	d075      	beq.n	8007562 <_strtod_l+0x28a>
 8007476:	2b2d      	cmp	r3, #45	; 0x2d
 8007478:	d07b      	beq.n	8007572 <_strtod_l+0x29a>
 800747a:	f04f 0c00 	mov.w	ip, #0
 800747e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007482:	2909      	cmp	r1, #9
 8007484:	f240 8082 	bls.w	800758c <_strtod_l+0x2b4>
 8007488:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800748c:	2600      	movs	r6, #0
 800748e:	e09d      	b.n	80075cc <_strtod_l+0x2f4>
 8007490:	2300      	movs	r3, #0
 8007492:	e7c4      	b.n	800741e <_strtod_l+0x146>
 8007494:	2f08      	cmp	r7, #8
 8007496:	bfd8      	it	le
 8007498:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800749a:	f100 0001 	add.w	r0, r0, #1
 800749e:	bfda      	itte	le
 80074a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80074a4:	9309      	strle	r3, [sp, #36]	; 0x24
 80074a6:	fb02 3909 	mlagt	r9, r2, r9, r3
 80074aa:	3701      	adds	r7, #1
 80074ac:	901d      	str	r0, [sp, #116]	; 0x74
 80074ae:	e7bf      	b.n	8007430 <_strtod_l+0x158>
 80074b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074b2:	195a      	adds	r2, r3, r5
 80074b4:	921d      	str	r2, [sp, #116]	; 0x74
 80074b6:	5d5b      	ldrb	r3, [r3, r5]
 80074b8:	2f00      	cmp	r7, #0
 80074ba:	d037      	beq.n	800752c <_strtod_l+0x254>
 80074bc:	9007      	str	r0, [sp, #28]
 80074be:	463d      	mov	r5, r7
 80074c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80074c4:	2a09      	cmp	r2, #9
 80074c6:	d912      	bls.n	80074ee <_strtod_l+0x216>
 80074c8:	2201      	movs	r2, #1
 80074ca:	e7c2      	b.n	8007452 <_strtod_l+0x17a>
 80074cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074ce:	1c5a      	adds	r2, r3, #1
 80074d0:	921d      	str	r2, [sp, #116]	; 0x74
 80074d2:	785b      	ldrb	r3, [r3, #1]
 80074d4:	3001      	adds	r0, #1
 80074d6:	2b30      	cmp	r3, #48	; 0x30
 80074d8:	d0f8      	beq.n	80074cc <_strtod_l+0x1f4>
 80074da:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80074de:	2a08      	cmp	r2, #8
 80074e0:	f200 84db 	bhi.w	8007e9a <_strtod_l+0xbc2>
 80074e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80074e6:	9007      	str	r0, [sp, #28]
 80074e8:	2000      	movs	r0, #0
 80074ea:	920a      	str	r2, [sp, #40]	; 0x28
 80074ec:	4605      	mov	r5, r0
 80074ee:	3b30      	subs	r3, #48	; 0x30
 80074f0:	f100 0201 	add.w	r2, r0, #1
 80074f4:	d014      	beq.n	8007520 <_strtod_l+0x248>
 80074f6:	9907      	ldr	r1, [sp, #28]
 80074f8:	4411      	add	r1, r2
 80074fa:	9107      	str	r1, [sp, #28]
 80074fc:	462a      	mov	r2, r5
 80074fe:	eb00 0e05 	add.w	lr, r0, r5
 8007502:	210a      	movs	r1, #10
 8007504:	4572      	cmp	r2, lr
 8007506:	d113      	bne.n	8007530 <_strtod_l+0x258>
 8007508:	182a      	adds	r2, r5, r0
 800750a:	2a08      	cmp	r2, #8
 800750c:	f105 0501 	add.w	r5, r5, #1
 8007510:	4405      	add	r5, r0
 8007512:	dc1c      	bgt.n	800754e <_strtod_l+0x276>
 8007514:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007516:	220a      	movs	r2, #10
 8007518:	fb02 3301 	mla	r3, r2, r1, r3
 800751c:	9309      	str	r3, [sp, #36]	; 0x24
 800751e:	2200      	movs	r2, #0
 8007520:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007522:	1c59      	adds	r1, r3, #1
 8007524:	911d      	str	r1, [sp, #116]	; 0x74
 8007526:	785b      	ldrb	r3, [r3, #1]
 8007528:	4610      	mov	r0, r2
 800752a:	e7c9      	b.n	80074c0 <_strtod_l+0x1e8>
 800752c:	4638      	mov	r0, r7
 800752e:	e7d2      	b.n	80074d6 <_strtod_l+0x1fe>
 8007530:	2a08      	cmp	r2, #8
 8007532:	dc04      	bgt.n	800753e <_strtod_l+0x266>
 8007534:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007536:	434e      	muls	r6, r1
 8007538:	9609      	str	r6, [sp, #36]	; 0x24
 800753a:	3201      	adds	r2, #1
 800753c:	e7e2      	b.n	8007504 <_strtod_l+0x22c>
 800753e:	f102 0c01 	add.w	ip, r2, #1
 8007542:	f1bc 0f10 	cmp.w	ip, #16
 8007546:	bfd8      	it	le
 8007548:	fb01 f909 	mulle.w	r9, r1, r9
 800754c:	e7f5      	b.n	800753a <_strtod_l+0x262>
 800754e:	2d10      	cmp	r5, #16
 8007550:	bfdc      	itt	le
 8007552:	220a      	movle	r2, #10
 8007554:	fb02 3909 	mlale	r9, r2, r9, r3
 8007558:	e7e1      	b.n	800751e <_strtod_l+0x246>
 800755a:	2300      	movs	r3, #0
 800755c:	9307      	str	r3, [sp, #28]
 800755e:	2201      	movs	r2, #1
 8007560:	e77c      	b.n	800745c <_strtod_l+0x184>
 8007562:	f04f 0c00 	mov.w	ip, #0
 8007566:	f108 0302 	add.w	r3, r8, #2
 800756a:	931d      	str	r3, [sp, #116]	; 0x74
 800756c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8007570:	e785      	b.n	800747e <_strtod_l+0x1a6>
 8007572:	f04f 0c01 	mov.w	ip, #1
 8007576:	e7f6      	b.n	8007566 <_strtod_l+0x28e>
 8007578:	0800b158 	.word	0x0800b158
 800757c:	0800af08 	.word	0x0800af08
 8007580:	7ff00000 	.word	0x7ff00000
 8007584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007586:	1c59      	adds	r1, r3, #1
 8007588:	911d      	str	r1, [sp, #116]	; 0x74
 800758a:	785b      	ldrb	r3, [r3, #1]
 800758c:	2b30      	cmp	r3, #48	; 0x30
 800758e:	d0f9      	beq.n	8007584 <_strtod_l+0x2ac>
 8007590:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8007594:	2908      	cmp	r1, #8
 8007596:	f63f af79 	bhi.w	800748c <_strtod_l+0x1b4>
 800759a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800759e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075a0:	9308      	str	r3, [sp, #32]
 80075a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075a4:	1c59      	adds	r1, r3, #1
 80075a6:	911d      	str	r1, [sp, #116]	; 0x74
 80075a8:	785b      	ldrb	r3, [r3, #1]
 80075aa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80075ae:	2e09      	cmp	r6, #9
 80075b0:	d937      	bls.n	8007622 <_strtod_l+0x34a>
 80075b2:	9e08      	ldr	r6, [sp, #32]
 80075b4:	1b89      	subs	r1, r1, r6
 80075b6:	2908      	cmp	r1, #8
 80075b8:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80075bc:	dc02      	bgt.n	80075c4 <_strtod_l+0x2ec>
 80075be:	4576      	cmp	r6, lr
 80075c0:	bfa8      	it	ge
 80075c2:	4676      	movge	r6, lr
 80075c4:	f1bc 0f00 	cmp.w	ip, #0
 80075c8:	d000      	beq.n	80075cc <_strtod_l+0x2f4>
 80075ca:	4276      	negs	r6, r6
 80075cc:	2d00      	cmp	r5, #0
 80075ce:	d14f      	bne.n	8007670 <_strtod_l+0x398>
 80075d0:	9904      	ldr	r1, [sp, #16]
 80075d2:	4301      	orrs	r1, r0
 80075d4:	f47f aec2 	bne.w	800735c <_strtod_l+0x84>
 80075d8:	2a00      	cmp	r2, #0
 80075da:	f47f aedb 	bne.w	8007394 <_strtod_l+0xbc>
 80075de:	2b69      	cmp	r3, #105	; 0x69
 80075e0:	d027      	beq.n	8007632 <_strtod_l+0x35a>
 80075e2:	dc24      	bgt.n	800762e <_strtod_l+0x356>
 80075e4:	2b49      	cmp	r3, #73	; 0x49
 80075e6:	d024      	beq.n	8007632 <_strtod_l+0x35a>
 80075e8:	2b4e      	cmp	r3, #78	; 0x4e
 80075ea:	f47f aed3 	bne.w	8007394 <_strtod_l+0xbc>
 80075ee:	499e      	ldr	r1, [pc, #632]	; (8007868 <_strtod_l+0x590>)
 80075f0:	a81d      	add	r0, sp, #116	; 0x74
 80075f2:	f001 fe41 	bl	8009278 <__match>
 80075f6:	2800      	cmp	r0, #0
 80075f8:	f43f aecc 	beq.w	8007394 <_strtod_l+0xbc>
 80075fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b28      	cmp	r3, #40	; 0x28
 8007602:	d12d      	bne.n	8007660 <_strtod_l+0x388>
 8007604:	4999      	ldr	r1, [pc, #612]	; (800786c <_strtod_l+0x594>)
 8007606:	aa20      	add	r2, sp, #128	; 0x80
 8007608:	a81d      	add	r0, sp, #116	; 0x74
 800760a:	f001 fe49 	bl	80092a0 <__hexnan>
 800760e:	2805      	cmp	r0, #5
 8007610:	d126      	bne.n	8007660 <_strtod_l+0x388>
 8007612:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007614:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8007618:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800761c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007620:	e69c      	b.n	800735c <_strtod_l+0x84>
 8007622:	210a      	movs	r1, #10
 8007624:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007628:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800762c:	e7b9      	b.n	80075a2 <_strtod_l+0x2ca>
 800762e:	2b6e      	cmp	r3, #110	; 0x6e
 8007630:	e7db      	b.n	80075ea <_strtod_l+0x312>
 8007632:	498f      	ldr	r1, [pc, #572]	; (8007870 <_strtod_l+0x598>)
 8007634:	a81d      	add	r0, sp, #116	; 0x74
 8007636:	f001 fe1f 	bl	8009278 <__match>
 800763a:	2800      	cmp	r0, #0
 800763c:	f43f aeaa 	beq.w	8007394 <_strtod_l+0xbc>
 8007640:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007642:	498c      	ldr	r1, [pc, #560]	; (8007874 <_strtod_l+0x59c>)
 8007644:	3b01      	subs	r3, #1
 8007646:	a81d      	add	r0, sp, #116	; 0x74
 8007648:	931d      	str	r3, [sp, #116]	; 0x74
 800764a:	f001 fe15 	bl	8009278 <__match>
 800764e:	b910      	cbnz	r0, 8007656 <_strtod_l+0x37e>
 8007650:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007652:	3301      	adds	r3, #1
 8007654:	931d      	str	r3, [sp, #116]	; 0x74
 8007656:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007884 <_strtod_l+0x5ac>
 800765a:	f04f 0a00 	mov.w	sl, #0
 800765e:	e67d      	b.n	800735c <_strtod_l+0x84>
 8007660:	4885      	ldr	r0, [pc, #532]	; (8007878 <_strtod_l+0x5a0>)
 8007662:	f002 fda9 	bl	800a1b8 <nan>
 8007666:	ed8d 0b04 	vstr	d0, [sp, #16]
 800766a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800766e:	e675      	b.n	800735c <_strtod_l+0x84>
 8007670:	9b07      	ldr	r3, [sp, #28]
 8007672:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007674:	1af3      	subs	r3, r6, r3
 8007676:	2f00      	cmp	r7, #0
 8007678:	bf08      	it	eq
 800767a:	462f      	moveq	r7, r5
 800767c:	2d10      	cmp	r5, #16
 800767e:	9308      	str	r3, [sp, #32]
 8007680:	46a8      	mov	r8, r5
 8007682:	bfa8      	it	ge
 8007684:	f04f 0810 	movge.w	r8, #16
 8007688:	f7f8 ff44 	bl	8000514 <__aeabi_ui2d>
 800768c:	2d09      	cmp	r5, #9
 800768e:	4682      	mov	sl, r0
 8007690:	468b      	mov	fp, r1
 8007692:	dd13      	ble.n	80076bc <_strtod_l+0x3e4>
 8007694:	4b79      	ldr	r3, [pc, #484]	; (800787c <_strtod_l+0x5a4>)
 8007696:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800769a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800769e:	f7f8 ffb3 	bl	8000608 <__aeabi_dmul>
 80076a2:	4682      	mov	sl, r0
 80076a4:	4648      	mov	r0, r9
 80076a6:	468b      	mov	fp, r1
 80076a8:	f7f8 ff34 	bl	8000514 <__aeabi_ui2d>
 80076ac:	4602      	mov	r2, r0
 80076ae:	460b      	mov	r3, r1
 80076b0:	4650      	mov	r0, sl
 80076b2:	4659      	mov	r1, fp
 80076b4:	f7f8 fdf2 	bl	800029c <__adddf3>
 80076b8:	4682      	mov	sl, r0
 80076ba:	468b      	mov	fp, r1
 80076bc:	2d0f      	cmp	r5, #15
 80076be:	dc38      	bgt.n	8007732 <_strtod_l+0x45a>
 80076c0:	9b08      	ldr	r3, [sp, #32]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	f43f ae4a 	beq.w	800735c <_strtod_l+0x84>
 80076c8:	dd24      	ble.n	8007714 <_strtod_l+0x43c>
 80076ca:	2b16      	cmp	r3, #22
 80076cc:	dc0b      	bgt.n	80076e6 <_strtod_l+0x40e>
 80076ce:	4d6b      	ldr	r5, [pc, #428]	; (800787c <_strtod_l+0x5a4>)
 80076d0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80076d4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80076d8:	4652      	mov	r2, sl
 80076da:	465b      	mov	r3, fp
 80076dc:	f7f8 ff94 	bl	8000608 <__aeabi_dmul>
 80076e0:	4682      	mov	sl, r0
 80076e2:	468b      	mov	fp, r1
 80076e4:	e63a      	b.n	800735c <_strtod_l+0x84>
 80076e6:	9a08      	ldr	r2, [sp, #32]
 80076e8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80076ec:	4293      	cmp	r3, r2
 80076ee:	db20      	blt.n	8007732 <_strtod_l+0x45a>
 80076f0:	4c62      	ldr	r4, [pc, #392]	; (800787c <_strtod_l+0x5a4>)
 80076f2:	f1c5 050f 	rsb	r5, r5, #15
 80076f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80076fa:	4652      	mov	r2, sl
 80076fc:	465b      	mov	r3, fp
 80076fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007702:	f7f8 ff81 	bl	8000608 <__aeabi_dmul>
 8007706:	9b08      	ldr	r3, [sp, #32]
 8007708:	1b5d      	subs	r5, r3, r5
 800770a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800770e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007712:	e7e3      	b.n	80076dc <_strtod_l+0x404>
 8007714:	9b08      	ldr	r3, [sp, #32]
 8007716:	3316      	adds	r3, #22
 8007718:	db0b      	blt.n	8007732 <_strtod_l+0x45a>
 800771a:	9b07      	ldr	r3, [sp, #28]
 800771c:	4a57      	ldr	r2, [pc, #348]	; (800787c <_strtod_l+0x5a4>)
 800771e:	1b9e      	subs	r6, r3, r6
 8007720:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007724:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007728:	4650      	mov	r0, sl
 800772a:	4659      	mov	r1, fp
 800772c:	f7f9 f896 	bl	800085c <__aeabi_ddiv>
 8007730:	e7d6      	b.n	80076e0 <_strtod_l+0x408>
 8007732:	9b08      	ldr	r3, [sp, #32]
 8007734:	eba5 0808 	sub.w	r8, r5, r8
 8007738:	4498      	add	r8, r3
 800773a:	f1b8 0f00 	cmp.w	r8, #0
 800773e:	dd71      	ble.n	8007824 <_strtod_l+0x54c>
 8007740:	f018 030f 	ands.w	r3, r8, #15
 8007744:	d00a      	beq.n	800775c <_strtod_l+0x484>
 8007746:	494d      	ldr	r1, [pc, #308]	; (800787c <_strtod_l+0x5a4>)
 8007748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800774c:	4652      	mov	r2, sl
 800774e:	465b      	mov	r3, fp
 8007750:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007754:	f7f8 ff58 	bl	8000608 <__aeabi_dmul>
 8007758:	4682      	mov	sl, r0
 800775a:	468b      	mov	fp, r1
 800775c:	f038 080f 	bics.w	r8, r8, #15
 8007760:	d04d      	beq.n	80077fe <_strtod_l+0x526>
 8007762:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007766:	dd22      	ble.n	80077ae <_strtod_l+0x4d6>
 8007768:	2500      	movs	r5, #0
 800776a:	462e      	mov	r6, r5
 800776c:	9509      	str	r5, [sp, #36]	; 0x24
 800776e:	9507      	str	r5, [sp, #28]
 8007770:	2322      	movs	r3, #34	; 0x22
 8007772:	f8df b110 	ldr.w	fp, [pc, #272]	; 8007884 <_strtod_l+0x5ac>
 8007776:	6023      	str	r3, [r4, #0]
 8007778:	f04f 0a00 	mov.w	sl, #0
 800777c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777e:	2b00      	cmp	r3, #0
 8007780:	f43f adec 	beq.w	800735c <_strtod_l+0x84>
 8007784:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007786:	4620      	mov	r0, r4
 8007788:	f001 fe84 	bl	8009494 <_Bfree>
 800778c:	9907      	ldr	r1, [sp, #28]
 800778e:	4620      	mov	r0, r4
 8007790:	f001 fe80 	bl	8009494 <_Bfree>
 8007794:	4631      	mov	r1, r6
 8007796:	4620      	mov	r0, r4
 8007798:	f001 fe7c 	bl	8009494 <_Bfree>
 800779c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800779e:	4620      	mov	r0, r4
 80077a0:	f001 fe78 	bl	8009494 <_Bfree>
 80077a4:	4629      	mov	r1, r5
 80077a6:	4620      	mov	r0, r4
 80077a8:	f001 fe74 	bl	8009494 <_Bfree>
 80077ac:	e5d6      	b.n	800735c <_strtod_l+0x84>
 80077ae:	2300      	movs	r3, #0
 80077b0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80077b4:	4650      	mov	r0, sl
 80077b6:	4659      	mov	r1, fp
 80077b8:	4699      	mov	r9, r3
 80077ba:	f1b8 0f01 	cmp.w	r8, #1
 80077be:	dc21      	bgt.n	8007804 <_strtod_l+0x52c>
 80077c0:	b10b      	cbz	r3, 80077c6 <_strtod_l+0x4ee>
 80077c2:	4682      	mov	sl, r0
 80077c4:	468b      	mov	fp, r1
 80077c6:	4b2e      	ldr	r3, [pc, #184]	; (8007880 <_strtod_l+0x5a8>)
 80077c8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80077cc:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80077d0:	4652      	mov	r2, sl
 80077d2:	465b      	mov	r3, fp
 80077d4:	e9d9 0100 	ldrd	r0, r1, [r9]
 80077d8:	f7f8 ff16 	bl	8000608 <__aeabi_dmul>
 80077dc:	4b29      	ldr	r3, [pc, #164]	; (8007884 <_strtod_l+0x5ac>)
 80077de:	460a      	mov	r2, r1
 80077e0:	400b      	ands	r3, r1
 80077e2:	4929      	ldr	r1, [pc, #164]	; (8007888 <_strtod_l+0x5b0>)
 80077e4:	428b      	cmp	r3, r1
 80077e6:	4682      	mov	sl, r0
 80077e8:	d8be      	bhi.n	8007768 <_strtod_l+0x490>
 80077ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80077ee:	428b      	cmp	r3, r1
 80077f0:	bf86      	itte	hi
 80077f2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800788c <_strtod_l+0x5b4>
 80077f6:	f04f 3aff 	movhi.w	sl, #4294967295
 80077fa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80077fe:	2300      	movs	r3, #0
 8007800:	9304      	str	r3, [sp, #16]
 8007802:	e081      	b.n	8007908 <_strtod_l+0x630>
 8007804:	f018 0f01 	tst.w	r8, #1
 8007808:	d007      	beq.n	800781a <_strtod_l+0x542>
 800780a:	4b1d      	ldr	r3, [pc, #116]	; (8007880 <_strtod_l+0x5a8>)
 800780c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	f7f8 fef8 	bl	8000608 <__aeabi_dmul>
 8007818:	2301      	movs	r3, #1
 800781a:	f109 0901 	add.w	r9, r9, #1
 800781e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007822:	e7ca      	b.n	80077ba <_strtod_l+0x4e2>
 8007824:	d0eb      	beq.n	80077fe <_strtod_l+0x526>
 8007826:	f1c8 0800 	rsb	r8, r8, #0
 800782a:	f018 020f 	ands.w	r2, r8, #15
 800782e:	d00a      	beq.n	8007846 <_strtod_l+0x56e>
 8007830:	4b12      	ldr	r3, [pc, #72]	; (800787c <_strtod_l+0x5a4>)
 8007832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007836:	4650      	mov	r0, sl
 8007838:	4659      	mov	r1, fp
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f9 f80d 	bl	800085c <__aeabi_ddiv>
 8007842:	4682      	mov	sl, r0
 8007844:	468b      	mov	fp, r1
 8007846:	ea5f 1828 	movs.w	r8, r8, asr #4
 800784a:	d0d8      	beq.n	80077fe <_strtod_l+0x526>
 800784c:	f1b8 0f1f 	cmp.w	r8, #31
 8007850:	dd1e      	ble.n	8007890 <_strtod_l+0x5b8>
 8007852:	2500      	movs	r5, #0
 8007854:	462e      	mov	r6, r5
 8007856:	9509      	str	r5, [sp, #36]	; 0x24
 8007858:	9507      	str	r5, [sp, #28]
 800785a:	2322      	movs	r3, #34	; 0x22
 800785c:	f04f 0a00 	mov.w	sl, #0
 8007860:	f04f 0b00 	mov.w	fp, #0
 8007864:	6023      	str	r3, [r4, #0]
 8007866:	e789      	b.n	800777c <_strtod_l+0x4a4>
 8007868:	0800aed9 	.word	0x0800aed9
 800786c:	0800af1c 	.word	0x0800af1c
 8007870:	0800aed1 	.word	0x0800aed1
 8007874:	0800b05c 	.word	0x0800b05c
 8007878:	0800b318 	.word	0x0800b318
 800787c:	0800b1f8 	.word	0x0800b1f8
 8007880:	0800b1d0 	.word	0x0800b1d0
 8007884:	7ff00000 	.word	0x7ff00000
 8007888:	7ca00000 	.word	0x7ca00000
 800788c:	7fefffff 	.word	0x7fefffff
 8007890:	f018 0310 	ands.w	r3, r8, #16
 8007894:	bf18      	it	ne
 8007896:	236a      	movne	r3, #106	; 0x6a
 8007898:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8007c50 <_strtod_l+0x978>
 800789c:	9304      	str	r3, [sp, #16]
 800789e:	4650      	mov	r0, sl
 80078a0:	4659      	mov	r1, fp
 80078a2:	2300      	movs	r3, #0
 80078a4:	f018 0f01 	tst.w	r8, #1
 80078a8:	d004      	beq.n	80078b4 <_strtod_l+0x5dc>
 80078aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80078ae:	f7f8 feab 	bl	8000608 <__aeabi_dmul>
 80078b2:	2301      	movs	r3, #1
 80078b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80078b8:	f109 0908 	add.w	r9, r9, #8
 80078bc:	d1f2      	bne.n	80078a4 <_strtod_l+0x5cc>
 80078be:	b10b      	cbz	r3, 80078c4 <_strtod_l+0x5ec>
 80078c0:	4682      	mov	sl, r0
 80078c2:	468b      	mov	fp, r1
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	b1bb      	cbz	r3, 80078f8 <_strtod_l+0x620>
 80078c8:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80078cc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	4659      	mov	r1, fp
 80078d4:	dd10      	ble.n	80078f8 <_strtod_l+0x620>
 80078d6:	2b1f      	cmp	r3, #31
 80078d8:	f340 8128 	ble.w	8007b2c <_strtod_l+0x854>
 80078dc:	2b34      	cmp	r3, #52	; 0x34
 80078de:	bfde      	ittt	le
 80078e0:	3b20      	suble	r3, #32
 80078e2:	f04f 32ff 	movle.w	r2, #4294967295
 80078e6:	fa02 f303 	lslle.w	r3, r2, r3
 80078ea:	f04f 0a00 	mov.w	sl, #0
 80078ee:	bfcc      	ite	gt
 80078f0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80078f4:	ea03 0b01 	andle.w	fp, r3, r1
 80078f8:	2200      	movs	r2, #0
 80078fa:	2300      	movs	r3, #0
 80078fc:	4650      	mov	r0, sl
 80078fe:	4659      	mov	r1, fp
 8007900:	f7f9 f8ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8007904:	2800      	cmp	r0, #0
 8007906:	d1a4      	bne.n	8007852 <_strtod_l+0x57a>
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800790e:	462b      	mov	r3, r5
 8007910:	463a      	mov	r2, r7
 8007912:	4620      	mov	r0, r4
 8007914:	f001 fe2a 	bl	800956c <__s2b>
 8007918:	9009      	str	r0, [sp, #36]	; 0x24
 800791a:	2800      	cmp	r0, #0
 800791c:	f43f af24 	beq.w	8007768 <_strtod_l+0x490>
 8007920:	9b07      	ldr	r3, [sp, #28]
 8007922:	1b9e      	subs	r6, r3, r6
 8007924:	9b08      	ldr	r3, [sp, #32]
 8007926:	2b00      	cmp	r3, #0
 8007928:	bfb4      	ite	lt
 800792a:	4633      	movlt	r3, r6
 800792c:	2300      	movge	r3, #0
 800792e:	9310      	str	r3, [sp, #64]	; 0x40
 8007930:	9b08      	ldr	r3, [sp, #32]
 8007932:	2500      	movs	r5, #0
 8007934:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007938:	9318      	str	r3, [sp, #96]	; 0x60
 800793a:	462e      	mov	r6, r5
 800793c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800793e:	4620      	mov	r0, r4
 8007940:	6859      	ldr	r1, [r3, #4]
 8007942:	f001 fd67 	bl	8009414 <_Balloc>
 8007946:	9007      	str	r0, [sp, #28]
 8007948:	2800      	cmp	r0, #0
 800794a:	f43f af11 	beq.w	8007770 <_strtod_l+0x498>
 800794e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007950:	691a      	ldr	r2, [r3, #16]
 8007952:	3202      	adds	r2, #2
 8007954:	f103 010c 	add.w	r1, r3, #12
 8007958:	0092      	lsls	r2, r2, #2
 800795a:	300c      	adds	r0, #12
 800795c:	f7fe fde8 	bl	8006530 <memcpy>
 8007960:	ec4b ab10 	vmov	d0, sl, fp
 8007964:	aa20      	add	r2, sp, #128	; 0x80
 8007966:	a91f      	add	r1, sp, #124	; 0x7c
 8007968:	4620      	mov	r0, r4
 800796a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800796e:	f002 f939 	bl	8009be4 <__d2b>
 8007972:	901e      	str	r0, [sp, #120]	; 0x78
 8007974:	2800      	cmp	r0, #0
 8007976:	f43f aefb 	beq.w	8007770 <_strtod_l+0x498>
 800797a:	2101      	movs	r1, #1
 800797c:	4620      	mov	r0, r4
 800797e:	f001 fe8f 	bl	80096a0 <__i2b>
 8007982:	4606      	mov	r6, r0
 8007984:	2800      	cmp	r0, #0
 8007986:	f43f aef3 	beq.w	8007770 <_strtod_l+0x498>
 800798a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800798c:	9904      	ldr	r1, [sp, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	bfab      	itete	ge
 8007992:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8007994:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8007996:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8007998:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800799c:	bfac      	ite	ge
 800799e:	eb03 0902 	addge.w	r9, r3, r2
 80079a2:	1ad7      	sublt	r7, r2, r3
 80079a4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079a6:	eba3 0801 	sub.w	r8, r3, r1
 80079aa:	4490      	add	r8, r2
 80079ac:	4ba3      	ldr	r3, [pc, #652]	; (8007c3c <_strtod_l+0x964>)
 80079ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80079b2:	4598      	cmp	r8, r3
 80079b4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80079b8:	f280 80cc 	bge.w	8007b54 <_strtod_l+0x87c>
 80079bc:	eba3 0308 	sub.w	r3, r3, r8
 80079c0:	2b1f      	cmp	r3, #31
 80079c2:	eba2 0203 	sub.w	r2, r2, r3
 80079c6:	f04f 0101 	mov.w	r1, #1
 80079ca:	f300 80b6 	bgt.w	8007b3a <_strtod_l+0x862>
 80079ce:	fa01 f303 	lsl.w	r3, r1, r3
 80079d2:	9311      	str	r3, [sp, #68]	; 0x44
 80079d4:	2300      	movs	r3, #0
 80079d6:	930c      	str	r3, [sp, #48]	; 0x30
 80079d8:	eb09 0802 	add.w	r8, r9, r2
 80079dc:	9b04      	ldr	r3, [sp, #16]
 80079de:	45c1      	cmp	r9, r8
 80079e0:	4417      	add	r7, r2
 80079e2:	441f      	add	r7, r3
 80079e4:	464b      	mov	r3, r9
 80079e6:	bfa8      	it	ge
 80079e8:	4643      	movge	r3, r8
 80079ea:	42bb      	cmp	r3, r7
 80079ec:	bfa8      	it	ge
 80079ee:	463b      	movge	r3, r7
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	bfc2      	ittt	gt
 80079f4:	eba8 0803 	subgt.w	r8, r8, r3
 80079f8:	1aff      	subgt	r7, r7, r3
 80079fa:	eba9 0903 	subgt.w	r9, r9, r3
 80079fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	dd17      	ble.n	8007a34 <_strtod_l+0x75c>
 8007a04:	4631      	mov	r1, r6
 8007a06:	461a      	mov	r2, r3
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f001 ff05 	bl	8009818 <__pow5mult>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	2800      	cmp	r0, #0
 8007a12:	f43f aead 	beq.w	8007770 <_strtod_l+0x498>
 8007a16:	4601      	mov	r1, r0
 8007a18:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f001 fe56 	bl	80096cc <__multiply>
 8007a20:	900f      	str	r0, [sp, #60]	; 0x3c
 8007a22:	2800      	cmp	r0, #0
 8007a24:	f43f aea4 	beq.w	8007770 <_strtod_l+0x498>
 8007a28:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f001 fd32 	bl	8009494 <_Bfree>
 8007a30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a32:	931e      	str	r3, [sp, #120]	; 0x78
 8007a34:	f1b8 0f00 	cmp.w	r8, #0
 8007a38:	f300 8091 	bgt.w	8007b5e <_strtod_l+0x886>
 8007a3c:	9b08      	ldr	r3, [sp, #32]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	dd08      	ble.n	8007a54 <_strtod_l+0x77c>
 8007a42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a44:	9907      	ldr	r1, [sp, #28]
 8007a46:	4620      	mov	r0, r4
 8007a48:	f001 fee6 	bl	8009818 <__pow5mult>
 8007a4c:	9007      	str	r0, [sp, #28]
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	f43f ae8e 	beq.w	8007770 <_strtod_l+0x498>
 8007a54:	2f00      	cmp	r7, #0
 8007a56:	dd08      	ble.n	8007a6a <_strtod_l+0x792>
 8007a58:	9907      	ldr	r1, [sp, #28]
 8007a5a:	463a      	mov	r2, r7
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f001 ff35 	bl	80098cc <__lshift>
 8007a62:	9007      	str	r0, [sp, #28]
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f43f ae83 	beq.w	8007770 <_strtod_l+0x498>
 8007a6a:	f1b9 0f00 	cmp.w	r9, #0
 8007a6e:	dd08      	ble.n	8007a82 <_strtod_l+0x7aa>
 8007a70:	4631      	mov	r1, r6
 8007a72:	464a      	mov	r2, r9
 8007a74:	4620      	mov	r0, r4
 8007a76:	f001 ff29 	bl	80098cc <__lshift>
 8007a7a:	4606      	mov	r6, r0
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	f43f ae77 	beq.w	8007770 <_strtod_l+0x498>
 8007a82:	9a07      	ldr	r2, [sp, #28]
 8007a84:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007a86:	4620      	mov	r0, r4
 8007a88:	f001 ffa8 	bl	80099dc <__mdiff>
 8007a8c:	4605      	mov	r5, r0
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f ae6e 	beq.w	8007770 <_strtod_l+0x498>
 8007a94:	68c3      	ldr	r3, [r0, #12]
 8007a96:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60c3      	str	r3, [r0, #12]
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	f001 ff81 	bl	80099a4 <__mcmp>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	da65      	bge.n	8007b72 <_strtod_l+0x89a>
 8007aa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aa8:	ea53 030a 	orrs.w	r3, r3, sl
 8007aac:	f040 8087 	bne.w	8007bbe <_strtod_l+0x8e6>
 8007ab0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f040 8082 	bne.w	8007bbe <_strtod_l+0x8e6>
 8007aba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007abe:	0d1b      	lsrs	r3, r3, #20
 8007ac0:	051b      	lsls	r3, r3, #20
 8007ac2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007ac6:	d97a      	bls.n	8007bbe <_strtod_l+0x8e6>
 8007ac8:	696b      	ldr	r3, [r5, #20]
 8007aca:	b913      	cbnz	r3, 8007ad2 <_strtod_l+0x7fa>
 8007acc:	692b      	ldr	r3, [r5, #16]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	dd75      	ble.n	8007bbe <_strtod_l+0x8e6>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	f001 fef8 	bl	80098cc <__lshift>
 8007adc:	4631      	mov	r1, r6
 8007ade:	4605      	mov	r5, r0
 8007ae0:	f001 ff60 	bl	80099a4 <__mcmp>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	dd6a      	ble.n	8007bbe <_strtod_l+0x8e6>
 8007ae8:	9904      	ldr	r1, [sp, #16]
 8007aea:	4a55      	ldr	r2, [pc, #340]	; (8007c40 <_strtod_l+0x968>)
 8007aec:	465b      	mov	r3, fp
 8007aee:	2900      	cmp	r1, #0
 8007af0:	f000 8085 	beq.w	8007bfe <_strtod_l+0x926>
 8007af4:	ea02 010b 	and.w	r1, r2, fp
 8007af8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007afc:	dc7f      	bgt.n	8007bfe <_strtod_l+0x926>
 8007afe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007b02:	f77f aeaa 	ble.w	800785a <_strtod_l+0x582>
 8007b06:	4a4f      	ldr	r2, [pc, #316]	; (8007c44 <_strtod_l+0x96c>)
 8007b08:	2300      	movs	r3, #0
 8007b0a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8007b0e:	4650      	mov	r0, sl
 8007b10:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8007b14:	4659      	mov	r1, fp
 8007b16:	f7f8 fd77 	bl	8000608 <__aeabi_dmul>
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4303      	orrs	r3, r0
 8007b1e:	bf08      	it	eq
 8007b20:	2322      	moveq	r3, #34	; 0x22
 8007b22:	4682      	mov	sl, r0
 8007b24:	468b      	mov	fp, r1
 8007b26:	bf08      	it	eq
 8007b28:	6023      	streq	r3, [r4, #0]
 8007b2a:	e62b      	b.n	8007784 <_strtod_l+0x4ac>
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b30:	fa02 f303 	lsl.w	r3, r2, r3
 8007b34:	ea03 0a0a 	and.w	sl, r3, sl
 8007b38:	e6de      	b.n	80078f8 <_strtod_l+0x620>
 8007b3a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007b3e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8007b42:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8007b46:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007b4a:	fa01 f308 	lsl.w	r3, r1, r8
 8007b4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b50:	9111      	str	r1, [sp, #68]	; 0x44
 8007b52:	e741      	b.n	80079d8 <_strtod_l+0x700>
 8007b54:	2300      	movs	r3, #0
 8007b56:	930c      	str	r3, [sp, #48]	; 0x30
 8007b58:	2301      	movs	r3, #1
 8007b5a:	9311      	str	r3, [sp, #68]	; 0x44
 8007b5c:	e73c      	b.n	80079d8 <_strtod_l+0x700>
 8007b5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007b60:	4642      	mov	r2, r8
 8007b62:	4620      	mov	r0, r4
 8007b64:	f001 feb2 	bl	80098cc <__lshift>
 8007b68:	901e      	str	r0, [sp, #120]	; 0x78
 8007b6a:	2800      	cmp	r0, #0
 8007b6c:	f47f af66 	bne.w	8007a3c <_strtod_l+0x764>
 8007b70:	e5fe      	b.n	8007770 <_strtod_l+0x498>
 8007b72:	465f      	mov	r7, fp
 8007b74:	d16e      	bne.n	8007c54 <_strtod_l+0x97c>
 8007b76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b7c:	b342      	cbz	r2, 8007bd0 <_strtod_l+0x8f8>
 8007b7e:	4a32      	ldr	r2, [pc, #200]	; (8007c48 <_strtod_l+0x970>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d128      	bne.n	8007bd6 <_strtod_l+0x8fe>
 8007b84:	9b04      	ldr	r3, [sp, #16]
 8007b86:	4650      	mov	r0, sl
 8007b88:	b1eb      	cbz	r3, 8007bc6 <_strtod_l+0x8ee>
 8007b8a:	4a2d      	ldr	r2, [pc, #180]	; (8007c40 <_strtod_l+0x968>)
 8007b8c:	403a      	ands	r2, r7
 8007b8e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007b92:	f04f 31ff 	mov.w	r1, #4294967295
 8007b96:	d819      	bhi.n	8007bcc <_strtod_l+0x8f4>
 8007b98:	0d12      	lsrs	r2, r2, #20
 8007b9a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba2:	4298      	cmp	r0, r3
 8007ba4:	d117      	bne.n	8007bd6 <_strtod_l+0x8fe>
 8007ba6:	4b29      	ldr	r3, [pc, #164]	; (8007c4c <_strtod_l+0x974>)
 8007ba8:	429f      	cmp	r7, r3
 8007baa:	d102      	bne.n	8007bb2 <_strtod_l+0x8da>
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f addf 	beq.w	8007770 <_strtod_l+0x498>
 8007bb2:	4b23      	ldr	r3, [pc, #140]	; (8007c40 <_strtod_l+0x968>)
 8007bb4:	403b      	ands	r3, r7
 8007bb6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007bba:	f04f 0a00 	mov.w	sl, #0
 8007bbe:	9b04      	ldr	r3, [sp, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1a0      	bne.n	8007b06 <_strtod_l+0x82e>
 8007bc4:	e5de      	b.n	8007784 <_strtod_l+0x4ac>
 8007bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bca:	e7ea      	b.n	8007ba2 <_strtod_l+0x8ca>
 8007bcc:	460b      	mov	r3, r1
 8007bce:	e7e8      	b.n	8007ba2 <_strtod_l+0x8ca>
 8007bd0:	ea53 030a 	orrs.w	r3, r3, sl
 8007bd4:	d088      	beq.n	8007ae8 <_strtod_l+0x810>
 8007bd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007bd8:	b1db      	cbz	r3, 8007c12 <_strtod_l+0x93a>
 8007bda:	423b      	tst	r3, r7
 8007bdc:	d0ef      	beq.n	8007bbe <_strtod_l+0x8e6>
 8007bde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007be0:	9a04      	ldr	r2, [sp, #16]
 8007be2:	4650      	mov	r0, sl
 8007be4:	4659      	mov	r1, fp
 8007be6:	b1c3      	cbz	r3, 8007c1a <_strtod_l+0x942>
 8007be8:	f7ff fb58 	bl	800729c <sulp>
 8007bec:	4602      	mov	r2, r0
 8007bee:	460b      	mov	r3, r1
 8007bf0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007bf4:	f7f8 fb52 	bl	800029c <__adddf3>
 8007bf8:	4682      	mov	sl, r0
 8007bfa:	468b      	mov	fp, r1
 8007bfc:	e7df      	b.n	8007bbe <_strtod_l+0x8e6>
 8007bfe:	4013      	ands	r3, r2
 8007c00:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c04:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c08:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007c10:	e7d5      	b.n	8007bbe <_strtod_l+0x8e6>
 8007c12:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c14:	ea13 0f0a 	tst.w	r3, sl
 8007c18:	e7e0      	b.n	8007bdc <_strtod_l+0x904>
 8007c1a:	f7ff fb3f 	bl	800729c <sulp>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007c26:	f7f8 fb37 	bl	8000298 <__aeabi_dsub>
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4682      	mov	sl, r0
 8007c30:	468b      	mov	fp, r1
 8007c32:	f7f8 ff51 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	d0c1      	beq.n	8007bbe <_strtod_l+0x8e6>
 8007c3a:	e60e      	b.n	800785a <_strtod_l+0x582>
 8007c3c:	fffffc02 	.word	0xfffffc02
 8007c40:	7ff00000 	.word	0x7ff00000
 8007c44:	39500000 	.word	0x39500000
 8007c48:	000fffff 	.word	0x000fffff
 8007c4c:	7fefffff 	.word	0x7fefffff
 8007c50:	0800af30 	.word	0x0800af30
 8007c54:	4631      	mov	r1, r6
 8007c56:	4628      	mov	r0, r5
 8007c58:	f002 f820 	bl	8009c9c <__ratio>
 8007c5c:	ec59 8b10 	vmov	r8, r9, d0
 8007c60:	ee10 0a10 	vmov	r0, s0
 8007c64:	2200      	movs	r2, #0
 8007c66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007c6a:	4649      	mov	r1, r9
 8007c6c:	f7f8 ff48 	bl	8000b00 <__aeabi_dcmple>
 8007c70:	2800      	cmp	r0, #0
 8007c72:	d07c      	beq.n	8007d6e <_strtod_l+0xa96>
 8007c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d04c      	beq.n	8007d14 <_strtod_l+0xa3c>
 8007c7a:	4b95      	ldr	r3, [pc, #596]	; (8007ed0 <_strtod_l+0xbf8>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007c82:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007ed0 <_strtod_l+0xbf8>
 8007c86:	f04f 0800 	mov.w	r8, #0
 8007c8a:	4b92      	ldr	r3, [pc, #584]	; (8007ed4 <_strtod_l+0xbfc>)
 8007c8c:	403b      	ands	r3, r7
 8007c8e:	9311      	str	r3, [sp, #68]	; 0x44
 8007c90:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007c92:	4b91      	ldr	r3, [pc, #580]	; (8007ed8 <_strtod_l+0xc00>)
 8007c94:	429a      	cmp	r2, r3
 8007c96:	f040 80b2 	bne.w	8007dfe <_strtod_l+0xb26>
 8007c9a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007c9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ca2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007ca6:	ec4b ab10 	vmov	d0, sl, fp
 8007caa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8007cae:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007cb2:	f001 ff1b 	bl	8009aec <__ulp>
 8007cb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007cba:	ec53 2b10 	vmov	r2, r3, d0
 8007cbe:	f7f8 fca3 	bl	8000608 <__aeabi_dmul>
 8007cc2:	4652      	mov	r2, sl
 8007cc4:	465b      	mov	r3, fp
 8007cc6:	f7f8 fae9 	bl	800029c <__adddf3>
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4981      	ldr	r1, [pc, #516]	; (8007ed4 <_strtod_l+0xbfc>)
 8007cce:	4a83      	ldr	r2, [pc, #524]	; (8007edc <_strtod_l+0xc04>)
 8007cd0:	4019      	ands	r1, r3
 8007cd2:	4291      	cmp	r1, r2
 8007cd4:	4682      	mov	sl, r0
 8007cd6:	d95e      	bls.n	8007d96 <_strtod_l+0xabe>
 8007cd8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cda:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d103      	bne.n	8007cea <_strtod_l+0xa12>
 8007ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	f43f ad43 	beq.w	8007770 <_strtod_l+0x498>
 8007cea:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8007ee8 <_strtod_l+0xc10>
 8007cee:	f04f 3aff 	mov.w	sl, #4294967295
 8007cf2:	991e      	ldr	r1, [sp, #120]	; 0x78
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f001 fbcd 	bl	8009494 <_Bfree>
 8007cfa:	9907      	ldr	r1, [sp, #28]
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	f001 fbc9 	bl	8009494 <_Bfree>
 8007d02:	4631      	mov	r1, r6
 8007d04:	4620      	mov	r0, r4
 8007d06:	f001 fbc5 	bl	8009494 <_Bfree>
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f001 fbc1 	bl	8009494 <_Bfree>
 8007d12:	e613      	b.n	800793c <_strtod_l+0x664>
 8007d14:	f1ba 0f00 	cmp.w	sl, #0
 8007d18:	d11b      	bne.n	8007d52 <_strtod_l+0xa7a>
 8007d1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d1e:	b9f3      	cbnz	r3, 8007d5e <_strtod_l+0xa86>
 8007d20:	4b6b      	ldr	r3, [pc, #428]	; (8007ed0 <_strtod_l+0xbf8>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	4640      	mov	r0, r8
 8007d26:	4649      	mov	r1, r9
 8007d28:	f7f8 fee0 	bl	8000aec <__aeabi_dcmplt>
 8007d2c:	b9d0      	cbnz	r0, 8007d64 <_strtod_l+0xa8c>
 8007d2e:	4640      	mov	r0, r8
 8007d30:	4649      	mov	r1, r9
 8007d32:	4b6b      	ldr	r3, [pc, #428]	; (8007ee0 <_strtod_l+0xc08>)
 8007d34:	2200      	movs	r2, #0
 8007d36:	f7f8 fc67 	bl	8000608 <__aeabi_dmul>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	4689      	mov	r9, r1
 8007d3e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d42:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8007d46:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d48:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8007d4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007d50:	e79b      	b.n	8007c8a <_strtod_l+0x9b2>
 8007d52:	f1ba 0f01 	cmp.w	sl, #1
 8007d56:	d102      	bne.n	8007d5e <_strtod_l+0xa86>
 8007d58:	2f00      	cmp	r7, #0
 8007d5a:	f43f ad7e 	beq.w	800785a <_strtod_l+0x582>
 8007d5e:	4b61      	ldr	r3, [pc, #388]	; (8007ee4 <_strtod_l+0xc0c>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	e78c      	b.n	8007c7e <_strtod_l+0x9a6>
 8007d64:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007ee0 <_strtod_l+0xc08>
 8007d68:	f04f 0800 	mov.w	r8, #0
 8007d6c:	e7e7      	b.n	8007d3e <_strtod_l+0xa66>
 8007d6e:	4b5c      	ldr	r3, [pc, #368]	; (8007ee0 <_strtod_l+0xc08>)
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	2200      	movs	r2, #0
 8007d76:	f7f8 fc47 	bl	8000608 <__aeabi_dmul>
 8007d7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d7c:	4680      	mov	r8, r0
 8007d7e:	4689      	mov	r9, r1
 8007d80:	b933      	cbnz	r3, 8007d90 <_strtod_l+0xab8>
 8007d82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d86:	9012      	str	r0, [sp, #72]	; 0x48
 8007d88:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d8a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007d8e:	e7dd      	b.n	8007d4c <_strtod_l+0xa74>
 8007d90:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8007d94:	e7f9      	b.n	8007d8a <_strtod_l+0xab2>
 8007d96:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007d9a:	9b04      	ldr	r3, [sp, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1a8      	bne.n	8007cf2 <_strtod_l+0xa1a>
 8007da0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007da4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007da6:	0d1b      	lsrs	r3, r3, #20
 8007da8:	051b      	lsls	r3, r3, #20
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d1a1      	bne.n	8007cf2 <_strtod_l+0xa1a>
 8007dae:	4640      	mov	r0, r8
 8007db0:	4649      	mov	r1, r9
 8007db2:	f7f8 ff89 	bl	8000cc8 <__aeabi_d2lz>
 8007db6:	f7f8 fbf9 	bl	80005ac <__aeabi_l2d>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4649      	mov	r1, r9
 8007dc2:	f7f8 fa69 	bl	8000298 <__aeabi_dsub>
 8007dc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007dcc:	ea43 030a 	orr.w	r3, r3, sl
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	4680      	mov	r8, r0
 8007dd4:	4689      	mov	r9, r1
 8007dd6:	d053      	beq.n	8007e80 <_strtod_l+0xba8>
 8007dd8:	a335      	add	r3, pc, #212	; (adr r3, 8007eb0 <_strtod_l+0xbd8>)
 8007dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dde:	f7f8 fe85 	bl	8000aec <__aeabi_dcmplt>
 8007de2:	2800      	cmp	r0, #0
 8007de4:	f47f acce 	bne.w	8007784 <_strtod_l+0x4ac>
 8007de8:	a333      	add	r3, pc, #204	; (adr r3, 8007eb8 <_strtod_l+0xbe0>)
 8007dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dee:	4640      	mov	r0, r8
 8007df0:	4649      	mov	r1, r9
 8007df2:	f7f8 fe99 	bl	8000b28 <__aeabi_dcmpgt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f43f af7b 	beq.w	8007cf2 <_strtod_l+0xa1a>
 8007dfc:	e4c2      	b.n	8007784 <_strtod_l+0x4ac>
 8007dfe:	9b04      	ldr	r3, [sp, #16]
 8007e00:	b333      	cbz	r3, 8007e50 <_strtod_l+0xb78>
 8007e02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007e08:	d822      	bhi.n	8007e50 <_strtod_l+0xb78>
 8007e0a:	a32d      	add	r3, pc, #180	; (adr r3, 8007ec0 <_strtod_l+0xbe8>)
 8007e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e10:	4640      	mov	r0, r8
 8007e12:	4649      	mov	r1, r9
 8007e14:	f7f8 fe74 	bl	8000b00 <__aeabi_dcmple>
 8007e18:	b1a0      	cbz	r0, 8007e44 <_strtod_l+0xb6c>
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	4640      	mov	r0, r8
 8007e1e:	f7f8 fecb 	bl	8000bb8 <__aeabi_d2uiz>
 8007e22:	2801      	cmp	r0, #1
 8007e24:	bf38      	it	cc
 8007e26:	2001      	movcc	r0, #1
 8007e28:	f7f8 fb74 	bl	8000514 <__aeabi_ui2d>
 8007e2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e2e:	4680      	mov	r8, r0
 8007e30:	4689      	mov	r9, r1
 8007e32:	bb13      	cbnz	r3, 8007e7a <_strtod_l+0xba2>
 8007e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e38:	9014      	str	r0, [sp, #80]	; 0x50
 8007e3a:	9315      	str	r3, [sp, #84]	; 0x54
 8007e3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007e40:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8007e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007e48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007e4c:	1a9b      	subs	r3, r3, r2
 8007e4e:	930d      	str	r3, [sp, #52]	; 0x34
 8007e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e54:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007e58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e5c:	f001 fe46 	bl	8009aec <__ulp>
 8007e60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e64:	ec53 2b10 	vmov	r2, r3, d0
 8007e68:	f7f8 fbce 	bl	8000608 <__aeabi_dmul>
 8007e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007e70:	f7f8 fa14 	bl	800029c <__adddf3>
 8007e74:	4682      	mov	sl, r0
 8007e76:	468b      	mov	fp, r1
 8007e78:	e78f      	b.n	8007d9a <_strtod_l+0xac2>
 8007e7a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8007e7e:	e7dd      	b.n	8007e3c <_strtod_l+0xb64>
 8007e80:	a311      	add	r3, pc, #68	; (adr r3, 8007ec8 <_strtod_l+0xbf0>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	f7f8 fe31 	bl	8000aec <__aeabi_dcmplt>
 8007e8a:	e7b4      	b.n	8007df6 <_strtod_l+0xb1e>
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	930e      	str	r3, [sp, #56]	; 0x38
 8007e90:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007e92:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	f7ff ba65 	b.w	8007364 <_strtod_l+0x8c>
 8007e9a:	2b65      	cmp	r3, #101	; 0x65
 8007e9c:	f43f ab5d 	beq.w	800755a <_strtod_l+0x282>
 8007ea0:	2b45      	cmp	r3, #69	; 0x45
 8007ea2:	f43f ab5a 	beq.w	800755a <_strtod_l+0x282>
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f7ff bb92 	b.w	80075d0 <_strtod_l+0x2f8>
 8007eac:	f3af 8000 	nop.w
 8007eb0:	94a03595 	.word	0x94a03595
 8007eb4:	3fdfffff 	.word	0x3fdfffff
 8007eb8:	35afe535 	.word	0x35afe535
 8007ebc:	3fe00000 	.word	0x3fe00000
 8007ec0:	ffc00000 	.word	0xffc00000
 8007ec4:	41dfffff 	.word	0x41dfffff
 8007ec8:	94a03595 	.word	0x94a03595
 8007ecc:	3fcfffff 	.word	0x3fcfffff
 8007ed0:	3ff00000 	.word	0x3ff00000
 8007ed4:	7ff00000 	.word	0x7ff00000
 8007ed8:	7fe00000 	.word	0x7fe00000
 8007edc:	7c9fffff 	.word	0x7c9fffff
 8007ee0:	3fe00000 	.word	0x3fe00000
 8007ee4:	bff00000 	.word	0xbff00000
 8007ee8:	7fefffff 	.word	0x7fefffff

08007eec <_strtod_r>:
 8007eec:	4b01      	ldr	r3, [pc, #4]	; (8007ef4 <_strtod_r+0x8>)
 8007eee:	f7ff b9f3 	b.w	80072d8 <_strtod_l>
 8007ef2:	bf00      	nop
 8007ef4:	20000088 	.word	0x20000088

08007ef8 <_strtol_l.isra.0>:
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007efe:	d001      	beq.n	8007f04 <_strtol_l.isra.0+0xc>
 8007f00:	2b24      	cmp	r3, #36	; 0x24
 8007f02:	d906      	bls.n	8007f12 <_strtol_l.isra.0+0x1a>
 8007f04:	f7fe faea 	bl	80064dc <__errno>
 8007f08:	2316      	movs	r3, #22
 8007f0a:	6003      	str	r3, [r0, #0]
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f12:	4f3a      	ldr	r7, [pc, #232]	; (8007ffc <_strtol_l.isra.0+0x104>)
 8007f14:	468e      	mov	lr, r1
 8007f16:	4676      	mov	r6, lr
 8007f18:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007f1c:	5de5      	ldrb	r5, [r4, r7]
 8007f1e:	f015 0508 	ands.w	r5, r5, #8
 8007f22:	d1f8      	bne.n	8007f16 <_strtol_l.isra.0+0x1e>
 8007f24:	2c2d      	cmp	r4, #45	; 0x2d
 8007f26:	d134      	bne.n	8007f92 <_strtol_l.isra.0+0x9a>
 8007f28:	f89e 4000 	ldrb.w	r4, [lr]
 8007f2c:	f04f 0801 	mov.w	r8, #1
 8007f30:	f106 0e02 	add.w	lr, r6, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d05c      	beq.n	8007ff2 <_strtol_l.isra.0+0xfa>
 8007f38:	2b10      	cmp	r3, #16
 8007f3a:	d10c      	bne.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007f3c:	2c30      	cmp	r4, #48	; 0x30
 8007f3e:	d10a      	bne.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007f40:	f89e 4000 	ldrb.w	r4, [lr]
 8007f44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007f48:	2c58      	cmp	r4, #88	; 0x58
 8007f4a:	d14d      	bne.n	8007fe8 <_strtol_l.isra.0+0xf0>
 8007f4c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007f50:	2310      	movs	r3, #16
 8007f52:	f10e 0e02 	add.w	lr, lr, #2
 8007f56:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007f5a:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007f5e:	2600      	movs	r6, #0
 8007f60:	fbbc f9f3 	udiv	r9, ip, r3
 8007f64:	4635      	mov	r5, r6
 8007f66:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f6a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007f6e:	2f09      	cmp	r7, #9
 8007f70:	d818      	bhi.n	8007fa4 <_strtol_l.isra.0+0xac>
 8007f72:	463c      	mov	r4, r7
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	dd24      	ble.n	8007fc2 <_strtol_l.isra.0+0xca>
 8007f78:	2e00      	cmp	r6, #0
 8007f7a:	db1f      	blt.n	8007fbc <_strtol_l.isra.0+0xc4>
 8007f7c:	45a9      	cmp	r9, r5
 8007f7e:	d31d      	bcc.n	8007fbc <_strtol_l.isra.0+0xc4>
 8007f80:	d101      	bne.n	8007f86 <_strtol_l.isra.0+0x8e>
 8007f82:	45a2      	cmp	sl, r4
 8007f84:	db1a      	blt.n	8007fbc <_strtol_l.isra.0+0xc4>
 8007f86:	fb05 4503 	mla	r5, r5, r3, r4
 8007f8a:	2601      	movs	r6, #1
 8007f8c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007f90:	e7eb      	b.n	8007f6a <_strtol_l.isra.0+0x72>
 8007f92:	2c2b      	cmp	r4, #43	; 0x2b
 8007f94:	bf08      	it	eq
 8007f96:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007f9a:	46a8      	mov	r8, r5
 8007f9c:	bf08      	it	eq
 8007f9e:	f106 0e02 	addeq.w	lr, r6, #2
 8007fa2:	e7c7      	b.n	8007f34 <_strtol_l.isra.0+0x3c>
 8007fa4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007fa8:	2f19      	cmp	r7, #25
 8007faa:	d801      	bhi.n	8007fb0 <_strtol_l.isra.0+0xb8>
 8007fac:	3c37      	subs	r4, #55	; 0x37
 8007fae:	e7e1      	b.n	8007f74 <_strtol_l.isra.0+0x7c>
 8007fb0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007fb4:	2f19      	cmp	r7, #25
 8007fb6:	d804      	bhi.n	8007fc2 <_strtol_l.isra.0+0xca>
 8007fb8:	3c57      	subs	r4, #87	; 0x57
 8007fba:	e7db      	b.n	8007f74 <_strtol_l.isra.0+0x7c>
 8007fbc:	f04f 36ff 	mov.w	r6, #4294967295
 8007fc0:	e7e4      	b.n	8007f8c <_strtol_l.isra.0+0x94>
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	da05      	bge.n	8007fd2 <_strtol_l.isra.0+0xda>
 8007fc6:	2322      	movs	r3, #34	; 0x22
 8007fc8:	6003      	str	r3, [r0, #0]
 8007fca:	4665      	mov	r5, ip
 8007fcc:	b942      	cbnz	r2, 8007fe0 <_strtol_l.isra.0+0xe8>
 8007fce:	4628      	mov	r0, r5
 8007fd0:	e79d      	b.n	8007f0e <_strtol_l.isra.0+0x16>
 8007fd2:	f1b8 0f00 	cmp.w	r8, #0
 8007fd6:	d000      	beq.n	8007fda <_strtol_l.isra.0+0xe2>
 8007fd8:	426d      	negs	r5, r5
 8007fda:	2a00      	cmp	r2, #0
 8007fdc:	d0f7      	beq.n	8007fce <_strtol_l.isra.0+0xd6>
 8007fde:	b10e      	cbz	r6, 8007fe4 <_strtol_l.isra.0+0xec>
 8007fe0:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007fe4:	6011      	str	r1, [r2, #0]
 8007fe6:	e7f2      	b.n	8007fce <_strtol_l.isra.0+0xd6>
 8007fe8:	2430      	movs	r4, #48	; 0x30
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1b3      	bne.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007fee:	2308      	movs	r3, #8
 8007ff0:	e7b1      	b.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007ff2:	2c30      	cmp	r4, #48	; 0x30
 8007ff4:	d0a4      	beq.n	8007f40 <_strtol_l.isra.0+0x48>
 8007ff6:	230a      	movs	r3, #10
 8007ff8:	e7ad      	b.n	8007f56 <_strtol_l.isra.0+0x5e>
 8007ffa:	bf00      	nop
 8007ffc:	0800af59 	.word	0x0800af59

08008000 <_strtol_r>:
 8008000:	f7ff bf7a 	b.w	8007ef8 <_strtol_l.isra.0>

08008004 <quorem>:
 8008004:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008008:	6903      	ldr	r3, [r0, #16]
 800800a:	690c      	ldr	r4, [r1, #16]
 800800c:	42a3      	cmp	r3, r4
 800800e:	4607      	mov	r7, r0
 8008010:	f2c0 8081 	blt.w	8008116 <quorem+0x112>
 8008014:	3c01      	subs	r4, #1
 8008016:	f101 0814 	add.w	r8, r1, #20
 800801a:	f100 0514 	add.w	r5, r0, #20
 800801e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008022:	9301      	str	r3, [sp, #4]
 8008024:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008028:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800802c:	3301      	adds	r3, #1
 800802e:	429a      	cmp	r2, r3
 8008030:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008034:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008038:	fbb2 f6f3 	udiv	r6, r2, r3
 800803c:	d331      	bcc.n	80080a2 <quorem+0x9e>
 800803e:	f04f 0e00 	mov.w	lr, #0
 8008042:	4640      	mov	r0, r8
 8008044:	46ac      	mov	ip, r5
 8008046:	46f2      	mov	sl, lr
 8008048:	f850 2b04 	ldr.w	r2, [r0], #4
 800804c:	b293      	uxth	r3, r2
 800804e:	fb06 e303 	mla	r3, r6, r3, lr
 8008052:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008056:	b29b      	uxth	r3, r3
 8008058:	ebaa 0303 	sub.w	r3, sl, r3
 800805c:	0c12      	lsrs	r2, r2, #16
 800805e:	f8dc a000 	ldr.w	sl, [ip]
 8008062:	fb06 e202 	mla	r2, r6, r2, lr
 8008066:	fa13 f38a 	uxtah	r3, r3, sl
 800806a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800806e:	fa1f fa82 	uxth.w	sl, r2
 8008072:	f8dc 2000 	ldr.w	r2, [ip]
 8008076:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800807a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800807e:	b29b      	uxth	r3, r3
 8008080:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008084:	4581      	cmp	r9, r0
 8008086:	f84c 3b04 	str.w	r3, [ip], #4
 800808a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800808e:	d2db      	bcs.n	8008048 <quorem+0x44>
 8008090:	f855 300b 	ldr.w	r3, [r5, fp]
 8008094:	b92b      	cbnz	r3, 80080a2 <quorem+0x9e>
 8008096:	9b01      	ldr	r3, [sp, #4]
 8008098:	3b04      	subs	r3, #4
 800809a:	429d      	cmp	r5, r3
 800809c:	461a      	mov	r2, r3
 800809e:	d32e      	bcc.n	80080fe <quorem+0xfa>
 80080a0:	613c      	str	r4, [r7, #16]
 80080a2:	4638      	mov	r0, r7
 80080a4:	f001 fc7e 	bl	80099a4 <__mcmp>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	db24      	blt.n	80080f6 <quorem+0xf2>
 80080ac:	3601      	adds	r6, #1
 80080ae:	4628      	mov	r0, r5
 80080b0:	f04f 0c00 	mov.w	ip, #0
 80080b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80080b8:	f8d0 e000 	ldr.w	lr, [r0]
 80080bc:	b293      	uxth	r3, r2
 80080be:	ebac 0303 	sub.w	r3, ip, r3
 80080c2:	0c12      	lsrs	r2, r2, #16
 80080c4:	fa13 f38e 	uxtah	r3, r3, lr
 80080c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80080cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080d6:	45c1      	cmp	r9, r8
 80080d8:	f840 3b04 	str.w	r3, [r0], #4
 80080dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80080e0:	d2e8      	bcs.n	80080b4 <quorem+0xb0>
 80080e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080ea:	b922      	cbnz	r2, 80080f6 <quorem+0xf2>
 80080ec:	3b04      	subs	r3, #4
 80080ee:	429d      	cmp	r5, r3
 80080f0:	461a      	mov	r2, r3
 80080f2:	d30a      	bcc.n	800810a <quorem+0x106>
 80080f4:	613c      	str	r4, [r7, #16]
 80080f6:	4630      	mov	r0, r6
 80080f8:	b003      	add	sp, #12
 80080fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	3b04      	subs	r3, #4
 8008102:	2a00      	cmp	r2, #0
 8008104:	d1cc      	bne.n	80080a0 <quorem+0x9c>
 8008106:	3c01      	subs	r4, #1
 8008108:	e7c7      	b.n	800809a <quorem+0x96>
 800810a:	6812      	ldr	r2, [r2, #0]
 800810c:	3b04      	subs	r3, #4
 800810e:	2a00      	cmp	r2, #0
 8008110:	d1f0      	bne.n	80080f4 <quorem+0xf0>
 8008112:	3c01      	subs	r4, #1
 8008114:	e7eb      	b.n	80080ee <quorem+0xea>
 8008116:	2000      	movs	r0, #0
 8008118:	e7ee      	b.n	80080f8 <quorem+0xf4>
 800811a:	0000      	movs	r0, r0
 800811c:	0000      	movs	r0, r0
	...

08008120 <_dtoa_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	ed2d 8b02 	vpush	{d8}
 8008128:	ec57 6b10 	vmov	r6, r7, d0
 800812c:	b095      	sub	sp, #84	; 0x54
 800812e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008130:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008134:	9105      	str	r1, [sp, #20]
 8008136:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800813a:	4604      	mov	r4, r0
 800813c:	9209      	str	r2, [sp, #36]	; 0x24
 800813e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008140:	b975      	cbnz	r5, 8008160 <_dtoa_r+0x40>
 8008142:	2010      	movs	r0, #16
 8008144:	f001 f94c 	bl	80093e0 <malloc>
 8008148:	4602      	mov	r2, r0
 800814a:	6260      	str	r0, [r4, #36]	; 0x24
 800814c:	b920      	cbnz	r0, 8008158 <_dtoa_r+0x38>
 800814e:	4bb2      	ldr	r3, [pc, #712]	; (8008418 <_dtoa_r+0x2f8>)
 8008150:	21ea      	movs	r1, #234	; 0xea
 8008152:	48b2      	ldr	r0, [pc, #712]	; (800841c <_dtoa_r+0x2fc>)
 8008154:	f002 f868 	bl	800a228 <__assert_func>
 8008158:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800815c:	6005      	str	r5, [r0, #0]
 800815e:	60c5      	str	r5, [r0, #12]
 8008160:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008162:	6819      	ldr	r1, [r3, #0]
 8008164:	b151      	cbz	r1, 800817c <_dtoa_r+0x5c>
 8008166:	685a      	ldr	r2, [r3, #4]
 8008168:	604a      	str	r2, [r1, #4]
 800816a:	2301      	movs	r3, #1
 800816c:	4093      	lsls	r3, r2
 800816e:	608b      	str	r3, [r1, #8]
 8008170:	4620      	mov	r0, r4
 8008172:	f001 f98f 	bl	8009494 <_Bfree>
 8008176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	1e3b      	subs	r3, r7, #0
 800817e:	bfb9      	ittee	lt
 8008180:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008184:	9303      	strlt	r3, [sp, #12]
 8008186:	2300      	movge	r3, #0
 8008188:	f8c8 3000 	strge.w	r3, [r8]
 800818c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008190:	4ba3      	ldr	r3, [pc, #652]	; (8008420 <_dtoa_r+0x300>)
 8008192:	bfbc      	itt	lt
 8008194:	2201      	movlt	r2, #1
 8008196:	f8c8 2000 	strlt.w	r2, [r8]
 800819a:	ea33 0309 	bics.w	r3, r3, r9
 800819e:	d11b      	bne.n	80081d8 <_dtoa_r+0xb8>
 80081a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80081a6:	6013      	str	r3, [r2, #0]
 80081a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081ac:	4333      	orrs	r3, r6
 80081ae:	f000 857a 	beq.w	8008ca6 <_dtoa_r+0xb86>
 80081b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b4:	b963      	cbnz	r3, 80081d0 <_dtoa_r+0xb0>
 80081b6:	4b9b      	ldr	r3, [pc, #620]	; (8008424 <_dtoa_r+0x304>)
 80081b8:	e024      	b.n	8008204 <_dtoa_r+0xe4>
 80081ba:	4b9b      	ldr	r3, [pc, #620]	; (8008428 <_dtoa_r+0x308>)
 80081bc:	9300      	str	r3, [sp, #0]
 80081be:	3308      	adds	r3, #8
 80081c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80081c2:	6013      	str	r3, [r2, #0]
 80081c4:	9800      	ldr	r0, [sp, #0]
 80081c6:	b015      	add	sp, #84	; 0x54
 80081c8:	ecbd 8b02 	vpop	{d8}
 80081cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d0:	4b94      	ldr	r3, [pc, #592]	; (8008424 <_dtoa_r+0x304>)
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	3303      	adds	r3, #3
 80081d6:	e7f3      	b.n	80081c0 <_dtoa_r+0xa0>
 80081d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80081dc:	2200      	movs	r2, #0
 80081de:	ec51 0b17 	vmov	r0, r1, d7
 80081e2:	2300      	movs	r3, #0
 80081e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80081e8:	f7f8 fc76 	bl	8000ad8 <__aeabi_dcmpeq>
 80081ec:	4680      	mov	r8, r0
 80081ee:	b158      	cbz	r0, 8008208 <_dtoa_r+0xe8>
 80081f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80081f2:	2301      	movs	r3, #1
 80081f4:	6013      	str	r3, [r2, #0]
 80081f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 8551 	beq.w	8008ca0 <_dtoa_r+0xb80>
 80081fe:	488b      	ldr	r0, [pc, #556]	; (800842c <_dtoa_r+0x30c>)
 8008200:	6018      	str	r0, [r3, #0]
 8008202:	1e43      	subs	r3, r0, #1
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	e7dd      	b.n	80081c4 <_dtoa_r+0xa4>
 8008208:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800820c:	aa12      	add	r2, sp, #72	; 0x48
 800820e:	a913      	add	r1, sp, #76	; 0x4c
 8008210:	4620      	mov	r0, r4
 8008212:	f001 fce7 	bl	8009be4 <__d2b>
 8008216:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800821a:	4683      	mov	fp, r0
 800821c:	2d00      	cmp	r5, #0
 800821e:	d07c      	beq.n	800831a <_dtoa_r+0x1fa>
 8008220:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008222:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800822a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800822e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008232:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008236:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800823a:	4b7d      	ldr	r3, [pc, #500]	; (8008430 <_dtoa_r+0x310>)
 800823c:	2200      	movs	r2, #0
 800823e:	4630      	mov	r0, r6
 8008240:	4639      	mov	r1, r7
 8008242:	f7f8 f829 	bl	8000298 <__aeabi_dsub>
 8008246:	a36e      	add	r3, pc, #440	; (adr r3, 8008400 <_dtoa_r+0x2e0>)
 8008248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824c:	f7f8 f9dc 	bl	8000608 <__aeabi_dmul>
 8008250:	a36d      	add	r3, pc, #436	; (adr r3, 8008408 <_dtoa_r+0x2e8>)
 8008252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008256:	f7f8 f821 	bl	800029c <__adddf3>
 800825a:	4606      	mov	r6, r0
 800825c:	4628      	mov	r0, r5
 800825e:	460f      	mov	r7, r1
 8008260:	f7f8 f968 	bl	8000534 <__aeabi_i2d>
 8008264:	a36a      	add	r3, pc, #424	; (adr r3, 8008410 <_dtoa_r+0x2f0>)
 8008266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800826a:	f7f8 f9cd 	bl	8000608 <__aeabi_dmul>
 800826e:	4602      	mov	r2, r0
 8008270:	460b      	mov	r3, r1
 8008272:	4630      	mov	r0, r6
 8008274:	4639      	mov	r1, r7
 8008276:	f7f8 f811 	bl	800029c <__adddf3>
 800827a:	4606      	mov	r6, r0
 800827c:	460f      	mov	r7, r1
 800827e:	f7f8 fc73 	bl	8000b68 <__aeabi_d2iz>
 8008282:	2200      	movs	r2, #0
 8008284:	4682      	mov	sl, r0
 8008286:	2300      	movs	r3, #0
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f8 fc2e 	bl	8000aec <__aeabi_dcmplt>
 8008290:	b148      	cbz	r0, 80082a6 <_dtoa_r+0x186>
 8008292:	4650      	mov	r0, sl
 8008294:	f7f8 f94e 	bl	8000534 <__aeabi_i2d>
 8008298:	4632      	mov	r2, r6
 800829a:	463b      	mov	r3, r7
 800829c:	f7f8 fc1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80082a0:	b908      	cbnz	r0, 80082a6 <_dtoa_r+0x186>
 80082a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082a6:	f1ba 0f16 	cmp.w	sl, #22
 80082aa:	d854      	bhi.n	8008356 <_dtoa_r+0x236>
 80082ac:	4b61      	ldr	r3, [pc, #388]	; (8008434 <_dtoa_r+0x314>)
 80082ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80082b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082ba:	f7f8 fc17 	bl	8000aec <__aeabi_dcmplt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	d04b      	beq.n	800835a <_dtoa_r+0x23a>
 80082c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082c6:	2300      	movs	r3, #0
 80082c8:	930e      	str	r3, [sp, #56]	; 0x38
 80082ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80082cc:	1b5d      	subs	r5, r3, r5
 80082ce:	1e6b      	subs	r3, r5, #1
 80082d0:	9304      	str	r3, [sp, #16]
 80082d2:	bf43      	ittte	mi
 80082d4:	2300      	movmi	r3, #0
 80082d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80082da:	9304      	strmi	r3, [sp, #16]
 80082dc:	f04f 0800 	movpl.w	r8, #0
 80082e0:	f1ba 0f00 	cmp.w	sl, #0
 80082e4:	db3b      	blt.n	800835e <_dtoa_r+0x23e>
 80082e6:	9b04      	ldr	r3, [sp, #16]
 80082e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80082ec:	4453      	add	r3, sl
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	2300      	movs	r3, #0
 80082f2:	9306      	str	r3, [sp, #24]
 80082f4:	9b05      	ldr	r3, [sp, #20]
 80082f6:	2b09      	cmp	r3, #9
 80082f8:	d869      	bhi.n	80083ce <_dtoa_r+0x2ae>
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	bfc4      	itt	gt
 80082fe:	3b04      	subgt	r3, #4
 8008300:	9305      	strgt	r3, [sp, #20]
 8008302:	9b05      	ldr	r3, [sp, #20]
 8008304:	f1a3 0302 	sub.w	r3, r3, #2
 8008308:	bfcc      	ite	gt
 800830a:	2500      	movgt	r5, #0
 800830c:	2501      	movle	r5, #1
 800830e:	2b03      	cmp	r3, #3
 8008310:	d869      	bhi.n	80083e6 <_dtoa_r+0x2c6>
 8008312:	e8df f003 	tbb	[pc, r3]
 8008316:	4e2c      	.short	0x4e2c
 8008318:	5a4c      	.short	0x5a4c
 800831a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800831e:	441d      	add	r5, r3
 8008320:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008324:	2b20      	cmp	r3, #32
 8008326:	bfc1      	itttt	gt
 8008328:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800832c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008330:	fa09 f303 	lslgt.w	r3, r9, r3
 8008334:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008338:	bfda      	itte	le
 800833a:	f1c3 0320 	rsble	r3, r3, #32
 800833e:	fa06 f003 	lslle.w	r0, r6, r3
 8008342:	4318      	orrgt	r0, r3
 8008344:	f7f8 f8e6 	bl	8000514 <__aeabi_ui2d>
 8008348:	2301      	movs	r3, #1
 800834a:	4606      	mov	r6, r0
 800834c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008350:	3d01      	subs	r5, #1
 8008352:	9310      	str	r3, [sp, #64]	; 0x40
 8008354:	e771      	b.n	800823a <_dtoa_r+0x11a>
 8008356:	2301      	movs	r3, #1
 8008358:	e7b6      	b.n	80082c8 <_dtoa_r+0x1a8>
 800835a:	900e      	str	r0, [sp, #56]	; 0x38
 800835c:	e7b5      	b.n	80082ca <_dtoa_r+0x1aa>
 800835e:	f1ca 0300 	rsb	r3, sl, #0
 8008362:	9306      	str	r3, [sp, #24]
 8008364:	2300      	movs	r3, #0
 8008366:	eba8 080a 	sub.w	r8, r8, sl
 800836a:	930d      	str	r3, [sp, #52]	; 0x34
 800836c:	e7c2      	b.n	80082f4 <_dtoa_r+0x1d4>
 800836e:	2300      	movs	r3, #0
 8008370:	9308      	str	r3, [sp, #32]
 8008372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008374:	2b00      	cmp	r3, #0
 8008376:	dc39      	bgt.n	80083ec <_dtoa_r+0x2cc>
 8008378:	f04f 0901 	mov.w	r9, #1
 800837c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008380:	464b      	mov	r3, r9
 8008382:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008386:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008388:	2200      	movs	r2, #0
 800838a:	6042      	str	r2, [r0, #4]
 800838c:	2204      	movs	r2, #4
 800838e:	f102 0614 	add.w	r6, r2, #20
 8008392:	429e      	cmp	r6, r3
 8008394:	6841      	ldr	r1, [r0, #4]
 8008396:	d92f      	bls.n	80083f8 <_dtoa_r+0x2d8>
 8008398:	4620      	mov	r0, r4
 800839a:	f001 f83b 	bl	8009414 <_Balloc>
 800839e:	9000      	str	r0, [sp, #0]
 80083a0:	2800      	cmp	r0, #0
 80083a2:	d14b      	bne.n	800843c <_dtoa_r+0x31c>
 80083a4:	4b24      	ldr	r3, [pc, #144]	; (8008438 <_dtoa_r+0x318>)
 80083a6:	4602      	mov	r2, r0
 80083a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80083ac:	e6d1      	b.n	8008152 <_dtoa_r+0x32>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7de      	b.n	8008370 <_dtoa_r+0x250>
 80083b2:	2300      	movs	r3, #0
 80083b4:	9308      	str	r3, [sp, #32]
 80083b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b8:	eb0a 0903 	add.w	r9, sl, r3
 80083bc:	f109 0301 	add.w	r3, r9, #1
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	bfb8      	it	lt
 80083c6:	2301      	movlt	r3, #1
 80083c8:	e7dd      	b.n	8008386 <_dtoa_r+0x266>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e7f2      	b.n	80083b4 <_dtoa_r+0x294>
 80083ce:	2501      	movs	r5, #1
 80083d0:	2300      	movs	r3, #0
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	9508      	str	r5, [sp, #32]
 80083d6:	f04f 39ff 	mov.w	r9, #4294967295
 80083da:	2200      	movs	r2, #0
 80083dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80083e0:	2312      	movs	r3, #18
 80083e2:	9209      	str	r2, [sp, #36]	; 0x24
 80083e4:	e7cf      	b.n	8008386 <_dtoa_r+0x266>
 80083e6:	2301      	movs	r3, #1
 80083e8:	9308      	str	r3, [sp, #32]
 80083ea:	e7f4      	b.n	80083d6 <_dtoa_r+0x2b6>
 80083ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80083f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80083f4:	464b      	mov	r3, r9
 80083f6:	e7c6      	b.n	8008386 <_dtoa_r+0x266>
 80083f8:	3101      	adds	r1, #1
 80083fa:	6041      	str	r1, [r0, #4]
 80083fc:	0052      	lsls	r2, r2, #1
 80083fe:	e7c6      	b.n	800838e <_dtoa_r+0x26e>
 8008400:	636f4361 	.word	0x636f4361
 8008404:	3fd287a7 	.word	0x3fd287a7
 8008408:	8b60c8b3 	.word	0x8b60c8b3
 800840c:	3fc68a28 	.word	0x3fc68a28
 8008410:	509f79fb 	.word	0x509f79fb
 8008414:	3fd34413 	.word	0x3fd34413
 8008418:	0800b066 	.word	0x0800b066
 800841c:	0800b07d 	.word	0x0800b07d
 8008420:	7ff00000 	.word	0x7ff00000
 8008424:	0800b062 	.word	0x0800b062
 8008428:	0800b059 	.word	0x0800b059
 800842c:	0800aedd 	.word	0x0800aedd
 8008430:	3ff80000 	.word	0x3ff80000
 8008434:	0800b1f8 	.word	0x0800b1f8
 8008438:	0800b0dc 	.word	0x0800b0dc
 800843c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800843e:	9a00      	ldr	r2, [sp, #0]
 8008440:	601a      	str	r2, [r3, #0]
 8008442:	9b01      	ldr	r3, [sp, #4]
 8008444:	2b0e      	cmp	r3, #14
 8008446:	f200 80ad 	bhi.w	80085a4 <_dtoa_r+0x484>
 800844a:	2d00      	cmp	r5, #0
 800844c:	f000 80aa 	beq.w	80085a4 <_dtoa_r+0x484>
 8008450:	f1ba 0f00 	cmp.w	sl, #0
 8008454:	dd36      	ble.n	80084c4 <_dtoa_r+0x3a4>
 8008456:	4ac3      	ldr	r2, [pc, #780]	; (8008764 <_dtoa_r+0x644>)
 8008458:	f00a 030f 	and.w	r3, sl, #15
 800845c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008460:	ed93 7b00 	vldr	d7, [r3]
 8008464:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008468:	ea4f 172a 	mov.w	r7, sl, asr #4
 800846c:	eeb0 8a47 	vmov.f32	s16, s14
 8008470:	eef0 8a67 	vmov.f32	s17, s15
 8008474:	d016      	beq.n	80084a4 <_dtoa_r+0x384>
 8008476:	4bbc      	ldr	r3, [pc, #752]	; (8008768 <_dtoa_r+0x648>)
 8008478:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800847c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008480:	f7f8 f9ec 	bl	800085c <__aeabi_ddiv>
 8008484:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008488:	f007 070f 	and.w	r7, r7, #15
 800848c:	2503      	movs	r5, #3
 800848e:	4eb6      	ldr	r6, [pc, #728]	; (8008768 <_dtoa_r+0x648>)
 8008490:	b957      	cbnz	r7, 80084a8 <_dtoa_r+0x388>
 8008492:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008496:	ec53 2b18 	vmov	r2, r3, d8
 800849a:	f7f8 f9df 	bl	800085c <__aeabi_ddiv>
 800849e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084a2:	e029      	b.n	80084f8 <_dtoa_r+0x3d8>
 80084a4:	2502      	movs	r5, #2
 80084a6:	e7f2      	b.n	800848e <_dtoa_r+0x36e>
 80084a8:	07f9      	lsls	r1, r7, #31
 80084aa:	d508      	bpl.n	80084be <_dtoa_r+0x39e>
 80084ac:	ec51 0b18 	vmov	r0, r1, d8
 80084b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80084b4:	f7f8 f8a8 	bl	8000608 <__aeabi_dmul>
 80084b8:	ec41 0b18 	vmov	d8, r0, r1
 80084bc:	3501      	adds	r5, #1
 80084be:	107f      	asrs	r7, r7, #1
 80084c0:	3608      	adds	r6, #8
 80084c2:	e7e5      	b.n	8008490 <_dtoa_r+0x370>
 80084c4:	f000 80a6 	beq.w	8008614 <_dtoa_r+0x4f4>
 80084c8:	f1ca 0600 	rsb	r6, sl, #0
 80084cc:	4ba5      	ldr	r3, [pc, #660]	; (8008764 <_dtoa_r+0x644>)
 80084ce:	4fa6      	ldr	r7, [pc, #664]	; (8008768 <_dtoa_r+0x648>)
 80084d0:	f006 020f 	and.w	r2, r6, #15
 80084d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80084e0:	f7f8 f892 	bl	8000608 <__aeabi_dmul>
 80084e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084e8:	1136      	asrs	r6, r6, #4
 80084ea:	2300      	movs	r3, #0
 80084ec:	2502      	movs	r5, #2
 80084ee:	2e00      	cmp	r6, #0
 80084f0:	f040 8085 	bne.w	80085fe <_dtoa_r+0x4de>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1d2      	bne.n	800849e <_dtoa_r+0x37e>
 80084f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f000 808c 	beq.w	8008618 <_dtoa_r+0x4f8>
 8008500:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008504:	4b99      	ldr	r3, [pc, #612]	; (800876c <_dtoa_r+0x64c>)
 8008506:	2200      	movs	r2, #0
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f7f8 faee 	bl	8000aec <__aeabi_dcmplt>
 8008510:	2800      	cmp	r0, #0
 8008512:	f000 8081 	beq.w	8008618 <_dtoa_r+0x4f8>
 8008516:	9b01      	ldr	r3, [sp, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d07d      	beq.n	8008618 <_dtoa_r+0x4f8>
 800851c:	f1b9 0f00 	cmp.w	r9, #0
 8008520:	dd3c      	ble.n	800859c <_dtoa_r+0x47c>
 8008522:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008526:	9307      	str	r3, [sp, #28]
 8008528:	2200      	movs	r2, #0
 800852a:	4b91      	ldr	r3, [pc, #580]	; (8008770 <_dtoa_r+0x650>)
 800852c:	4630      	mov	r0, r6
 800852e:	4639      	mov	r1, r7
 8008530:	f7f8 f86a 	bl	8000608 <__aeabi_dmul>
 8008534:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008538:	3501      	adds	r5, #1
 800853a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800853e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008542:	4628      	mov	r0, r5
 8008544:	f7f7 fff6 	bl	8000534 <__aeabi_i2d>
 8008548:	4632      	mov	r2, r6
 800854a:	463b      	mov	r3, r7
 800854c:	f7f8 f85c 	bl	8000608 <__aeabi_dmul>
 8008550:	4b88      	ldr	r3, [pc, #544]	; (8008774 <_dtoa_r+0x654>)
 8008552:	2200      	movs	r2, #0
 8008554:	f7f7 fea2 	bl	800029c <__adddf3>
 8008558:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800855c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008564:	2b00      	cmp	r3, #0
 8008566:	d15c      	bne.n	8008622 <_dtoa_r+0x502>
 8008568:	4b83      	ldr	r3, [pc, #524]	; (8008778 <_dtoa_r+0x658>)
 800856a:	2200      	movs	r2, #0
 800856c:	4630      	mov	r0, r6
 800856e:	4639      	mov	r1, r7
 8008570:	f7f7 fe92 	bl	8000298 <__aeabi_dsub>
 8008574:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008578:	4606      	mov	r6, r0
 800857a:	460f      	mov	r7, r1
 800857c:	f7f8 fad4 	bl	8000b28 <__aeabi_dcmpgt>
 8008580:	2800      	cmp	r0, #0
 8008582:	f040 8296 	bne.w	8008ab2 <_dtoa_r+0x992>
 8008586:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800858a:	4630      	mov	r0, r6
 800858c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008590:	4639      	mov	r1, r7
 8008592:	f7f8 faab 	bl	8000aec <__aeabi_dcmplt>
 8008596:	2800      	cmp	r0, #0
 8008598:	f040 8288 	bne.w	8008aac <_dtoa_r+0x98c>
 800859c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f2c0 8158 	blt.w	800885c <_dtoa_r+0x73c>
 80085ac:	f1ba 0f0e 	cmp.w	sl, #14
 80085b0:	f300 8154 	bgt.w	800885c <_dtoa_r+0x73c>
 80085b4:	4b6b      	ldr	r3, [pc, #428]	; (8008764 <_dtoa_r+0x644>)
 80085b6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80085ba:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f280 80e3 	bge.w	800878c <_dtoa_r+0x66c>
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	f300 80df 	bgt.w	800878c <_dtoa_r+0x66c>
 80085ce:	f040 826d 	bne.w	8008aac <_dtoa_r+0x98c>
 80085d2:	4b69      	ldr	r3, [pc, #420]	; (8008778 <_dtoa_r+0x658>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	4640      	mov	r0, r8
 80085d8:	4649      	mov	r1, r9
 80085da:	f7f8 f815 	bl	8000608 <__aeabi_dmul>
 80085de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085e2:	f7f8 fa97 	bl	8000b14 <__aeabi_dcmpge>
 80085e6:	9e01      	ldr	r6, [sp, #4]
 80085e8:	4637      	mov	r7, r6
 80085ea:	2800      	cmp	r0, #0
 80085ec:	f040 8243 	bne.w	8008a76 <_dtoa_r+0x956>
 80085f0:	9d00      	ldr	r5, [sp, #0]
 80085f2:	2331      	movs	r3, #49	; 0x31
 80085f4:	f805 3b01 	strb.w	r3, [r5], #1
 80085f8:	f10a 0a01 	add.w	sl, sl, #1
 80085fc:	e23f      	b.n	8008a7e <_dtoa_r+0x95e>
 80085fe:	07f2      	lsls	r2, r6, #31
 8008600:	d505      	bpl.n	800860e <_dtoa_r+0x4ee>
 8008602:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008606:	f7f7 ffff 	bl	8000608 <__aeabi_dmul>
 800860a:	3501      	adds	r5, #1
 800860c:	2301      	movs	r3, #1
 800860e:	1076      	asrs	r6, r6, #1
 8008610:	3708      	adds	r7, #8
 8008612:	e76c      	b.n	80084ee <_dtoa_r+0x3ce>
 8008614:	2502      	movs	r5, #2
 8008616:	e76f      	b.n	80084f8 <_dtoa_r+0x3d8>
 8008618:	9b01      	ldr	r3, [sp, #4]
 800861a:	f8cd a01c 	str.w	sl, [sp, #28]
 800861e:	930c      	str	r3, [sp, #48]	; 0x30
 8008620:	e78d      	b.n	800853e <_dtoa_r+0x41e>
 8008622:	9900      	ldr	r1, [sp, #0]
 8008624:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008628:	4b4e      	ldr	r3, [pc, #312]	; (8008764 <_dtoa_r+0x644>)
 800862a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800862e:	4401      	add	r1, r0
 8008630:	9102      	str	r1, [sp, #8]
 8008632:	9908      	ldr	r1, [sp, #32]
 8008634:	eeb0 8a47 	vmov.f32	s16, s14
 8008638:	eef0 8a67 	vmov.f32	s17, s15
 800863c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008640:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008644:	2900      	cmp	r1, #0
 8008646:	d045      	beq.n	80086d4 <_dtoa_r+0x5b4>
 8008648:	494c      	ldr	r1, [pc, #304]	; (800877c <_dtoa_r+0x65c>)
 800864a:	2000      	movs	r0, #0
 800864c:	f7f8 f906 	bl	800085c <__aeabi_ddiv>
 8008650:	ec53 2b18 	vmov	r2, r3, d8
 8008654:	f7f7 fe20 	bl	8000298 <__aeabi_dsub>
 8008658:	9d00      	ldr	r5, [sp, #0]
 800865a:	ec41 0b18 	vmov	d8, r0, r1
 800865e:	4639      	mov	r1, r7
 8008660:	4630      	mov	r0, r6
 8008662:	f7f8 fa81 	bl	8000b68 <__aeabi_d2iz>
 8008666:	900c      	str	r0, [sp, #48]	; 0x30
 8008668:	f7f7 ff64 	bl	8000534 <__aeabi_i2d>
 800866c:	4602      	mov	r2, r0
 800866e:	460b      	mov	r3, r1
 8008670:	4630      	mov	r0, r6
 8008672:	4639      	mov	r1, r7
 8008674:	f7f7 fe10 	bl	8000298 <__aeabi_dsub>
 8008678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800867a:	3330      	adds	r3, #48	; 0x30
 800867c:	f805 3b01 	strb.w	r3, [r5], #1
 8008680:	ec53 2b18 	vmov	r2, r3, d8
 8008684:	4606      	mov	r6, r0
 8008686:	460f      	mov	r7, r1
 8008688:	f7f8 fa30 	bl	8000aec <__aeabi_dcmplt>
 800868c:	2800      	cmp	r0, #0
 800868e:	d165      	bne.n	800875c <_dtoa_r+0x63c>
 8008690:	4632      	mov	r2, r6
 8008692:	463b      	mov	r3, r7
 8008694:	4935      	ldr	r1, [pc, #212]	; (800876c <_dtoa_r+0x64c>)
 8008696:	2000      	movs	r0, #0
 8008698:	f7f7 fdfe 	bl	8000298 <__aeabi_dsub>
 800869c:	ec53 2b18 	vmov	r2, r3, d8
 80086a0:	f7f8 fa24 	bl	8000aec <__aeabi_dcmplt>
 80086a4:	2800      	cmp	r0, #0
 80086a6:	f040 80b9 	bne.w	800881c <_dtoa_r+0x6fc>
 80086aa:	9b02      	ldr	r3, [sp, #8]
 80086ac:	429d      	cmp	r5, r3
 80086ae:	f43f af75 	beq.w	800859c <_dtoa_r+0x47c>
 80086b2:	4b2f      	ldr	r3, [pc, #188]	; (8008770 <_dtoa_r+0x650>)
 80086b4:	ec51 0b18 	vmov	r0, r1, d8
 80086b8:	2200      	movs	r2, #0
 80086ba:	f7f7 ffa5 	bl	8000608 <__aeabi_dmul>
 80086be:	4b2c      	ldr	r3, [pc, #176]	; (8008770 <_dtoa_r+0x650>)
 80086c0:	ec41 0b18 	vmov	d8, r0, r1
 80086c4:	2200      	movs	r2, #0
 80086c6:	4630      	mov	r0, r6
 80086c8:	4639      	mov	r1, r7
 80086ca:	f7f7 ff9d 	bl	8000608 <__aeabi_dmul>
 80086ce:	4606      	mov	r6, r0
 80086d0:	460f      	mov	r7, r1
 80086d2:	e7c4      	b.n	800865e <_dtoa_r+0x53e>
 80086d4:	ec51 0b17 	vmov	r0, r1, d7
 80086d8:	f7f7 ff96 	bl	8000608 <__aeabi_dmul>
 80086dc:	9b02      	ldr	r3, [sp, #8]
 80086de:	9d00      	ldr	r5, [sp, #0]
 80086e0:	930c      	str	r3, [sp, #48]	; 0x30
 80086e2:	ec41 0b18 	vmov	d8, r0, r1
 80086e6:	4639      	mov	r1, r7
 80086e8:	4630      	mov	r0, r6
 80086ea:	f7f8 fa3d 	bl	8000b68 <__aeabi_d2iz>
 80086ee:	9011      	str	r0, [sp, #68]	; 0x44
 80086f0:	f7f7 ff20 	bl	8000534 <__aeabi_i2d>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4630      	mov	r0, r6
 80086fa:	4639      	mov	r1, r7
 80086fc:	f7f7 fdcc 	bl	8000298 <__aeabi_dsub>
 8008700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008702:	3330      	adds	r3, #48	; 0x30
 8008704:	f805 3b01 	strb.w	r3, [r5], #1
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	429d      	cmp	r5, r3
 800870c:	4606      	mov	r6, r0
 800870e:	460f      	mov	r7, r1
 8008710:	f04f 0200 	mov.w	r2, #0
 8008714:	d134      	bne.n	8008780 <_dtoa_r+0x660>
 8008716:	4b19      	ldr	r3, [pc, #100]	; (800877c <_dtoa_r+0x65c>)
 8008718:	ec51 0b18 	vmov	r0, r1, d8
 800871c:	f7f7 fdbe 	bl	800029c <__adddf3>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	f7f8 f9fe 	bl	8000b28 <__aeabi_dcmpgt>
 800872c:	2800      	cmp	r0, #0
 800872e:	d175      	bne.n	800881c <_dtoa_r+0x6fc>
 8008730:	ec53 2b18 	vmov	r2, r3, d8
 8008734:	4911      	ldr	r1, [pc, #68]	; (800877c <_dtoa_r+0x65c>)
 8008736:	2000      	movs	r0, #0
 8008738:	f7f7 fdae 	bl	8000298 <__aeabi_dsub>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f8 f9d2 	bl	8000aec <__aeabi_dcmplt>
 8008748:	2800      	cmp	r0, #0
 800874a:	f43f af27 	beq.w	800859c <_dtoa_r+0x47c>
 800874e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008750:	1e6b      	subs	r3, r5, #1
 8008752:	930c      	str	r3, [sp, #48]	; 0x30
 8008754:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008758:	2b30      	cmp	r3, #48	; 0x30
 800875a:	d0f8      	beq.n	800874e <_dtoa_r+0x62e>
 800875c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008760:	e04a      	b.n	80087f8 <_dtoa_r+0x6d8>
 8008762:	bf00      	nop
 8008764:	0800b1f8 	.word	0x0800b1f8
 8008768:	0800b1d0 	.word	0x0800b1d0
 800876c:	3ff00000 	.word	0x3ff00000
 8008770:	40240000 	.word	0x40240000
 8008774:	401c0000 	.word	0x401c0000
 8008778:	40140000 	.word	0x40140000
 800877c:	3fe00000 	.word	0x3fe00000
 8008780:	4baf      	ldr	r3, [pc, #700]	; (8008a40 <_dtoa_r+0x920>)
 8008782:	f7f7 ff41 	bl	8000608 <__aeabi_dmul>
 8008786:	4606      	mov	r6, r0
 8008788:	460f      	mov	r7, r1
 800878a:	e7ac      	b.n	80086e6 <_dtoa_r+0x5c6>
 800878c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008790:	9d00      	ldr	r5, [sp, #0]
 8008792:	4642      	mov	r2, r8
 8008794:	464b      	mov	r3, r9
 8008796:	4630      	mov	r0, r6
 8008798:	4639      	mov	r1, r7
 800879a:	f7f8 f85f 	bl	800085c <__aeabi_ddiv>
 800879e:	f7f8 f9e3 	bl	8000b68 <__aeabi_d2iz>
 80087a2:	9002      	str	r0, [sp, #8]
 80087a4:	f7f7 fec6 	bl	8000534 <__aeabi_i2d>
 80087a8:	4642      	mov	r2, r8
 80087aa:	464b      	mov	r3, r9
 80087ac:	f7f7 ff2c 	bl	8000608 <__aeabi_dmul>
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	4630      	mov	r0, r6
 80087b6:	4639      	mov	r1, r7
 80087b8:	f7f7 fd6e 	bl	8000298 <__aeabi_dsub>
 80087bc:	9e02      	ldr	r6, [sp, #8]
 80087be:	9f01      	ldr	r7, [sp, #4]
 80087c0:	3630      	adds	r6, #48	; 0x30
 80087c2:	f805 6b01 	strb.w	r6, [r5], #1
 80087c6:	9e00      	ldr	r6, [sp, #0]
 80087c8:	1bae      	subs	r6, r5, r6
 80087ca:	42b7      	cmp	r7, r6
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	d137      	bne.n	8008842 <_dtoa_r+0x722>
 80087d2:	f7f7 fd63 	bl	800029c <__adddf3>
 80087d6:	4642      	mov	r2, r8
 80087d8:	464b      	mov	r3, r9
 80087da:	4606      	mov	r6, r0
 80087dc:	460f      	mov	r7, r1
 80087de:	f7f8 f9a3 	bl	8000b28 <__aeabi_dcmpgt>
 80087e2:	b9c8      	cbnz	r0, 8008818 <_dtoa_r+0x6f8>
 80087e4:	4642      	mov	r2, r8
 80087e6:	464b      	mov	r3, r9
 80087e8:	4630      	mov	r0, r6
 80087ea:	4639      	mov	r1, r7
 80087ec:	f7f8 f974 	bl	8000ad8 <__aeabi_dcmpeq>
 80087f0:	b110      	cbz	r0, 80087f8 <_dtoa_r+0x6d8>
 80087f2:	9b02      	ldr	r3, [sp, #8]
 80087f4:	07d9      	lsls	r1, r3, #31
 80087f6:	d40f      	bmi.n	8008818 <_dtoa_r+0x6f8>
 80087f8:	4620      	mov	r0, r4
 80087fa:	4659      	mov	r1, fp
 80087fc:	f000 fe4a 	bl	8009494 <_Bfree>
 8008800:	2300      	movs	r3, #0
 8008802:	702b      	strb	r3, [r5, #0]
 8008804:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008806:	f10a 0001 	add.w	r0, sl, #1
 800880a:	6018      	str	r0, [r3, #0]
 800880c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800880e:	2b00      	cmp	r3, #0
 8008810:	f43f acd8 	beq.w	80081c4 <_dtoa_r+0xa4>
 8008814:	601d      	str	r5, [r3, #0]
 8008816:	e4d5      	b.n	80081c4 <_dtoa_r+0xa4>
 8008818:	f8cd a01c 	str.w	sl, [sp, #28]
 800881c:	462b      	mov	r3, r5
 800881e:	461d      	mov	r5, r3
 8008820:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008824:	2a39      	cmp	r2, #57	; 0x39
 8008826:	d108      	bne.n	800883a <_dtoa_r+0x71a>
 8008828:	9a00      	ldr	r2, [sp, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d1f7      	bne.n	800881e <_dtoa_r+0x6fe>
 800882e:	9a07      	ldr	r2, [sp, #28]
 8008830:	9900      	ldr	r1, [sp, #0]
 8008832:	3201      	adds	r2, #1
 8008834:	9207      	str	r2, [sp, #28]
 8008836:	2230      	movs	r2, #48	; 0x30
 8008838:	700a      	strb	r2, [r1, #0]
 800883a:	781a      	ldrb	r2, [r3, #0]
 800883c:	3201      	adds	r2, #1
 800883e:	701a      	strb	r2, [r3, #0]
 8008840:	e78c      	b.n	800875c <_dtoa_r+0x63c>
 8008842:	4b7f      	ldr	r3, [pc, #508]	; (8008a40 <_dtoa_r+0x920>)
 8008844:	2200      	movs	r2, #0
 8008846:	f7f7 fedf 	bl	8000608 <__aeabi_dmul>
 800884a:	2200      	movs	r2, #0
 800884c:	2300      	movs	r3, #0
 800884e:	4606      	mov	r6, r0
 8008850:	460f      	mov	r7, r1
 8008852:	f7f8 f941 	bl	8000ad8 <__aeabi_dcmpeq>
 8008856:	2800      	cmp	r0, #0
 8008858:	d09b      	beq.n	8008792 <_dtoa_r+0x672>
 800885a:	e7cd      	b.n	80087f8 <_dtoa_r+0x6d8>
 800885c:	9a08      	ldr	r2, [sp, #32]
 800885e:	2a00      	cmp	r2, #0
 8008860:	f000 80c4 	beq.w	80089ec <_dtoa_r+0x8cc>
 8008864:	9a05      	ldr	r2, [sp, #20]
 8008866:	2a01      	cmp	r2, #1
 8008868:	f300 80a8 	bgt.w	80089bc <_dtoa_r+0x89c>
 800886c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800886e:	2a00      	cmp	r2, #0
 8008870:	f000 80a0 	beq.w	80089b4 <_dtoa_r+0x894>
 8008874:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008878:	9e06      	ldr	r6, [sp, #24]
 800887a:	4645      	mov	r5, r8
 800887c:	9a04      	ldr	r2, [sp, #16]
 800887e:	2101      	movs	r1, #1
 8008880:	441a      	add	r2, r3
 8008882:	4620      	mov	r0, r4
 8008884:	4498      	add	r8, r3
 8008886:	9204      	str	r2, [sp, #16]
 8008888:	f000 ff0a 	bl	80096a0 <__i2b>
 800888c:	4607      	mov	r7, r0
 800888e:	2d00      	cmp	r5, #0
 8008890:	dd0b      	ble.n	80088aa <_dtoa_r+0x78a>
 8008892:	9b04      	ldr	r3, [sp, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	dd08      	ble.n	80088aa <_dtoa_r+0x78a>
 8008898:	42ab      	cmp	r3, r5
 800889a:	9a04      	ldr	r2, [sp, #16]
 800889c:	bfa8      	it	ge
 800889e:	462b      	movge	r3, r5
 80088a0:	eba8 0803 	sub.w	r8, r8, r3
 80088a4:	1aed      	subs	r5, r5, r3
 80088a6:	1ad3      	subs	r3, r2, r3
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	9b06      	ldr	r3, [sp, #24]
 80088ac:	b1fb      	cbz	r3, 80088ee <_dtoa_r+0x7ce>
 80088ae:	9b08      	ldr	r3, [sp, #32]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 809f 	beq.w	80089f4 <_dtoa_r+0x8d4>
 80088b6:	2e00      	cmp	r6, #0
 80088b8:	dd11      	ble.n	80088de <_dtoa_r+0x7be>
 80088ba:	4639      	mov	r1, r7
 80088bc:	4632      	mov	r2, r6
 80088be:	4620      	mov	r0, r4
 80088c0:	f000 ffaa 	bl	8009818 <__pow5mult>
 80088c4:	465a      	mov	r2, fp
 80088c6:	4601      	mov	r1, r0
 80088c8:	4607      	mov	r7, r0
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 fefe 	bl	80096cc <__multiply>
 80088d0:	4659      	mov	r1, fp
 80088d2:	9007      	str	r0, [sp, #28]
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fddd 	bl	8009494 <_Bfree>
 80088da:	9b07      	ldr	r3, [sp, #28]
 80088dc:	469b      	mov	fp, r3
 80088de:	9b06      	ldr	r3, [sp, #24]
 80088e0:	1b9a      	subs	r2, r3, r6
 80088e2:	d004      	beq.n	80088ee <_dtoa_r+0x7ce>
 80088e4:	4659      	mov	r1, fp
 80088e6:	4620      	mov	r0, r4
 80088e8:	f000 ff96 	bl	8009818 <__pow5mult>
 80088ec:	4683      	mov	fp, r0
 80088ee:	2101      	movs	r1, #1
 80088f0:	4620      	mov	r0, r4
 80088f2:	f000 fed5 	bl	80096a0 <__i2b>
 80088f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	4606      	mov	r6, r0
 80088fc:	dd7c      	ble.n	80089f8 <_dtoa_r+0x8d8>
 80088fe:	461a      	mov	r2, r3
 8008900:	4601      	mov	r1, r0
 8008902:	4620      	mov	r0, r4
 8008904:	f000 ff88 	bl	8009818 <__pow5mult>
 8008908:	9b05      	ldr	r3, [sp, #20]
 800890a:	2b01      	cmp	r3, #1
 800890c:	4606      	mov	r6, r0
 800890e:	dd76      	ble.n	80089fe <_dtoa_r+0x8de>
 8008910:	2300      	movs	r3, #0
 8008912:	9306      	str	r3, [sp, #24]
 8008914:	6933      	ldr	r3, [r6, #16]
 8008916:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800891a:	6918      	ldr	r0, [r3, #16]
 800891c:	f000 fe70 	bl	8009600 <__hi0bits>
 8008920:	f1c0 0020 	rsb	r0, r0, #32
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	4418      	add	r0, r3
 8008928:	f010 001f 	ands.w	r0, r0, #31
 800892c:	f000 8086 	beq.w	8008a3c <_dtoa_r+0x91c>
 8008930:	f1c0 0320 	rsb	r3, r0, #32
 8008934:	2b04      	cmp	r3, #4
 8008936:	dd7f      	ble.n	8008a38 <_dtoa_r+0x918>
 8008938:	f1c0 001c 	rsb	r0, r0, #28
 800893c:	9b04      	ldr	r3, [sp, #16]
 800893e:	4403      	add	r3, r0
 8008940:	4480      	add	r8, r0
 8008942:	4405      	add	r5, r0
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	f1b8 0f00 	cmp.w	r8, #0
 800894a:	dd05      	ble.n	8008958 <_dtoa_r+0x838>
 800894c:	4659      	mov	r1, fp
 800894e:	4642      	mov	r2, r8
 8008950:	4620      	mov	r0, r4
 8008952:	f000 ffbb 	bl	80098cc <__lshift>
 8008956:	4683      	mov	fp, r0
 8008958:	9b04      	ldr	r3, [sp, #16]
 800895a:	2b00      	cmp	r3, #0
 800895c:	dd05      	ble.n	800896a <_dtoa_r+0x84a>
 800895e:	4631      	mov	r1, r6
 8008960:	461a      	mov	r2, r3
 8008962:	4620      	mov	r0, r4
 8008964:	f000 ffb2 	bl	80098cc <__lshift>
 8008968:	4606      	mov	r6, r0
 800896a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800896c:	2b00      	cmp	r3, #0
 800896e:	d069      	beq.n	8008a44 <_dtoa_r+0x924>
 8008970:	4631      	mov	r1, r6
 8008972:	4658      	mov	r0, fp
 8008974:	f001 f816 	bl	80099a4 <__mcmp>
 8008978:	2800      	cmp	r0, #0
 800897a:	da63      	bge.n	8008a44 <_dtoa_r+0x924>
 800897c:	2300      	movs	r3, #0
 800897e:	4659      	mov	r1, fp
 8008980:	220a      	movs	r2, #10
 8008982:	4620      	mov	r0, r4
 8008984:	f000 fda8 	bl	80094d8 <__multadd>
 8008988:	9b08      	ldr	r3, [sp, #32]
 800898a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800898e:	4683      	mov	fp, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 818f 	beq.w	8008cb4 <_dtoa_r+0xb94>
 8008996:	4639      	mov	r1, r7
 8008998:	2300      	movs	r3, #0
 800899a:	220a      	movs	r2, #10
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fd9b 	bl	80094d8 <__multadd>
 80089a2:	f1b9 0f00 	cmp.w	r9, #0
 80089a6:	4607      	mov	r7, r0
 80089a8:	f300 808e 	bgt.w	8008ac8 <_dtoa_r+0x9a8>
 80089ac:	9b05      	ldr	r3, [sp, #20]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	dc50      	bgt.n	8008a54 <_dtoa_r+0x934>
 80089b2:	e089      	b.n	8008ac8 <_dtoa_r+0x9a8>
 80089b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80089ba:	e75d      	b.n	8008878 <_dtoa_r+0x758>
 80089bc:	9b01      	ldr	r3, [sp, #4]
 80089be:	1e5e      	subs	r6, r3, #1
 80089c0:	9b06      	ldr	r3, [sp, #24]
 80089c2:	42b3      	cmp	r3, r6
 80089c4:	bfbf      	itttt	lt
 80089c6:	9b06      	ldrlt	r3, [sp, #24]
 80089c8:	9606      	strlt	r6, [sp, #24]
 80089ca:	1af2      	sublt	r2, r6, r3
 80089cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80089ce:	bfb6      	itet	lt
 80089d0:	189b      	addlt	r3, r3, r2
 80089d2:	1b9e      	subge	r6, r3, r6
 80089d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80089d6:	9b01      	ldr	r3, [sp, #4]
 80089d8:	bfb8      	it	lt
 80089da:	2600      	movlt	r6, #0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	bfb5      	itete	lt
 80089e0:	eba8 0503 	sublt.w	r5, r8, r3
 80089e4:	9b01      	ldrge	r3, [sp, #4]
 80089e6:	2300      	movlt	r3, #0
 80089e8:	4645      	movge	r5, r8
 80089ea:	e747      	b.n	800887c <_dtoa_r+0x75c>
 80089ec:	9e06      	ldr	r6, [sp, #24]
 80089ee:	9f08      	ldr	r7, [sp, #32]
 80089f0:	4645      	mov	r5, r8
 80089f2:	e74c      	b.n	800888e <_dtoa_r+0x76e>
 80089f4:	9a06      	ldr	r2, [sp, #24]
 80089f6:	e775      	b.n	80088e4 <_dtoa_r+0x7c4>
 80089f8:	9b05      	ldr	r3, [sp, #20]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	dc18      	bgt.n	8008a30 <_dtoa_r+0x910>
 80089fe:	9b02      	ldr	r3, [sp, #8]
 8008a00:	b9b3      	cbnz	r3, 8008a30 <_dtoa_r+0x910>
 8008a02:	9b03      	ldr	r3, [sp, #12]
 8008a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a08:	b9a3      	cbnz	r3, 8008a34 <_dtoa_r+0x914>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a10:	0d1b      	lsrs	r3, r3, #20
 8008a12:	051b      	lsls	r3, r3, #20
 8008a14:	b12b      	cbz	r3, 8008a22 <_dtoa_r+0x902>
 8008a16:	9b04      	ldr	r3, [sp, #16]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	9304      	str	r3, [sp, #16]
 8008a1c:	f108 0801 	add.w	r8, r8, #1
 8008a20:	2301      	movs	r3, #1
 8008a22:	9306      	str	r3, [sp, #24]
 8008a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f47f af74 	bne.w	8008914 <_dtoa_r+0x7f4>
 8008a2c:	2001      	movs	r0, #1
 8008a2e:	e779      	b.n	8008924 <_dtoa_r+0x804>
 8008a30:	2300      	movs	r3, #0
 8008a32:	e7f6      	b.n	8008a22 <_dtoa_r+0x902>
 8008a34:	9b02      	ldr	r3, [sp, #8]
 8008a36:	e7f4      	b.n	8008a22 <_dtoa_r+0x902>
 8008a38:	d085      	beq.n	8008946 <_dtoa_r+0x826>
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	301c      	adds	r0, #28
 8008a3e:	e77d      	b.n	800893c <_dtoa_r+0x81c>
 8008a40:	40240000 	.word	0x40240000
 8008a44:	9b01      	ldr	r3, [sp, #4]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	dc38      	bgt.n	8008abc <_dtoa_r+0x99c>
 8008a4a:	9b05      	ldr	r3, [sp, #20]
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	dd35      	ble.n	8008abc <_dtoa_r+0x99c>
 8008a50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008a54:	f1b9 0f00 	cmp.w	r9, #0
 8008a58:	d10d      	bne.n	8008a76 <_dtoa_r+0x956>
 8008a5a:	4631      	mov	r1, r6
 8008a5c:	464b      	mov	r3, r9
 8008a5e:	2205      	movs	r2, #5
 8008a60:	4620      	mov	r0, r4
 8008a62:	f000 fd39 	bl	80094d8 <__multadd>
 8008a66:	4601      	mov	r1, r0
 8008a68:	4606      	mov	r6, r0
 8008a6a:	4658      	mov	r0, fp
 8008a6c:	f000 ff9a 	bl	80099a4 <__mcmp>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f73f adbd 	bgt.w	80085f0 <_dtoa_r+0x4d0>
 8008a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a78:	9d00      	ldr	r5, [sp, #0]
 8008a7a:	ea6f 0a03 	mvn.w	sl, r3
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	4631      	mov	r1, r6
 8008a84:	4620      	mov	r0, r4
 8008a86:	f000 fd05 	bl	8009494 <_Bfree>
 8008a8a:	2f00      	cmp	r7, #0
 8008a8c:	f43f aeb4 	beq.w	80087f8 <_dtoa_r+0x6d8>
 8008a90:	f1b8 0f00 	cmp.w	r8, #0
 8008a94:	d005      	beq.n	8008aa2 <_dtoa_r+0x982>
 8008a96:	45b8      	cmp	r8, r7
 8008a98:	d003      	beq.n	8008aa2 <_dtoa_r+0x982>
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f000 fcf9 	bl	8009494 <_Bfree>
 8008aa2:	4639      	mov	r1, r7
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 fcf5 	bl	8009494 <_Bfree>
 8008aaa:	e6a5      	b.n	80087f8 <_dtoa_r+0x6d8>
 8008aac:	2600      	movs	r6, #0
 8008aae:	4637      	mov	r7, r6
 8008ab0:	e7e1      	b.n	8008a76 <_dtoa_r+0x956>
 8008ab2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008ab4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008ab8:	4637      	mov	r7, r6
 8008aba:	e599      	b.n	80085f0 <_dtoa_r+0x4d0>
 8008abc:	9b08      	ldr	r3, [sp, #32]
 8008abe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 80fd 	beq.w	8008cc2 <_dtoa_r+0xba2>
 8008ac8:	2d00      	cmp	r5, #0
 8008aca:	dd05      	ble.n	8008ad8 <_dtoa_r+0x9b8>
 8008acc:	4639      	mov	r1, r7
 8008ace:	462a      	mov	r2, r5
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 fefb 	bl	80098cc <__lshift>
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	9b06      	ldr	r3, [sp, #24]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d05c      	beq.n	8008b98 <_dtoa_r+0xa78>
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f000 fc97 	bl	8009414 <_Balloc>
 8008ae6:	4605      	mov	r5, r0
 8008ae8:	b928      	cbnz	r0, 8008af6 <_dtoa_r+0x9d6>
 8008aea:	4b80      	ldr	r3, [pc, #512]	; (8008cec <_dtoa_r+0xbcc>)
 8008aec:	4602      	mov	r2, r0
 8008aee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008af2:	f7ff bb2e 	b.w	8008152 <_dtoa_r+0x32>
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	3202      	adds	r2, #2
 8008afa:	0092      	lsls	r2, r2, #2
 8008afc:	f107 010c 	add.w	r1, r7, #12
 8008b00:	300c      	adds	r0, #12
 8008b02:	f7fd fd15 	bl	8006530 <memcpy>
 8008b06:	2201      	movs	r2, #1
 8008b08:	4629      	mov	r1, r5
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	f000 fede 	bl	80098cc <__lshift>
 8008b10:	9b00      	ldr	r3, [sp, #0]
 8008b12:	3301      	adds	r3, #1
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	9b00      	ldr	r3, [sp, #0]
 8008b18:	444b      	add	r3, r9
 8008b1a:	9307      	str	r3, [sp, #28]
 8008b1c:	9b02      	ldr	r3, [sp, #8]
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	46b8      	mov	r8, r7
 8008b24:	9306      	str	r3, [sp, #24]
 8008b26:	4607      	mov	r7, r0
 8008b28:	9b01      	ldr	r3, [sp, #4]
 8008b2a:	4631      	mov	r1, r6
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	4658      	mov	r0, fp
 8008b30:	9302      	str	r3, [sp, #8]
 8008b32:	f7ff fa67 	bl	8008004 <quorem>
 8008b36:	4603      	mov	r3, r0
 8008b38:	3330      	adds	r3, #48	; 0x30
 8008b3a:	9004      	str	r0, [sp, #16]
 8008b3c:	4641      	mov	r1, r8
 8008b3e:	4658      	mov	r0, fp
 8008b40:	9308      	str	r3, [sp, #32]
 8008b42:	f000 ff2f 	bl	80099a4 <__mcmp>
 8008b46:	463a      	mov	r2, r7
 8008b48:	4681      	mov	r9, r0
 8008b4a:	4631      	mov	r1, r6
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 ff45 	bl	80099dc <__mdiff>
 8008b52:	68c2      	ldr	r2, [r0, #12]
 8008b54:	9b08      	ldr	r3, [sp, #32]
 8008b56:	4605      	mov	r5, r0
 8008b58:	bb02      	cbnz	r2, 8008b9c <_dtoa_r+0xa7c>
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	4658      	mov	r0, fp
 8008b5e:	f000 ff21 	bl	80099a4 <__mcmp>
 8008b62:	9b08      	ldr	r3, [sp, #32]
 8008b64:	4602      	mov	r2, r0
 8008b66:	4629      	mov	r1, r5
 8008b68:	4620      	mov	r0, r4
 8008b6a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008b6e:	f000 fc91 	bl	8009494 <_Bfree>
 8008b72:	9b05      	ldr	r3, [sp, #20]
 8008b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b76:	9d01      	ldr	r5, [sp, #4]
 8008b78:	ea43 0102 	orr.w	r1, r3, r2
 8008b7c:	9b06      	ldr	r3, [sp, #24]
 8008b7e:	430b      	orrs	r3, r1
 8008b80:	9b08      	ldr	r3, [sp, #32]
 8008b82:	d10d      	bne.n	8008ba0 <_dtoa_r+0xa80>
 8008b84:	2b39      	cmp	r3, #57	; 0x39
 8008b86:	d029      	beq.n	8008bdc <_dtoa_r+0xabc>
 8008b88:	f1b9 0f00 	cmp.w	r9, #0
 8008b8c:	dd01      	ble.n	8008b92 <_dtoa_r+0xa72>
 8008b8e:	9b04      	ldr	r3, [sp, #16]
 8008b90:	3331      	adds	r3, #49	; 0x31
 8008b92:	9a02      	ldr	r2, [sp, #8]
 8008b94:	7013      	strb	r3, [r2, #0]
 8008b96:	e774      	b.n	8008a82 <_dtoa_r+0x962>
 8008b98:	4638      	mov	r0, r7
 8008b9a:	e7b9      	b.n	8008b10 <_dtoa_r+0x9f0>
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	e7e2      	b.n	8008b66 <_dtoa_r+0xa46>
 8008ba0:	f1b9 0f00 	cmp.w	r9, #0
 8008ba4:	db06      	blt.n	8008bb4 <_dtoa_r+0xa94>
 8008ba6:	9905      	ldr	r1, [sp, #20]
 8008ba8:	ea41 0909 	orr.w	r9, r1, r9
 8008bac:	9906      	ldr	r1, [sp, #24]
 8008bae:	ea59 0101 	orrs.w	r1, r9, r1
 8008bb2:	d120      	bne.n	8008bf6 <_dtoa_r+0xad6>
 8008bb4:	2a00      	cmp	r2, #0
 8008bb6:	ddec      	ble.n	8008b92 <_dtoa_r+0xa72>
 8008bb8:	4659      	mov	r1, fp
 8008bba:	2201      	movs	r2, #1
 8008bbc:	4620      	mov	r0, r4
 8008bbe:	9301      	str	r3, [sp, #4]
 8008bc0:	f000 fe84 	bl	80098cc <__lshift>
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4683      	mov	fp, r0
 8008bc8:	f000 feec 	bl	80099a4 <__mcmp>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	9b01      	ldr	r3, [sp, #4]
 8008bd0:	dc02      	bgt.n	8008bd8 <_dtoa_r+0xab8>
 8008bd2:	d1de      	bne.n	8008b92 <_dtoa_r+0xa72>
 8008bd4:	07da      	lsls	r2, r3, #31
 8008bd6:	d5dc      	bpl.n	8008b92 <_dtoa_r+0xa72>
 8008bd8:	2b39      	cmp	r3, #57	; 0x39
 8008bda:	d1d8      	bne.n	8008b8e <_dtoa_r+0xa6e>
 8008bdc:	9a02      	ldr	r2, [sp, #8]
 8008bde:	2339      	movs	r3, #57	; 0x39
 8008be0:	7013      	strb	r3, [r2, #0]
 8008be2:	462b      	mov	r3, r5
 8008be4:	461d      	mov	r5, r3
 8008be6:	3b01      	subs	r3, #1
 8008be8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008bec:	2a39      	cmp	r2, #57	; 0x39
 8008bee:	d050      	beq.n	8008c92 <_dtoa_r+0xb72>
 8008bf0:	3201      	adds	r2, #1
 8008bf2:	701a      	strb	r2, [r3, #0]
 8008bf4:	e745      	b.n	8008a82 <_dtoa_r+0x962>
 8008bf6:	2a00      	cmp	r2, #0
 8008bf8:	dd03      	ble.n	8008c02 <_dtoa_r+0xae2>
 8008bfa:	2b39      	cmp	r3, #57	; 0x39
 8008bfc:	d0ee      	beq.n	8008bdc <_dtoa_r+0xabc>
 8008bfe:	3301      	adds	r3, #1
 8008c00:	e7c7      	b.n	8008b92 <_dtoa_r+0xa72>
 8008c02:	9a01      	ldr	r2, [sp, #4]
 8008c04:	9907      	ldr	r1, [sp, #28]
 8008c06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c0a:	428a      	cmp	r2, r1
 8008c0c:	d02a      	beq.n	8008c64 <_dtoa_r+0xb44>
 8008c0e:	4659      	mov	r1, fp
 8008c10:	2300      	movs	r3, #0
 8008c12:	220a      	movs	r2, #10
 8008c14:	4620      	mov	r0, r4
 8008c16:	f000 fc5f 	bl	80094d8 <__multadd>
 8008c1a:	45b8      	cmp	r8, r7
 8008c1c:	4683      	mov	fp, r0
 8008c1e:	f04f 0300 	mov.w	r3, #0
 8008c22:	f04f 020a 	mov.w	r2, #10
 8008c26:	4641      	mov	r1, r8
 8008c28:	4620      	mov	r0, r4
 8008c2a:	d107      	bne.n	8008c3c <_dtoa_r+0xb1c>
 8008c2c:	f000 fc54 	bl	80094d8 <__multadd>
 8008c30:	4680      	mov	r8, r0
 8008c32:	4607      	mov	r7, r0
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	3301      	adds	r3, #1
 8008c38:	9301      	str	r3, [sp, #4]
 8008c3a:	e775      	b.n	8008b28 <_dtoa_r+0xa08>
 8008c3c:	f000 fc4c 	bl	80094d8 <__multadd>
 8008c40:	4639      	mov	r1, r7
 8008c42:	4680      	mov	r8, r0
 8008c44:	2300      	movs	r3, #0
 8008c46:	220a      	movs	r2, #10
 8008c48:	4620      	mov	r0, r4
 8008c4a:	f000 fc45 	bl	80094d8 <__multadd>
 8008c4e:	4607      	mov	r7, r0
 8008c50:	e7f0      	b.n	8008c34 <_dtoa_r+0xb14>
 8008c52:	f1b9 0f00 	cmp.w	r9, #0
 8008c56:	9a00      	ldr	r2, [sp, #0]
 8008c58:	bfcc      	ite	gt
 8008c5a:	464d      	movgt	r5, r9
 8008c5c:	2501      	movle	r5, #1
 8008c5e:	4415      	add	r5, r2
 8008c60:	f04f 0800 	mov.w	r8, #0
 8008c64:	4659      	mov	r1, fp
 8008c66:	2201      	movs	r2, #1
 8008c68:	4620      	mov	r0, r4
 8008c6a:	9301      	str	r3, [sp, #4]
 8008c6c:	f000 fe2e 	bl	80098cc <__lshift>
 8008c70:	4631      	mov	r1, r6
 8008c72:	4683      	mov	fp, r0
 8008c74:	f000 fe96 	bl	80099a4 <__mcmp>
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dcb2      	bgt.n	8008be2 <_dtoa_r+0xac2>
 8008c7c:	d102      	bne.n	8008c84 <_dtoa_r+0xb64>
 8008c7e:	9b01      	ldr	r3, [sp, #4]
 8008c80:	07db      	lsls	r3, r3, #31
 8008c82:	d4ae      	bmi.n	8008be2 <_dtoa_r+0xac2>
 8008c84:	462b      	mov	r3, r5
 8008c86:	461d      	mov	r5, r3
 8008c88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c8c:	2a30      	cmp	r2, #48	; 0x30
 8008c8e:	d0fa      	beq.n	8008c86 <_dtoa_r+0xb66>
 8008c90:	e6f7      	b.n	8008a82 <_dtoa_r+0x962>
 8008c92:	9a00      	ldr	r2, [sp, #0]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d1a5      	bne.n	8008be4 <_dtoa_r+0xac4>
 8008c98:	f10a 0a01 	add.w	sl, sl, #1
 8008c9c:	2331      	movs	r3, #49	; 0x31
 8008c9e:	e779      	b.n	8008b94 <_dtoa_r+0xa74>
 8008ca0:	4b13      	ldr	r3, [pc, #76]	; (8008cf0 <_dtoa_r+0xbd0>)
 8008ca2:	f7ff baaf 	b.w	8008204 <_dtoa_r+0xe4>
 8008ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	f47f aa86 	bne.w	80081ba <_dtoa_r+0x9a>
 8008cae:	4b11      	ldr	r3, [pc, #68]	; (8008cf4 <_dtoa_r+0xbd4>)
 8008cb0:	f7ff baa8 	b.w	8008204 <_dtoa_r+0xe4>
 8008cb4:	f1b9 0f00 	cmp.w	r9, #0
 8008cb8:	dc03      	bgt.n	8008cc2 <_dtoa_r+0xba2>
 8008cba:	9b05      	ldr	r3, [sp, #20]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	f73f aec9 	bgt.w	8008a54 <_dtoa_r+0x934>
 8008cc2:	9d00      	ldr	r5, [sp, #0]
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4658      	mov	r0, fp
 8008cc8:	f7ff f99c 	bl	8008004 <quorem>
 8008ccc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008cd0:	f805 3b01 	strb.w	r3, [r5], #1
 8008cd4:	9a00      	ldr	r2, [sp, #0]
 8008cd6:	1aaa      	subs	r2, r5, r2
 8008cd8:	4591      	cmp	r9, r2
 8008cda:	ddba      	ble.n	8008c52 <_dtoa_r+0xb32>
 8008cdc:	4659      	mov	r1, fp
 8008cde:	2300      	movs	r3, #0
 8008ce0:	220a      	movs	r2, #10
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fbf8 	bl	80094d8 <__multadd>
 8008ce8:	4683      	mov	fp, r0
 8008cea:	e7eb      	b.n	8008cc4 <_dtoa_r+0xba4>
 8008cec:	0800b0dc 	.word	0x0800b0dc
 8008cf0:	0800aedc 	.word	0x0800aedc
 8008cf4:	0800b059 	.word	0x0800b059

08008cf8 <rshift>:
 8008cf8:	6903      	ldr	r3, [r0, #16]
 8008cfa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008cfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d02:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008d06:	f100 0414 	add.w	r4, r0, #20
 8008d0a:	dd45      	ble.n	8008d98 <rshift+0xa0>
 8008d0c:	f011 011f 	ands.w	r1, r1, #31
 8008d10:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008d14:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008d18:	d10c      	bne.n	8008d34 <rshift+0x3c>
 8008d1a:	f100 0710 	add.w	r7, r0, #16
 8008d1e:	4629      	mov	r1, r5
 8008d20:	42b1      	cmp	r1, r6
 8008d22:	d334      	bcc.n	8008d8e <rshift+0x96>
 8008d24:	1a9b      	subs	r3, r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	1eea      	subs	r2, r5, #3
 8008d2a:	4296      	cmp	r6, r2
 8008d2c:	bf38      	it	cc
 8008d2e:	2300      	movcc	r3, #0
 8008d30:	4423      	add	r3, r4
 8008d32:	e015      	b.n	8008d60 <rshift+0x68>
 8008d34:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008d38:	f1c1 0820 	rsb	r8, r1, #32
 8008d3c:	40cf      	lsrs	r7, r1
 8008d3e:	f105 0e04 	add.w	lr, r5, #4
 8008d42:	46a1      	mov	r9, r4
 8008d44:	4576      	cmp	r6, lr
 8008d46:	46f4      	mov	ip, lr
 8008d48:	d815      	bhi.n	8008d76 <rshift+0x7e>
 8008d4a:	1a9b      	subs	r3, r3, r2
 8008d4c:	009a      	lsls	r2, r3, #2
 8008d4e:	3a04      	subs	r2, #4
 8008d50:	3501      	adds	r5, #1
 8008d52:	42ae      	cmp	r6, r5
 8008d54:	bf38      	it	cc
 8008d56:	2200      	movcc	r2, #0
 8008d58:	18a3      	adds	r3, r4, r2
 8008d5a:	50a7      	str	r7, [r4, r2]
 8008d5c:	b107      	cbz	r7, 8008d60 <rshift+0x68>
 8008d5e:	3304      	adds	r3, #4
 8008d60:	1b1a      	subs	r2, r3, r4
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008d68:	bf08      	it	eq
 8008d6a:	2300      	moveq	r3, #0
 8008d6c:	6102      	str	r2, [r0, #16]
 8008d6e:	bf08      	it	eq
 8008d70:	6143      	streq	r3, [r0, #20]
 8008d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d76:	f8dc c000 	ldr.w	ip, [ip]
 8008d7a:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d7e:	ea4c 0707 	orr.w	r7, ip, r7
 8008d82:	f849 7b04 	str.w	r7, [r9], #4
 8008d86:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d8a:	40cf      	lsrs	r7, r1
 8008d8c:	e7da      	b.n	8008d44 <rshift+0x4c>
 8008d8e:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d92:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d96:	e7c3      	b.n	8008d20 <rshift+0x28>
 8008d98:	4623      	mov	r3, r4
 8008d9a:	e7e1      	b.n	8008d60 <rshift+0x68>

08008d9c <__hexdig_fun>:
 8008d9c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008da0:	2b09      	cmp	r3, #9
 8008da2:	d802      	bhi.n	8008daa <__hexdig_fun+0xe>
 8008da4:	3820      	subs	r0, #32
 8008da6:	b2c0      	uxtb	r0, r0
 8008da8:	4770      	bx	lr
 8008daa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008dae:	2b05      	cmp	r3, #5
 8008db0:	d801      	bhi.n	8008db6 <__hexdig_fun+0x1a>
 8008db2:	3847      	subs	r0, #71	; 0x47
 8008db4:	e7f7      	b.n	8008da6 <__hexdig_fun+0xa>
 8008db6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008dba:	2b05      	cmp	r3, #5
 8008dbc:	d801      	bhi.n	8008dc2 <__hexdig_fun+0x26>
 8008dbe:	3827      	subs	r0, #39	; 0x27
 8008dc0:	e7f1      	b.n	8008da6 <__hexdig_fun+0xa>
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	4770      	bx	lr
	...

08008dc8 <__gethex>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	ed2d 8b02 	vpush	{d8}
 8008dd0:	b089      	sub	sp, #36	; 0x24
 8008dd2:	ee08 0a10 	vmov	s16, r0
 8008dd6:	9304      	str	r3, [sp, #16]
 8008dd8:	4bbc      	ldr	r3, [pc, #752]	; (80090cc <__gethex+0x304>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	4618      	mov	r0, r3
 8008de0:	468b      	mov	fp, r1
 8008de2:	4690      	mov	r8, r2
 8008de4:	f7f7 f9fc 	bl	80001e0 <strlen>
 8008de8:	9b01      	ldr	r3, [sp, #4]
 8008dea:	f8db 2000 	ldr.w	r2, [fp]
 8008dee:	4403      	add	r3, r0
 8008df0:	4682      	mov	sl, r0
 8008df2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008df6:	9305      	str	r3, [sp, #20]
 8008df8:	1c93      	adds	r3, r2, #2
 8008dfa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008dfe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008e02:	32fe      	adds	r2, #254	; 0xfe
 8008e04:	18d1      	adds	r1, r2, r3
 8008e06:	461f      	mov	r7, r3
 8008e08:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008e0c:	9100      	str	r1, [sp, #0]
 8008e0e:	2830      	cmp	r0, #48	; 0x30
 8008e10:	d0f8      	beq.n	8008e04 <__gethex+0x3c>
 8008e12:	f7ff ffc3 	bl	8008d9c <__hexdig_fun>
 8008e16:	4604      	mov	r4, r0
 8008e18:	2800      	cmp	r0, #0
 8008e1a:	d13a      	bne.n	8008e92 <__gethex+0xca>
 8008e1c:	9901      	ldr	r1, [sp, #4]
 8008e1e:	4652      	mov	r2, sl
 8008e20:	4638      	mov	r0, r7
 8008e22:	f001 f9e1 	bl	800a1e8 <strncmp>
 8008e26:	4605      	mov	r5, r0
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d168      	bne.n	8008efe <__gethex+0x136>
 8008e2c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008e30:	eb07 060a 	add.w	r6, r7, sl
 8008e34:	f7ff ffb2 	bl	8008d9c <__hexdig_fun>
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d062      	beq.n	8008f02 <__gethex+0x13a>
 8008e3c:	4633      	mov	r3, r6
 8008e3e:	7818      	ldrb	r0, [r3, #0]
 8008e40:	2830      	cmp	r0, #48	; 0x30
 8008e42:	461f      	mov	r7, r3
 8008e44:	f103 0301 	add.w	r3, r3, #1
 8008e48:	d0f9      	beq.n	8008e3e <__gethex+0x76>
 8008e4a:	f7ff ffa7 	bl	8008d9c <__hexdig_fun>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	fab0 f480 	clz	r4, r0
 8008e54:	0964      	lsrs	r4, r4, #5
 8008e56:	4635      	mov	r5, r6
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	463a      	mov	r2, r7
 8008e5c:	4616      	mov	r6, r2
 8008e5e:	3201      	adds	r2, #1
 8008e60:	7830      	ldrb	r0, [r6, #0]
 8008e62:	f7ff ff9b 	bl	8008d9c <__hexdig_fun>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d1f8      	bne.n	8008e5c <__gethex+0x94>
 8008e6a:	9901      	ldr	r1, [sp, #4]
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	4630      	mov	r0, r6
 8008e70:	f001 f9ba 	bl	800a1e8 <strncmp>
 8008e74:	b980      	cbnz	r0, 8008e98 <__gethex+0xd0>
 8008e76:	b94d      	cbnz	r5, 8008e8c <__gethex+0xc4>
 8008e78:	eb06 050a 	add.w	r5, r6, sl
 8008e7c:	462a      	mov	r2, r5
 8008e7e:	4616      	mov	r6, r2
 8008e80:	3201      	adds	r2, #1
 8008e82:	7830      	ldrb	r0, [r6, #0]
 8008e84:	f7ff ff8a 	bl	8008d9c <__hexdig_fun>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	d1f8      	bne.n	8008e7e <__gethex+0xb6>
 8008e8c:	1bad      	subs	r5, r5, r6
 8008e8e:	00ad      	lsls	r5, r5, #2
 8008e90:	e004      	b.n	8008e9c <__gethex+0xd4>
 8008e92:	2400      	movs	r4, #0
 8008e94:	4625      	mov	r5, r4
 8008e96:	e7e0      	b.n	8008e5a <__gethex+0x92>
 8008e98:	2d00      	cmp	r5, #0
 8008e9a:	d1f7      	bne.n	8008e8c <__gethex+0xc4>
 8008e9c:	7833      	ldrb	r3, [r6, #0]
 8008e9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008ea2:	2b50      	cmp	r3, #80	; 0x50
 8008ea4:	d13b      	bne.n	8008f1e <__gethex+0x156>
 8008ea6:	7873      	ldrb	r3, [r6, #1]
 8008ea8:	2b2b      	cmp	r3, #43	; 0x2b
 8008eaa:	d02c      	beq.n	8008f06 <__gethex+0x13e>
 8008eac:	2b2d      	cmp	r3, #45	; 0x2d
 8008eae:	d02e      	beq.n	8008f0e <__gethex+0x146>
 8008eb0:	1c71      	adds	r1, r6, #1
 8008eb2:	f04f 0900 	mov.w	r9, #0
 8008eb6:	7808      	ldrb	r0, [r1, #0]
 8008eb8:	f7ff ff70 	bl	8008d9c <__hexdig_fun>
 8008ebc:	1e43      	subs	r3, r0, #1
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b18      	cmp	r3, #24
 8008ec2:	d82c      	bhi.n	8008f1e <__gethex+0x156>
 8008ec4:	f1a0 0210 	sub.w	r2, r0, #16
 8008ec8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ecc:	f7ff ff66 	bl	8008d9c <__hexdig_fun>
 8008ed0:	1e43      	subs	r3, r0, #1
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b18      	cmp	r3, #24
 8008ed6:	d91d      	bls.n	8008f14 <__gethex+0x14c>
 8008ed8:	f1b9 0f00 	cmp.w	r9, #0
 8008edc:	d000      	beq.n	8008ee0 <__gethex+0x118>
 8008ede:	4252      	negs	r2, r2
 8008ee0:	4415      	add	r5, r2
 8008ee2:	f8cb 1000 	str.w	r1, [fp]
 8008ee6:	b1e4      	cbz	r4, 8008f22 <__gethex+0x15a>
 8008ee8:	9b00      	ldr	r3, [sp, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bf14      	ite	ne
 8008eee:	2700      	movne	r7, #0
 8008ef0:	2706      	moveq	r7, #6
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	b009      	add	sp, #36	; 0x24
 8008ef6:	ecbd 8b02 	vpop	{d8}
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	463e      	mov	r6, r7
 8008f00:	4625      	mov	r5, r4
 8008f02:	2401      	movs	r4, #1
 8008f04:	e7ca      	b.n	8008e9c <__gethex+0xd4>
 8008f06:	f04f 0900 	mov.w	r9, #0
 8008f0a:	1cb1      	adds	r1, r6, #2
 8008f0c:	e7d3      	b.n	8008eb6 <__gethex+0xee>
 8008f0e:	f04f 0901 	mov.w	r9, #1
 8008f12:	e7fa      	b.n	8008f0a <__gethex+0x142>
 8008f14:	230a      	movs	r3, #10
 8008f16:	fb03 0202 	mla	r2, r3, r2, r0
 8008f1a:	3a10      	subs	r2, #16
 8008f1c:	e7d4      	b.n	8008ec8 <__gethex+0x100>
 8008f1e:	4631      	mov	r1, r6
 8008f20:	e7df      	b.n	8008ee2 <__gethex+0x11a>
 8008f22:	1bf3      	subs	r3, r6, r7
 8008f24:	3b01      	subs	r3, #1
 8008f26:	4621      	mov	r1, r4
 8008f28:	2b07      	cmp	r3, #7
 8008f2a:	dc0b      	bgt.n	8008f44 <__gethex+0x17c>
 8008f2c:	ee18 0a10 	vmov	r0, s16
 8008f30:	f000 fa70 	bl	8009414 <_Balloc>
 8008f34:	4604      	mov	r4, r0
 8008f36:	b940      	cbnz	r0, 8008f4a <__gethex+0x182>
 8008f38:	4b65      	ldr	r3, [pc, #404]	; (80090d0 <__gethex+0x308>)
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	21de      	movs	r1, #222	; 0xde
 8008f3e:	4865      	ldr	r0, [pc, #404]	; (80090d4 <__gethex+0x30c>)
 8008f40:	f001 f972 	bl	800a228 <__assert_func>
 8008f44:	3101      	adds	r1, #1
 8008f46:	105b      	asrs	r3, r3, #1
 8008f48:	e7ee      	b.n	8008f28 <__gethex+0x160>
 8008f4a:	f100 0914 	add.w	r9, r0, #20
 8008f4e:	f04f 0b00 	mov.w	fp, #0
 8008f52:	f1ca 0301 	rsb	r3, sl, #1
 8008f56:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f5a:	f8cd b000 	str.w	fp, [sp]
 8008f5e:	9306      	str	r3, [sp, #24]
 8008f60:	42b7      	cmp	r7, r6
 8008f62:	d340      	bcc.n	8008fe6 <__gethex+0x21e>
 8008f64:	9802      	ldr	r0, [sp, #8]
 8008f66:	9b00      	ldr	r3, [sp, #0]
 8008f68:	f840 3b04 	str.w	r3, [r0], #4
 8008f6c:	eba0 0009 	sub.w	r0, r0, r9
 8008f70:	1080      	asrs	r0, r0, #2
 8008f72:	0146      	lsls	r6, r0, #5
 8008f74:	6120      	str	r0, [r4, #16]
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 fb42 	bl	8009600 <__hi0bits>
 8008f7c:	1a30      	subs	r0, r6, r0
 8008f7e:	f8d8 6000 	ldr.w	r6, [r8]
 8008f82:	42b0      	cmp	r0, r6
 8008f84:	dd63      	ble.n	800904e <__gethex+0x286>
 8008f86:	1b87      	subs	r7, r0, r6
 8008f88:	4639      	mov	r1, r7
 8008f8a:	4620      	mov	r0, r4
 8008f8c:	f000 fedc 	bl	8009d48 <__any_on>
 8008f90:	4682      	mov	sl, r0
 8008f92:	b1a8      	cbz	r0, 8008fc0 <__gethex+0x1f8>
 8008f94:	1e7b      	subs	r3, r7, #1
 8008f96:	1159      	asrs	r1, r3, #5
 8008f98:	f003 021f 	and.w	r2, r3, #31
 8008f9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008fa0:	f04f 0a01 	mov.w	sl, #1
 8008fa4:	fa0a f202 	lsl.w	r2, sl, r2
 8008fa8:	420a      	tst	r2, r1
 8008faa:	d009      	beq.n	8008fc0 <__gethex+0x1f8>
 8008fac:	4553      	cmp	r3, sl
 8008fae:	dd05      	ble.n	8008fbc <__gethex+0x1f4>
 8008fb0:	1eb9      	subs	r1, r7, #2
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 fec8 	bl	8009d48 <__any_on>
 8008fb8:	2800      	cmp	r0, #0
 8008fba:	d145      	bne.n	8009048 <__gethex+0x280>
 8008fbc:	f04f 0a02 	mov.w	sl, #2
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7ff fe98 	bl	8008cf8 <rshift>
 8008fc8:	443d      	add	r5, r7
 8008fca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008fce:	42ab      	cmp	r3, r5
 8008fd0:	da4c      	bge.n	800906c <__gethex+0x2a4>
 8008fd2:	ee18 0a10 	vmov	r0, s16
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	f000 fa5c 	bl	8009494 <_Bfree>
 8008fdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008fde:	2300      	movs	r3, #0
 8008fe0:	6013      	str	r3, [r2, #0]
 8008fe2:	27a3      	movs	r7, #163	; 0xa3
 8008fe4:	e785      	b.n	8008ef2 <__gethex+0x12a>
 8008fe6:	1e73      	subs	r3, r6, #1
 8008fe8:	9a05      	ldr	r2, [sp, #20]
 8008fea:	9303      	str	r3, [sp, #12]
 8008fec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d019      	beq.n	8009028 <__gethex+0x260>
 8008ff4:	f1bb 0f20 	cmp.w	fp, #32
 8008ff8:	d107      	bne.n	800900a <__gethex+0x242>
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	9a00      	ldr	r2, [sp, #0]
 8008ffe:	f843 2b04 	str.w	r2, [r3], #4
 8009002:	9302      	str	r3, [sp, #8]
 8009004:	2300      	movs	r3, #0
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	469b      	mov	fp, r3
 800900a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800900e:	f7ff fec5 	bl	8008d9c <__hexdig_fun>
 8009012:	9b00      	ldr	r3, [sp, #0]
 8009014:	f000 000f 	and.w	r0, r0, #15
 8009018:	fa00 f00b 	lsl.w	r0, r0, fp
 800901c:	4303      	orrs	r3, r0
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	f10b 0b04 	add.w	fp, fp, #4
 8009024:	9b03      	ldr	r3, [sp, #12]
 8009026:	e00d      	b.n	8009044 <__gethex+0x27c>
 8009028:	9b03      	ldr	r3, [sp, #12]
 800902a:	9a06      	ldr	r2, [sp, #24]
 800902c:	4413      	add	r3, r2
 800902e:	42bb      	cmp	r3, r7
 8009030:	d3e0      	bcc.n	8008ff4 <__gethex+0x22c>
 8009032:	4618      	mov	r0, r3
 8009034:	9901      	ldr	r1, [sp, #4]
 8009036:	9307      	str	r3, [sp, #28]
 8009038:	4652      	mov	r2, sl
 800903a:	f001 f8d5 	bl	800a1e8 <strncmp>
 800903e:	9b07      	ldr	r3, [sp, #28]
 8009040:	2800      	cmp	r0, #0
 8009042:	d1d7      	bne.n	8008ff4 <__gethex+0x22c>
 8009044:	461e      	mov	r6, r3
 8009046:	e78b      	b.n	8008f60 <__gethex+0x198>
 8009048:	f04f 0a03 	mov.w	sl, #3
 800904c:	e7b8      	b.n	8008fc0 <__gethex+0x1f8>
 800904e:	da0a      	bge.n	8009066 <__gethex+0x29e>
 8009050:	1a37      	subs	r7, r6, r0
 8009052:	4621      	mov	r1, r4
 8009054:	ee18 0a10 	vmov	r0, s16
 8009058:	463a      	mov	r2, r7
 800905a:	f000 fc37 	bl	80098cc <__lshift>
 800905e:	1bed      	subs	r5, r5, r7
 8009060:	4604      	mov	r4, r0
 8009062:	f100 0914 	add.w	r9, r0, #20
 8009066:	f04f 0a00 	mov.w	sl, #0
 800906a:	e7ae      	b.n	8008fca <__gethex+0x202>
 800906c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009070:	42a8      	cmp	r0, r5
 8009072:	dd72      	ble.n	800915a <__gethex+0x392>
 8009074:	1b45      	subs	r5, r0, r5
 8009076:	42ae      	cmp	r6, r5
 8009078:	dc36      	bgt.n	80090e8 <__gethex+0x320>
 800907a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800907e:	2b02      	cmp	r3, #2
 8009080:	d02a      	beq.n	80090d8 <__gethex+0x310>
 8009082:	2b03      	cmp	r3, #3
 8009084:	d02c      	beq.n	80090e0 <__gethex+0x318>
 8009086:	2b01      	cmp	r3, #1
 8009088:	d115      	bne.n	80090b6 <__gethex+0x2ee>
 800908a:	42ae      	cmp	r6, r5
 800908c:	d113      	bne.n	80090b6 <__gethex+0x2ee>
 800908e:	2e01      	cmp	r6, #1
 8009090:	d10b      	bne.n	80090aa <__gethex+0x2e2>
 8009092:	9a04      	ldr	r2, [sp, #16]
 8009094:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009098:	6013      	str	r3, [r2, #0]
 800909a:	2301      	movs	r3, #1
 800909c:	6123      	str	r3, [r4, #16]
 800909e:	f8c9 3000 	str.w	r3, [r9]
 80090a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80090a4:	2762      	movs	r7, #98	; 0x62
 80090a6:	601c      	str	r4, [r3, #0]
 80090a8:	e723      	b.n	8008ef2 <__gethex+0x12a>
 80090aa:	1e71      	subs	r1, r6, #1
 80090ac:	4620      	mov	r0, r4
 80090ae:	f000 fe4b 	bl	8009d48 <__any_on>
 80090b2:	2800      	cmp	r0, #0
 80090b4:	d1ed      	bne.n	8009092 <__gethex+0x2ca>
 80090b6:	ee18 0a10 	vmov	r0, s16
 80090ba:	4621      	mov	r1, r4
 80090bc:	f000 f9ea 	bl	8009494 <_Bfree>
 80090c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090c2:	2300      	movs	r3, #0
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	2750      	movs	r7, #80	; 0x50
 80090c8:	e713      	b.n	8008ef2 <__gethex+0x12a>
 80090ca:	bf00      	nop
 80090cc:	0800b158 	.word	0x0800b158
 80090d0:	0800b0dc 	.word	0x0800b0dc
 80090d4:	0800b0ed 	.word	0x0800b0ed
 80090d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1eb      	bne.n	80090b6 <__gethex+0x2ee>
 80090de:	e7d8      	b.n	8009092 <__gethex+0x2ca>
 80090e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1d5      	bne.n	8009092 <__gethex+0x2ca>
 80090e6:	e7e6      	b.n	80090b6 <__gethex+0x2ee>
 80090e8:	1e6f      	subs	r7, r5, #1
 80090ea:	f1ba 0f00 	cmp.w	sl, #0
 80090ee:	d131      	bne.n	8009154 <__gethex+0x38c>
 80090f0:	b127      	cbz	r7, 80090fc <__gethex+0x334>
 80090f2:	4639      	mov	r1, r7
 80090f4:	4620      	mov	r0, r4
 80090f6:	f000 fe27 	bl	8009d48 <__any_on>
 80090fa:	4682      	mov	sl, r0
 80090fc:	117b      	asrs	r3, r7, #5
 80090fe:	2101      	movs	r1, #1
 8009100:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009104:	f007 071f 	and.w	r7, r7, #31
 8009108:	fa01 f707 	lsl.w	r7, r1, r7
 800910c:	421f      	tst	r7, r3
 800910e:	4629      	mov	r1, r5
 8009110:	4620      	mov	r0, r4
 8009112:	bf18      	it	ne
 8009114:	f04a 0a02 	orrne.w	sl, sl, #2
 8009118:	1b76      	subs	r6, r6, r5
 800911a:	f7ff fded 	bl	8008cf8 <rshift>
 800911e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009122:	2702      	movs	r7, #2
 8009124:	f1ba 0f00 	cmp.w	sl, #0
 8009128:	d048      	beq.n	80091bc <__gethex+0x3f4>
 800912a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800912e:	2b02      	cmp	r3, #2
 8009130:	d015      	beq.n	800915e <__gethex+0x396>
 8009132:	2b03      	cmp	r3, #3
 8009134:	d017      	beq.n	8009166 <__gethex+0x39e>
 8009136:	2b01      	cmp	r3, #1
 8009138:	d109      	bne.n	800914e <__gethex+0x386>
 800913a:	f01a 0f02 	tst.w	sl, #2
 800913e:	d006      	beq.n	800914e <__gethex+0x386>
 8009140:	f8d9 0000 	ldr.w	r0, [r9]
 8009144:	ea4a 0a00 	orr.w	sl, sl, r0
 8009148:	f01a 0f01 	tst.w	sl, #1
 800914c:	d10e      	bne.n	800916c <__gethex+0x3a4>
 800914e:	f047 0710 	orr.w	r7, r7, #16
 8009152:	e033      	b.n	80091bc <__gethex+0x3f4>
 8009154:	f04f 0a01 	mov.w	sl, #1
 8009158:	e7d0      	b.n	80090fc <__gethex+0x334>
 800915a:	2701      	movs	r7, #1
 800915c:	e7e2      	b.n	8009124 <__gethex+0x35c>
 800915e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009160:	f1c3 0301 	rsb	r3, r3, #1
 8009164:	9315      	str	r3, [sp, #84]	; 0x54
 8009166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009168:	2b00      	cmp	r3, #0
 800916a:	d0f0      	beq.n	800914e <__gethex+0x386>
 800916c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009170:	f104 0314 	add.w	r3, r4, #20
 8009174:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009178:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800917c:	f04f 0c00 	mov.w	ip, #0
 8009180:	4618      	mov	r0, r3
 8009182:	f853 2b04 	ldr.w	r2, [r3], #4
 8009186:	f1b2 3fff 	cmp.w	r2, #4294967295
 800918a:	d01c      	beq.n	80091c6 <__gethex+0x3fe>
 800918c:	3201      	adds	r2, #1
 800918e:	6002      	str	r2, [r0, #0]
 8009190:	2f02      	cmp	r7, #2
 8009192:	f104 0314 	add.w	r3, r4, #20
 8009196:	d13f      	bne.n	8009218 <__gethex+0x450>
 8009198:	f8d8 2000 	ldr.w	r2, [r8]
 800919c:	3a01      	subs	r2, #1
 800919e:	42b2      	cmp	r2, r6
 80091a0:	d10a      	bne.n	80091b8 <__gethex+0x3f0>
 80091a2:	1171      	asrs	r1, r6, #5
 80091a4:	2201      	movs	r2, #1
 80091a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80091aa:	f006 061f 	and.w	r6, r6, #31
 80091ae:	fa02 f606 	lsl.w	r6, r2, r6
 80091b2:	421e      	tst	r6, r3
 80091b4:	bf18      	it	ne
 80091b6:	4617      	movne	r7, r2
 80091b8:	f047 0720 	orr.w	r7, r7, #32
 80091bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091be:	601c      	str	r4, [r3, #0]
 80091c0:	9b04      	ldr	r3, [sp, #16]
 80091c2:	601d      	str	r5, [r3, #0]
 80091c4:	e695      	b.n	8008ef2 <__gethex+0x12a>
 80091c6:	4299      	cmp	r1, r3
 80091c8:	f843 cc04 	str.w	ip, [r3, #-4]
 80091cc:	d8d8      	bhi.n	8009180 <__gethex+0x3b8>
 80091ce:	68a3      	ldr	r3, [r4, #8]
 80091d0:	459b      	cmp	fp, r3
 80091d2:	db19      	blt.n	8009208 <__gethex+0x440>
 80091d4:	6861      	ldr	r1, [r4, #4]
 80091d6:	ee18 0a10 	vmov	r0, s16
 80091da:	3101      	adds	r1, #1
 80091dc:	f000 f91a 	bl	8009414 <_Balloc>
 80091e0:	4681      	mov	r9, r0
 80091e2:	b918      	cbnz	r0, 80091ec <__gethex+0x424>
 80091e4:	4b1a      	ldr	r3, [pc, #104]	; (8009250 <__gethex+0x488>)
 80091e6:	4602      	mov	r2, r0
 80091e8:	2184      	movs	r1, #132	; 0x84
 80091ea:	e6a8      	b.n	8008f3e <__gethex+0x176>
 80091ec:	6922      	ldr	r2, [r4, #16]
 80091ee:	3202      	adds	r2, #2
 80091f0:	f104 010c 	add.w	r1, r4, #12
 80091f4:	0092      	lsls	r2, r2, #2
 80091f6:	300c      	adds	r0, #12
 80091f8:	f7fd f99a 	bl	8006530 <memcpy>
 80091fc:	4621      	mov	r1, r4
 80091fe:	ee18 0a10 	vmov	r0, s16
 8009202:	f000 f947 	bl	8009494 <_Bfree>
 8009206:	464c      	mov	r4, r9
 8009208:	6923      	ldr	r3, [r4, #16]
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009210:	6122      	str	r2, [r4, #16]
 8009212:	2201      	movs	r2, #1
 8009214:	615a      	str	r2, [r3, #20]
 8009216:	e7bb      	b.n	8009190 <__gethex+0x3c8>
 8009218:	6922      	ldr	r2, [r4, #16]
 800921a:	455a      	cmp	r2, fp
 800921c:	dd0b      	ble.n	8009236 <__gethex+0x46e>
 800921e:	2101      	movs	r1, #1
 8009220:	4620      	mov	r0, r4
 8009222:	f7ff fd69 	bl	8008cf8 <rshift>
 8009226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800922a:	3501      	adds	r5, #1
 800922c:	42ab      	cmp	r3, r5
 800922e:	f6ff aed0 	blt.w	8008fd2 <__gethex+0x20a>
 8009232:	2701      	movs	r7, #1
 8009234:	e7c0      	b.n	80091b8 <__gethex+0x3f0>
 8009236:	f016 061f 	ands.w	r6, r6, #31
 800923a:	d0fa      	beq.n	8009232 <__gethex+0x46a>
 800923c:	449a      	add	sl, r3
 800923e:	f1c6 0620 	rsb	r6, r6, #32
 8009242:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009246:	f000 f9db 	bl	8009600 <__hi0bits>
 800924a:	42b0      	cmp	r0, r6
 800924c:	dbe7      	blt.n	800921e <__gethex+0x456>
 800924e:	e7f0      	b.n	8009232 <__gethex+0x46a>
 8009250:	0800b0dc 	.word	0x0800b0dc

08009254 <L_shift>:
 8009254:	f1c2 0208 	rsb	r2, r2, #8
 8009258:	0092      	lsls	r2, r2, #2
 800925a:	b570      	push	{r4, r5, r6, lr}
 800925c:	f1c2 0620 	rsb	r6, r2, #32
 8009260:	6843      	ldr	r3, [r0, #4]
 8009262:	6804      	ldr	r4, [r0, #0]
 8009264:	fa03 f506 	lsl.w	r5, r3, r6
 8009268:	432c      	orrs	r4, r5
 800926a:	40d3      	lsrs	r3, r2
 800926c:	6004      	str	r4, [r0, #0]
 800926e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009272:	4288      	cmp	r0, r1
 8009274:	d3f4      	bcc.n	8009260 <L_shift+0xc>
 8009276:	bd70      	pop	{r4, r5, r6, pc}

08009278 <__match>:
 8009278:	b530      	push	{r4, r5, lr}
 800927a:	6803      	ldr	r3, [r0, #0]
 800927c:	3301      	adds	r3, #1
 800927e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009282:	b914      	cbnz	r4, 800928a <__match+0x12>
 8009284:	6003      	str	r3, [r0, #0]
 8009286:	2001      	movs	r0, #1
 8009288:	bd30      	pop	{r4, r5, pc}
 800928a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800928e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009292:	2d19      	cmp	r5, #25
 8009294:	bf98      	it	ls
 8009296:	3220      	addls	r2, #32
 8009298:	42a2      	cmp	r2, r4
 800929a:	d0f0      	beq.n	800927e <__match+0x6>
 800929c:	2000      	movs	r0, #0
 800929e:	e7f3      	b.n	8009288 <__match+0x10>

080092a0 <__hexnan>:
 80092a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	680b      	ldr	r3, [r1, #0]
 80092a6:	6801      	ldr	r1, [r0, #0]
 80092a8:	115e      	asrs	r6, r3, #5
 80092aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80092ae:	f013 031f 	ands.w	r3, r3, #31
 80092b2:	b087      	sub	sp, #28
 80092b4:	bf18      	it	ne
 80092b6:	3604      	addne	r6, #4
 80092b8:	2500      	movs	r5, #0
 80092ba:	1f37      	subs	r7, r6, #4
 80092bc:	4682      	mov	sl, r0
 80092be:	4690      	mov	r8, r2
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80092c6:	46b9      	mov	r9, r7
 80092c8:	463c      	mov	r4, r7
 80092ca:	9502      	str	r5, [sp, #8]
 80092cc:	46ab      	mov	fp, r5
 80092ce:	784a      	ldrb	r2, [r1, #1]
 80092d0:	1c4b      	adds	r3, r1, #1
 80092d2:	9303      	str	r3, [sp, #12]
 80092d4:	b342      	cbz	r2, 8009328 <__hexnan+0x88>
 80092d6:	4610      	mov	r0, r2
 80092d8:	9105      	str	r1, [sp, #20]
 80092da:	9204      	str	r2, [sp, #16]
 80092dc:	f7ff fd5e 	bl	8008d9c <__hexdig_fun>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d14f      	bne.n	8009384 <__hexnan+0xe4>
 80092e4:	9a04      	ldr	r2, [sp, #16]
 80092e6:	9905      	ldr	r1, [sp, #20]
 80092e8:	2a20      	cmp	r2, #32
 80092ea:	d818      	bhi.n	800931e <__hexnan+0x7e>
 80092ec:	9b02      	ldr	r3, [sp, #8]
 80092ee:	459b      	cmp	fp, r3
 80092f0:	dd13      	ble.n	800931a <__hexnan+0x7a>
 80092f2:	454c      	cmp	r4, r9
 80092f4:	d206      	bcs.n	8009304 <__hexnan+0x64>
 80092f6:	2d07      	cmp	r5, #7
 80092f8:	dc04      	bgt.n	8009304 <__hexnan+0x64>
 80092fa:	462a      	mov	r2, r5
 80092fc:	4649      	mov	r1, r9
 80092fe:	4620      	mov	r0, r4
 8009300:	f7ff ffa8 	bl	8009254 <L_shift>
 8009304:	4544      	cmp	r4, r8
 8009306:	d950      	bls.n	80093aa <__hexnan+0x10a>
 8009308:	2300      	movs	r3, #0
 800930a:	f1a4 0904 	sub.w	r9, r4, #4
 800930e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009312:	f8cd b008 	str.w	fp, [sp, #8]
 8009316:	464c      	mov	r4, r9
 8009318:	461d      	mov	r5, r3
 800931a:	9903      	ldr	r1, [sp, #12]
 800931c:	e7d7      	b.n	80092ce <__hexnan+0x2e>
 800931e:	2a29      	cmp	r2, #41	; 0x29
 8009320:	d156      	bne.n	80093d0 <__hexnan+0x130>
 8009322:	3102      	adds	r1, #2
 8009324:	f8ca 1000 	str.w	r1, [sl]
 8009328:	f1bb 0f00 	cmp.w	fp, #0
 800932c:	d050      	beq.n	80093d0 <__hexnan+0x130>
 800932e:	454c      	cmp	r4, r9
 8009330:	d206      	bcs.n	8009340 <__hexnan+0xa0>
 8009332:	2d07      	cmp	r5, #7
 8009334:	dc04      	bgt.n	8009340 <__hexnan+0xa0>
 8009336:	462a      	mov	r2, r5
 8009338:	4649      	mov	r1, r9
 800933a:	4620      	mov	r0, r4
 800933c:	f7ff ff8a 	bl	8009254 <L_shift>
 8009340:	4544      	cmp	r4, r8
 8009342:	d934      	bls.n	80093ae <__hexnan+0x10e>
 8009344:	f1a8 0204 	sub.w	r2, r8, #4
 8009348:	4623      	mov	r3, r4
 800934a:	f853 1b04 	ldr.w	r1, [r3], #4
 800934e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009352:	429f      	cmp	r7, r3
 8009354:	d2f9      	bcs.n	800934a <__hexnan+0xaa>
 8009356:	1b3b      	subs	r3, r7, r4
 8009358:	f023 0303 	bic.w	r3, r3, #3
 800935c:	3304      	adds	r3, #4
 800935e:	3401      	adds	r4, #1
 8009360:	3e03      	subs	r6, #3
 8009362:	42b4      	cmp	r4, r6
 8009364:	bf88      	it	hi
 8009366:	2304      	movhi	r3, #4
 8009368:	4443      	add	r3, r8
 800936a:	2200      	movs	r2, #0
 800936c:	f843 2b04 	str.w	r2, [r3], #4
 8009370:	429f      	cmp	r7, r3
 8009372:	d2fb      	bcs.n	800936c <__hexnan+0xcc>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	b91b      	cbnz	r3, 8009380 <__hexnan+0xe0>
 8009378:	4547      	cmp	r7, r8
 800937a:	d127      	bne.n	80093cc <__hexnan+0x12c>
 800937c:	2301      	movs	r3, #1
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	2005      	movs	r0, #5
 8009382:	e026      	b.n	80093d2 <__hexnan+0x132>
 8009384:	3501      	adds	r5, #1
 8009386:	2d08      	cmp	r5, #8
 8009388:	f10b 0b01 	add.w	fp, fp, #1
 800938c:	dd06      	ble.n	800939c <__hexnan+0xfc>
 800938e:	4544      	cmp	r4, r8
 8009390:	d9c3      	bls.n	800931a <__hexnan+0x7a>
 8009392:	2300      	movs	r3, #0
 8009394:	f844 3c04 	str.w	r3, [r4, #-4]
 8009398:	2501      	movs	r5, #1
 800939a:	3c04      	subs	r4, #4
 800939c:	6822      	ldr	r2, [r4, #0]
 800939e:	f000 000f 	and.w	r0, r0, #15
 80093a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80093a6:	6022      	str	r2, [r4, #0]
 80093a8:	e7b7      	b.n	800931a <__hexnan+0x7a>
 80093aa:	2508      	movs	r5, #8
 80093ac:	e7b5      	b.n	800931a <__hexnan+0x7a>
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d0df      	beq.n	8009374 <__hexnan+0xd4>
 80093b4:	f04f 32ff 	mov.w	r2, #4294967295
 80093b8:	f1c3 0320 	rsb	r3, r3, #32
 80093bc:	fa22 f303 	lsr.w	r3, r2, r3
 80093c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80093c4:	401a      	ands	r2, r3
 80093c6:	f846 2c04 	str.w	r2, [r6, #-4]
 80093ca:	e7d3      	b.n	8009374 <__hexnan+0xd4>
 80093cc:	3f04      	subs	r7, #4
 80093ce:	e7d1      	b.n	8009374 <__hexnan+0xd4>
 80093d0:	2004      	movs	r0, #4
 80093d2:	b007      	add	sp, #28
 80093d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080093d8 <_localeconv_r>:
 80093d8:	4800      	ldr	r0, [pc, #0]	; (80093dc <_localeconv_r+0x4>)
 80093da:	4770      	bx	lr
 80093dc:	20000178 	.word	0x20000178

080093e0 <malloc>:
 80093e0:	4b02      	ldr	r3, [pc, #8]	; (80093ec <malloc+0xc>)
 80093e2:	4601      	mov	r1, r0
 80093e4:	6818      	ldr	r0, [r3, #0]
 80093e6:	f000 bd2f 	b.w	8009e48 <_malloc_r>
 80093ea:	bf00      	nop
 80093ec:	20000020 	.word	0x20000020

080093f0 <__ascii_mbtowc>:
 80093f0:	b082      	sub	sp, #8
 80093f2:	b901      	cbnz	r1, 80093f6 <__ascii_mbtowc+0x6>
 80093f4:	a901      	add	r1, sp, #4
 80093f6:	b142      	cbz	r2, 800940a <__ascii_mbtowc+0x1a>
 80093f8:	b14b      	cbz	r3, 800940e <__ascii_mbtowc+0x1e>
 80093fa:	7813      	ldrb	r3, [r2, #0]
 80093fc:	600b      	str	r3, [r1, #0]
 80093fe:	7812      	ldrb	r2, [r2, #0]
 8009400:	1e10      	subs	r0, r2, #0
 8009402:	bf18      	it	ne
 8009404:	2001      	movne	r0, #1
 8009406:	b002      	add	sp, #8
 8009408:	4770      	bx	lr
 800940a:	4610      	mov	r0, r2
 800940c:	e7fb      	b.n	8009406 <__ascii_mbtowc+0x16>
 800940e:	f06f 0001 	mvn.w	r0, #1
 8009412:	e7f8      	b.n	8009406 <__ascii_mbtowc+0x16>

08009414 <_Balloc>:
 8009414:	b570      	push	{r4, r5, r6, lr}
 8009416:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009418:	4604      	mov	r4, r0
 800941a:	460d      	mov	r5, r1
 800941c:	b976      	cbnz	r6, 800943c <_Balloc+0x28>
 800941e:	2010      	movs	r0, #16
 8009420:	f7ff ffde 	bl	80093e0 <malloc>
 8009424:	4602      	mov	r2, r0
 8009426:	6260      	str	r0, [r4, #36]	; 0x24
 8009428:	b920      	cbnz	r0, 8009434 <_Balloc+0x20>
 800942a:	4b18      	ldr	r3, [pc, #96]	; (800948c <_Balloc+0x78>)
 800942c:	4818      	ldr	r0, [pc, #96]	; (8009490 <_Balloc+0x7c>)
 800942e:	2166      	movs	r1, #102	; 0x66
 8009430:	f000 fefa 	bl	800a228 <__assert_func>
 8009434:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009438:	6006      	str	r6, [r0, #0]
 800943a:	60c6      	str	r6, [r0, #12]
 800943c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800943e:	68f3      	ldr	r3, [r6, #12]
 8009440:	b183      	cbz	r3, 8009464 <_Balloc+0x50>
 8009442:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800944a:	b9b8      	cbnz	r0, 800947c <_Balloc+0x68>
 800944c:	2101      	movs	r1, #1
 800944e:	fa01 f605 	lsl.w	r6, r1, r5
 8009452:	1d72      	adds	r2, r6, #5
 8009454:	0092      	lsls	r2, r2, #2
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fc97 	bl	8009d8a <_calloc_r>
 800945c:	b160      	cbz	r0, 8009478 <_Balloc+0x64>
 800945e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009462:	e00e      	b.n	8009482 <_Balloc+0x6e>
 8009464:	2221      	movs	r2, #33	; 0x21
 8009466:	2104      	movs	r1, #4
 8009468:	4620      	mov	r0, r4
 800946a:	f000 fc8e 	bl	8009d8a <_calloc_r>
 800946e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009470:	60f0      	str	r0, [r6, #12]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e4      	bne.n	8009442 <_Balloc+0x2e>
 8009478:	2000      	movs	r0, #0
 800947a:	bd70      	pop	{r4, r5, r6, pc}
 800947c:	6802      	ldr	r2, [r0, #0]
 800947e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009482:	2300      	movs	r3, #0
 8009484:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009488:	e7f7      	b.n	800947a <_Balloc+0x66>
 800948a:	bf00      	nop
 800948c:	0800b066 	.word	0x0800b066
 8009490:	0800b16c 	.word	0x0800b16c

08009494 <_Bfree>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009498:	4605      	mov	r5, r0
 800949a:	460c      	mov	r4, r1
 800949c:	b976      	cbnz	r6, 80094bc <_Bfree+0x28>
 800949e:	2010      	movs	r0, #16
 80094a0:	f7ff ff9e 	bl	80093e0 <malloc>
 80094a4:	4602      	mov	r2, r0
 80094a6:	6268      	str	r0, [r5, #36]	; 0x24
 80094a8:	b920      	cbnz	r0, 80094b4 <_Bfree+0x20>
 80094aa:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <_Bfree+0x3c>)
 80094ac:	4809      	ldr	r0, [pc, #36]	; (80094d4 <_Bfree+0x40>)
 80094ae:	218a      	movs	r1, #138	; 0x8a
 80094b0:	f000 feba 	bl	800a228 <__assert_func>
 80094b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094b8:	6006      	str	r6, [r0, #0]
 80094ba:	60c6      	str	r6, [r0, #12]
 80094bc:	b13c      	cbz	r4, 80094ce <_Bfree+0x3a>
 80094be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80094c0:	6862      	ldr	r2, [r4, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094c8:	6021      	str	r1, [r4, #0]
 80094ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094ce:	bd70      	pop	{r4, r5, r6, pc}
 80094d0:	0800b066 	.word	0x0800b066
 80094d4:	0800b16c 	.word	0x0800b16c

080094d8 <__multadd>:
 80094d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094dc:	690e      	ldr	r6, [r1, #16]
 80094de:	4607      	mov	r7, r0
 80094e0:	4698      	mov	r8, r3
 80094e2:	460c      	mov	r4, r1
 80094e4:	f101 0014 	add.w	r0, r1, #20
 80094e8:	2300      	movs	r3, #0
 80094ea:	6805      	ldr	r5, [r0, #0]
 80094ec:	b2a9      	uxth	r1, r5
 80094ee:	fb02 8101 	mla	r1, r2, r1, r8
 80094f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80094f6:	0c2d      	lsrs	r5, r5, #16
 80094f8:	fb02 c505 	mla	r5, r2, r5, ip
 80094fc:	b289      	uxth	r1, r1
 80094fe:	3301      	adds	r3, #1
 8009500:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009504:	429e      	cmp	r6, r3
 8009506:	f840 1b04 	str.w	r1, [r0], #4
 800950a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800950e:	dcec      	bgt.n	80094ea <__multadd+0x12>
 8009510:	f1b8 0f00 	cmp.w	r8, #0
 8009514:	d022      	beq.n	800955c <__multadd+0x84>
 8009516:	68a3      	ldr	r3, [r4, #8]
 8009518:	42b3      	cmp	r3, r6
 800951a:	dc19      	bgt.n	8009550 <__multadd+0x78>
 800951c:	6861      	ldr	r1, [r4, #4]
 800951e:	4638      	mov	r0, r7
 8009520:	3101      	adds	r1, #1
 8009522:	f7ff ff77 	bl	8009414 <_Balloc>
 8009526:	4605      	mov	r5, r0
 8009528:	b928      	cbnz	r0, 8009536 <__multadd+0x5e>
 800952a:	4602      	mov	r2, r0
 800952c:	4b0d      	ldr	r3, [pc, #52]	; (8009564 <__multadd+0x8c>)
 800952e:	480e      	ldr	r0, [pc, #56]	; (8009568 <__multadd+0x90>)
 8009530:	21b5      	movs	r1, #181	; 0xb5
 8009532:	f000 fe79 	bl	800a228 <__assert_func>
 8009536:	6922      	ldr	r2, [r4, #16]
 8009538:	3202      	adds	r2, #2
 800953a:	f104 010c 	add.w	r1, r4, #12
 800953e:	0092      	lsls	r2, r2, #2
 8009540:	300c      	adds	r0, #12
 8009542:	f7fc fff5 	bl	8006530 <memcpy>
 8009546:	4621      	mov	r1, r4
 8009548:	4638      	mov	r0, r7
 800954a:	f7ff ffa3 	bl	8009494 <_Bfree>
 800954e:	462c      	mov	r4, r5
 8009550:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009554:	3601      	adds	r6, #1
 8009556:	f8c3 8014 	str.w	r8, [r3, #20]
 800955a:	6126      	str	r6, [r4, #16]
 800955c:	4620      	mov	r0, r4
 800955e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009562:	bf00      	nop
 8009564:	0800b0dc 	.word	0x0800b0dc
 8009568:	0800b16c 	.word	0x0800b16c

0800956c <__s2b>:
 800956c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009570:	460c      	mov	r4, r1
 8009572:	4615      	mov	r5, r2
 8009574:	461f      	mov	r7, r3
 8009576:	2209      	movs	r2, #9
 8009578:	3308      	adds	r3, #8
 800957a:	4606      	mov	r6, r0
 800957c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009580:	2100      	movs	r1, #0
 8009582:	2201      	movs	r2, #1
 8009584:	429a      	cmp	r2, r3
 8009586:	db09      	blt.n	800959c <__s2b+0x30>
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff ff43 	bl	8009414 <_Balloc>
 800958e:	b940      	cbnz	r0, 80095a2 <__s2b+0x36>
 8009590:	4602      	mov	r2, r0
 8009592:	4b19      	ldr	r3, [pc, #100]	; (80095f8 <__s2b+0x8c>)
 8009594:	4819      	ldr	r0, [pc, #100]	; (80095fc <__s2b+0x90>)
 8009596:	21ce      	movs	r1, #206	; 0xce
 8009598:	f000 fe46 	bl	800a228 <__assert_func>
 800959c:	0052      	lsls	r2, r2, #1
 800959e:	3101      	adds	r1, #1
 80095a0:	e7f0      	b.n	8009584 <__s2b+0x18>
 80095a2:	9b08      	ldr	r3, [sp, #32]
 80095a4:	6143      	str	r3, [r0, #20]
 80095a6:	2d09      	cmp	r5, #9
 80095a8:	f04f 0301 	mov.w	r3, #1
 80095ac:	6103      	str	r3, [r0, #16]
 80095ae:	dd16      	ble.n	80095de <__s2b+0x72>
 80095b0:	f104 0909 	add.w	r9, r4, #9
 80095b4:	46c8      	mov	r8, r9
 80095b6:	442c      	add	r4, r5
 80095b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80095bc:	4601      	mov	r1, r0
 80095be:	3b30      	subs	r3, #48	; 0x30
 80095c0:	220a      	movs	r2, #10
 80095c2:	4630      	mov	r0, r6
 80095c4:	f7ff ff88 	bl	80094d8 <__multadd>
 80095c8:	45a0      	cmp	r8, r4
 80095ca:	d1f5      	bne.n	80095b8 <__s2b+0x4c>
 80095cc:	f1a5 0408 	sub.w	r4, r5, #8
 80095d0:	444c      	add	r4, r9
 80095d2:	1b2d      	subs	r5, r5, r4
 80095d4:	1963      	adds	r3, r4, r5
 80095d6:	42bb      	cmp	r3, r7
 80095d8:	db04      	blt.n	80095e4 <__s2b+0x78>
 80095da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095de:	340a      	adds	r4, #10
 80095e0:	2509      	movs	r5, #9
 80095e2:	e7f6      	b.n	80095d2 <__s2b+0x66>
 80095e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095e8:	4601      	mov	r1, r0
 80095ea:	3b30      	subs	r3, #48	; 0x30
 80095ec:	220a      	movs	r2, #10
 80095ee:	4630      	mov	r0, r6
 80095f0:	f7ff ff72 	bl	80094d8 <__multadd>
 80095f4:	e7ee      	b.n	80095d4 <__s2b+0x68>
 80095f6:	bf00      	nop
 80095f8:	0800b0dc 	.word	0x0800b0dc
 80095fc:	0800b16c 	.word	0x0800b16c

08009600 <__hi0bits>:
 8009600:	0c03      	lsrs	r3, r0, #16
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	b9d3      	cbnz	r3, 800963c <__hi0bits+0x3c>
 8009606:	0400      	lsls	r0, r0, #16
 8009608:	2310      	movs	r3, #16
 800960a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800960e:	bf04      	itt	eq
 8009610:	0200      	lsleq	r0, r0, #8
 8009612:	3308      	addeq	r3, #8
 8009614:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009618:	bf04      	itt	eq
 800961a:	0100      	lsleq	r0, r0, #4
 800961c:	3304      	addeq	r3, #4
 800961e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009622:	bf04      	itt	eq
 8009624:	0080      	lsleq	r0, r0, #2
 8009626:	3302      	addeq	r3, #2
 8009628:	2800      	cmp	r0, #0
 800962a:	db05      	blt.n	8009638 <__hi0bits+0x38>
 800962c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009630:	f103 0301 	add.w	r3, r3, #1
 8009634:	bf08      	it	eq
 8009636:	2320      	moveq	r3, #32
 8009638:	4618      	mov	r0, r3
 800963a:	4770      	bx	lr
 800963c:	2300      	movs	r3, #0
 800963e:	e7e4      	b.n	800960a <__hi0bits+0xa>

08009640 <__lo0bits>:
 8009640:	6803      	ldr	r3, [r0, #0]
 8009642:	f013 0207 	ands.w	r2, r3, #7
 8009646:	4601      	mov	r1, r0
 8009648:	d00b      	beq.n	8009662 <__lo0bits+0x22>
 800964a:	07da      	lsls	r2, r3, #31
 800964c:	d424      	bmi.n	8009698 <__lo0bits+0x58>
 800964e:	0798      	lsls	r0, r3, #30
 8009650:	bf49      	itett	mi
 8009652:	085b      	lsrmi	r3, r3, #1
 8009654:	089b      	lsrpl	r3, r3, #2
 8009656:	2001      	movmi	r0, #1
 8009658:	600b      	strmi	r3, [r1, #0]
 800965a:	bf5c      	itt	pl
 800965c:	600b      	strpl	r3, [r1, #0]
 800965e:	2002      	movpl	r0, #2
 8009660:	4770      	bx	lr
 8009662:	b298      	uxth	r0, r3
 8009664:	b9b0      	cbnz	r0, 8009694 <__lo0bits+0x54>
 8009666:	0c1b      	lsrs	r3, r3, #16
 8009668:	2010      	movs	r0, #16
 800966a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800966e:	bf04      	itt	eq
 8009670:	0a1b      	lsreq	r3, r3, #8
 8009672:	3008      	addeq	r0, #8
 8009674:	071a      	lsls	r2, r3, #28
 8009676:	bf04      	itt	eq
 8009678:	091b      	lsreq	r3, r3, #4
 800967a:	3004      	addeq	r0, #4
 800967c:	079a      	lsls	r2, r3, #30
 800967e:	bf04      	itt	eq
 8009680:	089b      	lsreq	r3, r3, #2
 8009682:	3002      	addeq	r0, #2
 8009684:	07da      	lsls	r2, r3, #31
 8009686:	d403      	bmi.n	8009690 <__lo0bits+0x50>
 8009688:	085b      	lsrs	r3, r3, #1
 800968a:	f100 0001 	add.w	r0, r0, #1
 800968e:	d005      	beq.n	800969c <__lo0bits+0x5c>
 8009690:	600b      	str	r3, [r1, #0]
 8009692:	4770      	bx	lr
 8009694:	4610      	mov	r0, r2
 8009696:	e7e8      	b.n	800966a <__lo0bits+0x2a>
 8009698:	2000      	movs	r0, #0
 800969a:	4770      	bx	lr
 800969c:	2020      	movs	r0, #32
 800969e:	4770      	bx	lr

080096a0 <__i2b>:
 80096a0:	b510      	push	{r4, lr}
 80096a2:	460c      	mov	r4, r1
 80096a4:	2101      	movs	r1, #1
 80096a6:	f7ff feb5 	bl	8009414 <_Balloc>
 80096aa:	4602      	mov	r2, r0
 80096ac:	b928      	cbnz	r0, 80096ba <__i2b+0x1a>
 80096ae:	4b05      	ldr	r3, [pc, #20]	; (80096c4 <__i2b+0x24>)
 80096b0:	4805      	ldr	r0, [pc, #20]	; (80096c8 <__i2b+0x28>)
 80096b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80096b6:	f000 fdb7 	bl	800a228 <__assert_func>
 80096ba:	2301      	movs	r3, #1
 80096bc:	6144      	str	r4, [r0, #20]
 80096be:	6103      	str	r3, [r0, #16]
 80096c0:	bd10      	pop	{r4, pc}
 80096c2:	bf00      	nop
 80096c4:	0800b0dc 	.word	0x0800b0dc
 80096c8:	0800b16c 	.word	0x0800b16c

080096cc <__multiply>:
 80096cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d0:	4614      	mov	r4, r2
 80096d2:	690a      	ldr	r2, [r1, #16]
 80096d4:	6923      	ldr	r3, [r4, #16]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	bfb8      	it	lt
 80096da:	460b      	movlt	r3, r1
 80096dc:	460d      	mov	r5, r1
 80096de:	bfbc      	itt	lt
 80096e0:	4625      	movlt	r5, r4
 80096e2:	461c      	movlt	r4, r3
 80096e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80096e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80096ec:	68ab      	ldr	r3, [r5, #8]
 80096ee:	6869      	ldr	r1, [r5, #4]
 80096f0:	eb0a 0709 	add.w	r7, sl, r9
 80096f4:	42bb      	cmp	r3, r7
 80096f6:	b085      	sub	sp, #20
 80096f8:	bfb8      	it	lt
 80096fa:	3101      	addlt	r1, #1
 80096fc:	f7ff fe8a 	bl	8009414 <_Balloc>
 8009700:	b930      	cbnz	r0, 8009710 <__multiply+0x44>
 8009702:	4602      	mov	r2, r0
 8009704:	4b42      	ldr	r3, [pc, #264]	; (8009810 <__multiply+0x144>)
 8009706:	4843      	ldr	r0, [pc, #268]	; (8009814 <__multiply+0x148>)
 8009708:	f240 115d 	movw	r1, #349	; 0x15d
 800970c:	f000 fd8c 	bl	800a228 <__assert_func>
 8009710:	f100 0614 	add.w	r6, r0, #20
 8009714:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009718:	4633      	mov	r3, r6
 800971a:	2200      	movs	r2, #0
 800971c:	4543      	cmp	r3, r8
 800971e:	d31e      	bcc.n	800975e <__multiply+0x92>
 8009720:	f105 0c14 	add.w	ip, r5, #20
 8009724:	f104 0314 	add.w	r3, r4, #20
 8009728:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800972c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009730:	9202      	str	r2, [sp, #8]
 8009732:	ebac 0205 	sub.w	r2, ip, r5
 8009736:	3a15      	subs	r2, #21
 8009738:	f022 0203 	bic.w	r2, r2, #3
 800973c:	3204      	adds	r2, #4
 800973e:	f105 0115 	add.w	r1, r5, #21
 8009742:	458c      	cmp	ip, r1
 8009744:	bf38      	it	cc
 8009746:	2204      	movcc	r2, #4
 8009748:	9201      	str	r2, [sp, #4]
 800974a:	9a02      	ldr	r2, [sp, #8]
 800974c:	9303      	str	r3, [sp, #12]
 800974e:	429a      	cmp	r2, r3
 8009750:	d808      	bhi.n	8009764 <__multiply+0x98>
 8009752:	2f00      	cmp	r7, #0
 8009754:	dc55      	bgt.n	8009802 <__multiply+0x136>
 8009756:	6107      	str	r7, [r0, #16]
 8009758:	b005      	add	sp, #20
 800975a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800975e:	f843 2b04 	str.w	r2, [r3], #4
 8009762:	e7db      	b.n	800971c <__multiply+0x50>
 8009764:	f8b3 a000 	ldrh.w	sl, [r3]
 8009768:	f1ba 0f00 	cmp.w	sl, #0
 800976c:	d020      	beq.n	80097b0 <__multiply+0xe4>
 800976e:	f105 0e14 	add.w	lr, r5, #20
 8009772:	46b1      	mov	r9, r6
 8009774:	2200      	movs	r2, #0
 8009776:	f85e 4b04 	ldr.w	r4, [lr], #4
 800977a:	f8d9 b000 	ldr.w	fp, [r9]
 800977e:	b2a1      	uxth	r1, r4
 8009780:	fa1f fb8b 	uxth.w	fp, fp
 8009784:	fb0a b101 	mla	r1, sl, r1, fp
 8009788:	4411      	add	r1, r2
 800978a:	f8d9 2000 	ldr.w	r2, [r9]
 800978e:	0c24      	lsrs	r4, r4, #16
 8009790:	0c12      	lsrs	r2, r2, #16
 8009792:	fb0a 2404 	mla	r4, sl, r4, r2
 8009796:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800979a:	b289      	uxth	r1, r1
 800979c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80097a0:	45f4      	cmp	ip, lr
 80097a2:	f849 1b04 	str.w	r1, [r9], #4
 80097a6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80097aa:	d8e4      	bhi.n	8009776 <__multiply+0xaa>
 80097ac:	9901      	ldr	r1, [sp, #4]
 80097ae:	5072      	str	r2, [r6, r1]
 80097b0:	9a03      	ldr	r2, [sp, #12]
 80097b2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097b6:	3304      	adds	r3, #4
 80097b8:	f1b9 0f00 	cmp.w	r9, #0
 80097bc:	d01f      	beq.n	80097fe <__multiply+0x132>
 80097be:	6834      	ldr	r4, [r6, #0]
 80097c0:	f105 0114 	add.w	r1, r5, #20
 80097c4:	46b6      	mov	lr, r6
 80097c6:	f04f 0a00 	mov.w	sl, #0
 80097ca:	880a      	ldrh	r2, [r1, #0]
 80097cc:	f8be b002 	ldrh.w	fp, [lr, #2]
 80097d0:	fb09 b202 	mla	r2, r9, r2, fp
 80097d4:	4492      	add	sl, r2
 80097d6:	b2a4      	uxth	r4, r4
 80097d8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80097dc:	f84e 4b04 	str.w	r4, [lr], #4
 80097e0:	f851 4b04 	ldr.w	r4, [r1], #4
 80097e4:	f8be 2000 	ldrh.w	r2, [lr]
 80097e8:	0c24      	lsrs	r4, r4, #16
 80097ea:	fb09 2404 	mla	r4, r9, r4, r2
 80097ee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80097f2:	458c      	cmp	ip, r1
 80097f4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80097f8:	d8e7      	bhi.n	80097ca <__multiply+0xfe>
 80097fa:	9a01      	ldr	r2, [sp, #4]
 80097fc:	50b4      	str	r4, [r6, r2]
 80097fe:	3604      	adds	r6, #4
 8009800:	e7a3      	b.n	800974a <__multiply+0x7e>
 8009802:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1a5      	bne.n	8009756 <__multiply+0x8a>
 800980a:	3f01      	subs	r7, #1
 800980c:	e7a1      	b.n	8009752 <__multiply+0x86>
 800980e:	bf00      	nop
 8009810:	0800b0dc 	.word	0x0800b0dc
 8009814:	0800b16c 	.word	0x0800b16c

08009818 <__pow5mult>:
 8009818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800981c:	4615      	mov	r5, r2
 800981e:	f012 0203 	ands.w	r2, r2, #3
 8009822:	4606      	mov	r6, r0
 8009824:	460f      	mov	r7, r1
 8009826:	d007      	beq.n	8009838 <__pow5mult+0x20>
 8009828:	4c25      	ldr	r4, [pc, #148]	; (80098c0 <__pow5mult+0xa8>)
 800982a:	3a01      	subs	r2, #1
 800982c:	2300      	movs	r3, #0
 800982e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009832:	f7ff fe51 	bl	80094d8 <__multadd>
 8009836:	4607      	mov	r7, r0
 8009838:	10ad      	asrs	r5, r5, #2
 800983a:	d03d      	beq.n	80098b8 <__pow5mult+0xa0>
 800983c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800983e:	b97c      	cbnz	r4, 8009860 <__pow5mult+0x48>
 8009840:	2010      	movs	r0, #16
 8009842:	f7ff fdcd 	bl	80093e0 <malloc>
 8009846:	4602      	mov	r2, r0
 8009848:	6270      	str	r0, [r6, #36]	; 0x24
 800984a:	b928      	cbnz	r0, 8009858 <__pow5mult+0x40>
 800984c:	4b1d      	ldr	r3, [pc, #116]	; (80098c4 <__pow5mult+0xac>)
 800984e:	481e      	ldr	r0, [pc, #120]	; (80098c8 <__pow5mult+0xb0>)
 8009850:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009854:	f000 fce8 	bl	800a228 <__assert_func>
 8009858:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800985c:	6004      	str	r4, [r0, #0]
 800985e:	60c4      	str	r4, [r0, #12]
 8009860:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009864:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009868:	b94c      	cbnz	r4, 800987e <__pow5mult+0x66>
 800986a:	f240 2171 	movw	r1, #625	; 0x271
 800986e:	4630      	mov	r0, r6
 8009870:	f7ff ff16 	bl	80096a0 <__i2b>
 8009874:	2300      	movs	r3, #0
 8009876:	f8c8 0008 	str.w	r0, [r8, #8]
 800987a:	4604      	mov	r4, r0
 800987c:	6003      	str	r3, [r0, #0]
 800987e:	f04f 0900 	mov.w	r9, #0
 8009882:	07eb      	lsls	r3, r5, #31
 8009884:	d50a      	bpl.n	800989c <__pow5mult+0x84>
 8009886:	4639      	mov	r1, r7
 8009888:	4622      	mov	r2, r4
 800988a:	4630      	mov	r0, r6
 800988c:	f7ff ff1e 	bl	80096cc <__multiply>
 8009890:	4639      	mov	r1, r7
 8009892:	4680      	mov	r8, r0
 8009894:	4630      	mov	r0, r6
 8009896:	f7ff fdfd 	bl	8009494 <_Bfree>
 800989a:	4647      	mov	r7, r8
 800989c:	106d      	asrs	r5, r5, #1
 800989e:	d00b      	beq.n	80098b8 <__pow5mult+0xa0>
 80098a0:	6820      	ldr	r0, [r4, #0]
 80098a2:	b938      	cbnz	r0, 80098b4 <__pow5mult+0x9c>
 80098a4:	4622      	mov	r2, r4
 80098a6:	4621      	mov	r1, r4
 80098a8:	4630      	mov	r0, r6
 80098aa:	f7ff ff0f 	bl	80096cc <__multiply>
 80098ae:	6020      	str	r0, [r4, #0]
 80098b0:	f8c0 9000 	str.w	r9, [r0]
 80098b4:	4604      	mov	r4, r0
 80098b6:	e7e4      	b.n	8009882 <__pow5mult+0x6a>
 80098b8:	4638      	mov	r0, r7
 80098ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098be:	bf00      	nop
 80098c0:	0800b2c0 	.word	0x0800b2c0
 80098c4:	0800b066 	.word	0x0800b066
 80098c8:	0800b16c 	.word	0x0800b16c

080098cc <__lshift>:
 80098cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d0:	460c      	mov	r4, r1
 80098d2:	6849      	ldr	r1, [r1, #4]
 80098d4:	6923      	ldr	r3, [r4, #16]
 80098d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098da:	68a3      	ldr	r3, [r4, #8]
 80098dc:	4607      	mov	r7, r0
 80098de:	4691      	mov	r9, r2
 80098e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098e4:	f108 0601 	add.w	r6, r8, #1
 80098e8:	42b3      	cmp	r3, r6
 80098ea:	db0b      	blt.n	8009904 <__lshift+0x38>
 80098ec:	4638      	mov	r0, r7
 80098ee:	f7ff fd91 	bl	8009414 <_Balloc>
 80098f2:	4605      	mov	r5, r0
 80098f4:	b948      	cbnz	r0, 800990a <__lshift+0x3e>
 80098f6:	4602      	mov	r2, r0
 80098f8:	4b28      	ldr	r3, [pc, #160]	; (800999c <__lshift+0xd0>)
 80098fa:	4829      	ldr	r0, [pc, #164]	; (80099a0 <__lshift+0xd4>)
 80098fc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009900:	f000 fc92 	bl	800a228 <__assert_func>
 8009904:	3101      	adds	r1, #1
 8009906:	005b      	lsls	r3, r3, #1
 8009908:	e7ee      	b.n	80098e8 <__lshift+0x1c>
 800990a:	2300      	movs	r3, #0
 800990c:	f100 0114 	add.w	r1, r0, #20
 8009910:	f100 0210 	add.w	r2, r0, #16
 8009914:	4618      	mov	r0, r3
 8009916:	4553      	cmp	r3, sl
 8009918:	db33      	blt.n	8009982 <__lshift+0xb6>
 800991a:	6920      	ldr	r0, [r4, #16]
 800991c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009920:	f104 0314 	add.w	r3, r4, #20
 8009924:	f019 091f 	ands.w	r9, r9, #31
 8009928:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800992c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009930:	d02b      	beq.n	800998a <__lshift+0xbe>
 8009932:	f1c9 0e20 	rsb	lr, r9, #32
 8009936:	468a      	mov	sl, r1
 8009938:	2200      	movs	r2, #0
 800993a:	6818      	ldr	r0, [r3, #0]
 800993c:	fa00 f009 	lsl.w	r0, r0, r9
 8009940:	4302      	orrs	r2, r0
 8009942:	f84a 2b04 	str.w	r2, [sl], #4
 8009946:	f853 2b04 	ldr.w	r2, [r3], #4
 800994a:	459c      	cmp	ip, r3
 800994c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009950:	d8f3      	bhi.n	800993a <__lshift+0x6e>
 8009952:	ebac 0304 	sub.w	r3, ip, r4
 8009956:	3b15      	subs	r3, #21
 8009958:	f023 0303 	bic.w	r3, r3, #3
 800995c:	3304      	adds	r3, #4
 800995e:	f104 0015 	add.w	r0, r4, #21
 8009962:	4584      	cmp	ip, r0
 8009964:	bf38      	it	cc
 8009966:	2304      	movcc	r3, #4
 8009968:	50ca      	str	r2, [r1, r3]
 800996a:	b10a      	cbz	r2, 8009970 <__lshift+0xa4>
 800996c:	f108 0602 	add.w	r6, r8, #2
 8009970:	3e01      	subs	r6, #1
 8009972:	4638      	mov	r0, r7
 8009974:	612e      	str	r6, [r5, #16]
 8009976:	4621      	mov	r1, r4
 8009978:	f7ff fd8c 	bl	8009494 <_Bfree>
 800997c:	4628      	mov	r0, r5
 800997e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009982:	f842 0f04 	str.w	r0, [r2, #4]!
 8009986:	3301      	adds	r3, #1
 8009988:	e7c5      	b.n	8009916 <__lshift+0x4a>
 800998a:	3904      	subs	r1, #4
 800998c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009990:	f841 2f04 	str.w	r2, [r1, #4]!
 8009994:	459c      	cmp	ip, r3
 8009996:	d8f9      	bhi.n	800998c <__lshift+0xc0>
 8009998:	e7ea      	b.n	8009970 <__lshift+0xa4>
 800999a:	bf00      	nop
 800999c:	0800b0dc 	.word	0x0800b0dc
 80099a0:	0800b16c 	.word	0x0800b16c

080099a4 <__mcmp>:
 80099a4:	b530      	push	{r4, r5, lr}
 80099a6:	6902      	ldr	r2, [r0, #16]
 80099a8:	690c      	ldr	r4, [r1, #16]
 80099aa:	1b12      	subs	r2, r2, r4
 80099ac:	d10e      	bne.n	80099cc <__mcmp+0x28>
 80099ae:	f100 0314 	add.w	r3, r0, #20
 80099b2:	3114      	adds	r1, #20
 80099b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80099b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099c4:	42a5      	cmp	r5, r4
 80099c6:	d003      	beq.n	80099d0 <__mcmp+0x2c>
 80099c8:	d305      	bcc.n	80099d6 <__mcmp+0x32>
 80099ca:	2201      	movs	r2, #1
 80099cc:	4610      	mov	r0, r2
 80099ce:	bd30      	pop	{r4, r5, pc}
 80099d0:	4283      	cmp	r3, r0
 80099d2:	d3f3      	bcc.n	80099bc <__mcmp+0x18>
 80099d4:	e7fa      	b.n	80099cc <__mcmp+0x28>
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	e7f7      	b.n	80099cc <__mcmp+0x28>

080099dc <__mdiff>:
 80099dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e0:	460c      	mov	r4, r1
 80099e2:	4606      	mov	r6, r0
 80099e4:	4611      	mov	r1, r2
 80099e6:	4620      	mov	r0, r4
 80099e8:	4617      	mov	r7, r2
 80099ea:	f7ff ffdb 	bl	80099a4 <__mcmp>
 80099ee:	1e05      	subs	r5, r0, #0
 80099f0:	d110      	bne.n	8009a14 <__mdiff+0x38>
 80099f2:	4629      	mov	r1, r5
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff fd0d 	bl	8009414 <_Balloc>
 80099fa:	b930      	cbnz	r0, 8009a0a <__mdiff+0x2e>
 80099fc:	4b39      	ldr	r3, [pc, #228]	; (8009ae4 <__mdiff+0x108>)
 80099fe:	4602      	mov	r2, r0
 8009a00:	f240 2132 	movw	r1, #562	; 0x232
 8009a04:	4838      	ldr	r0, [pc, #224]	; (8009ae8 <__mdiff+0x10c>)
 8009a06:	f000 fc0f 	bl	800a228 <__assert_func>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009a10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a14:	bfa4      	itt	ge
 8009a16:	463b      	movge	r3, r7
 8009a18:	4627      	movge	r7, r4
 8009a1a:	4630      	mov	r0, r6
 8009a1c:	6879      	ldr	r1, [r7, #4]
 8009a1e:	bfa6      	itte	ge
 8009a20:	461c      	movge	r4, r3
 8009a22:	2500      	movge	r5, #0
 8009a24:	2501      	movlt	r5, #1
 8009a26:	f7ff fcf5 	bl	8009414 <_Balloc>
 8009a2a:	b920      	cbnz	r0, 8009a36 <__mdiff+0x5a>
 8009a2c:	4b2d      	ldr	r3, [pc, #180]	; (8009ae4 <__mdiff+0x108>)
 8009a2e:	4602      	mov	r2, r0
 8009a30:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009a34:	e7e6      	b.n	8009a04 <__mdiff+0x28>
 8009a36:	693e      	ldr	r6, [r7, #16]
 8009a38:	60c5      	str	r5, [r0, #12]
 8009a3a:	6925      	ldr	r5, [r4, #16]
 8009a3c:	f107 0114 	add.w	r1, r7, #20
 8009a40:	f104 0914 	add.w	r9, r4, #20
 8009a44:	f100 0e14 	add.w	lr, r0, #20
 8009a48:	f107 0210 	add.w	r2, r7, #16
 8009a4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009a50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009a54:	46f2      	mov	sl, lr
 8009a56:	2700      	movs	r7, #0
 8009a58:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a60:	fa1f f883 	uxth.w	r8, r3
 8009a64:	fa17 f78b 	uxtah	r7, r7, fp
 8009a68:	0c1b      	lsrs	r3, r3, #16
 8009a6a:	eba7 0808 	sub.w	r8, r7, r8
 8009a6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a76:	fa1f f888 	uxth.w	r8, r8
 8009a7a:	141f      	asrs	r7, r3, #16
 8009a7c:	454d      	cmp	r5, r9
 8009a7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a82:	f84a 3b04 	str.w	r3, [sl], #4
 8009a86:	d8e7      	bhi.n	8009a58 <__mdiff+0x7c>
 8009a88:	1b2b      	subs	r3, r5, r4
 8009a8a:	3b15      	subs	r3, #21
 8009a8c:	f023 0303 	bic.w	r3, r3, #3
 8009a90:	3304      	adds	r3, #4
 8009a92:	3415      	adds	r4, #21
 8009a94:	42a5      	cmp	r5, r4
 8009a96:	bf38      	it	cc
 8009a98:	2304      	movcc	r3, #4
 8009a9a:	4419      	add	r1, r3
 8009a9c:	4473      	add	r3, lr
 8009a9e:	469e      	mov	lr, r3
 8009aa0:	460d      	mov	r5, r1
 8009aa2:	4565      	cmp	r5, ip
 8009aa4:	d30e      	bcc.n	8009ac4 <__mdiff+0xe8>
 8009aa6:	f10c 0203 	add.w	r2, ip, #3
 8009aaa:	1a52      	subs	r2, r2, r1
 8009aac:	f022 0203 	bic.w	r2, r2, #3
 8009ab0:	3903      	subs	r1, #3
 8009ab2:	458c      	cmp	ip, r1
 8009ab4:	bf38      	it	cc
 8009ab6:	2200      	movcc	r2, #0
 8009ab8:	441a      	add	r2, r3
 8009aba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009abe:	b17b      	cbz	r3, 8009ae0 <__mdiff+0x104>
 8009ac0:	6106      	str	r6, [r0, #16]
 8009ac2:	e7a5      	b.n	8009a10 <__mdiff+0x34>
 8009ac4:	f855 8b04 	ldr.w	r8, [r5], #4
 8009ac8:	fa17 f488 	uxtah	r4, r7, r8
 8009acc:	1422      	asrs	r2, r4, #16
 8009ace:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009ad2:	b2a4      	uxth	r4, r4
 8009ad4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009ad8:	f84e 4b04 	str.w	r4, [lr], #4
 8009adc:	1417      	asrs	r7, r2, #16
 8009ade:	e7e0      	b.n	8009aa2 <__mdiff+0xc6>
 8009ae0:	3e01      	subs	r6, #1
 8009ae2:	e7ea      	b.n	8009aba <__mdiff+0xde>
 8009ae4:	0800b0dc 	.word	0x0800b0dc
 8009ae8:	0800b16c 	.word	0x0800b16c

08009aec <__ulp>:
 8009aec:	b082      	sub	sp, #8
 8009aee:	ed8d 0b00 	vstr	d0, [sp]
 8009af2:	9b01      	ldr	r3, [sp, #4]
 8009af4:	4912      	ldr	r1, [pc, #72]	; (8009b40 <__ulp+0x54>)
 8009af6:	4019      	ands	r1, r3
 8009af8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009afc:	2900      	cmp	r1, #0
 8009afe:	dd05      	ble.n	8009b0c <__ulp+0x20>
 8009b00:	2200      	movs	r2, #0
 8009b02:	460b      	mov	r3, r1
 8009b04:	ec43 2b10 	vmov	d0, r2, r3
 8009b08:	b002      	add	sp, #8
 8009b0a:	4770      	bx	lr
 8009b0c:	4249      	negs	r1, r1
 8009b0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009b12:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009b16:	f04f 0200 	mov.w	r2, #0
 8009b1a:	f04f 0300 	mov.w	r3, #0
 8009b1e:	da04      	bge.n	8009b2a <__ulp+0x3e>
 8009b20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009b24:	fa41 f300 	asr.w	r3, r1, r0
 8009b28:	e7ec      	b.n	8009b04 <__ulp+0x18>
 8009b2a:	f1a0 0114 	sub.w	r1, r0, #20
 8009b2e:	291e      	cmp	r1, #30
 8009b30:	bfda      	itte	le
 8009b32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009b36:	fa20 f101 	lsrle.w	r1, r0, r1
 8009b3a:	2101      	movgt	r1, #1
 8009b3c:	460a      	mov	r2, r1
 8009b3e:	e7e1      	b.n	8009b04 <__ulp+0x18>
 8009b40:	7ff00000 	.word	0x7ff00000

08009b44 <__b2d>:
 8009b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b46:	6905      	ldr	r5, [r0, #16]
 8009b48:	f100 0714 	add.w	r7, r0, #20
 8009b4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009b50:	1f2e      	subs	r6, r5, #4
 8009b52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009b56:	4620      	mov	r0, r4
 8009b58:	f7ff fd52 	bl	8009600 <__hi0bits>
 8009b5c:	f1c0 0320 	rsb	r3, r0, #32
 8009b60:	280a      	cmp	r0, #10
 8009b62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009be0 <__b2d+0x9c>
 8009b66:	600b      	str	r3, [r1, #0]
 8009b68:	dc14      	bgt.n	8009b94 <__b2d+0x50>
 8009b6a:	f1c0 0e0b 	rsb	lr, r0, #11
 8009b6e:	fa24 f10e 	lsr.w	r1, r4, lr
 8009b72:	42b7      	cmp	r7, r6
 8009b74:	ea41 030c 	orr.w	r3, r1, ip
 8009b78:	bf34      	ite	cc
 8009b7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b7e:	2100      	movcs	r1, #0
 8009b80:	3015      	adds	r0, #21
 8009b82:	fa04 f000 	lsl.w	r0, r4, r0
 8009b86:	fa21 f10e 	lsr.w	r1, r1, lr
 8009b8a:	ea40 0201 	orr.w	r2, r0, r1
 8009b8e:	ec43 2b10 	vmov	d0, r2, r3
 8009b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b94:	42b7      	cmp	r7, r6
 8009b96:	bf3a      	itte	cc
 8009b98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009b9c:	f1a5 0608 	subcc.w	r6, r5, #8
 8009ba0:	2100      	movcs	r1, #0
 8009ba2:	380b      	subs	r0, #11
 8009ba4:	d017      	beq.n	8009bd6 <__b2d+0x92>
 8009ba6:	f1c0 0c20 	rsb	ip, r0, #32
 8009baa:	fa04 f500 	lsl.w	r5, r4, r0
 8009bae:	42be      	cmp	r6, r7
 8009bb0:	fa21 f40c 	lsr.w	r4, r1, ip
 8009bb4:	ea45 0504 	orr.w	r5, r5, r4
 8009bb8:	bf8c      	ite	hi
 8009bba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009bbe:	2400      	movls	r4, #0
 8009bc0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009bc4:	fa01 f000 	lsl.w	r0, r1, r0
 8009bc8:	fa24 f40c 	lsr.w	r4, r4, ip
 8009bcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009bd0:	ea40 0204 	orr.w	r2, r0, r4
 8009bd4:	e7db      	b.n	8009b8e <__b2d+0x4a>
 8009bd6:	ea44 030c 	orr.w	r3, r4, ip
 8009bda:	460a      	mov	r2, r1
 8009bdc:	e7d7      	b.n	8009b8e <__b2d+0x4a>
 8009bde:	bf00      	nop
 8009be0:	3ff00000 	.word	0x3ff00000

08009be4 <__d2b>:
 8009be4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009be8:	4689      	mov	r9, r1
 8009bea:	2101      	movs	r1, #1
 8009bec:	ec57 6b10 	vmov	r6, r7, d0
 8009bf0:	4690      	mov	r8, r2
 8009bf2:	f7ff fc0f 	bl	8009414 <_Balloc>
 8009bf6:	4604      	mov	r4, r0
 8009bf8:	b930      	cbnz	r0, 8009c08 <__d2b+0x24>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	4b25      	ldr	r3, [pc, #148]	; (8009c94 <__d2b+0xb0>)
 8009bfe:	4826      	ldr	r0, [pc, #152]	; (8009c98 <__d2b+0xb4>)
 8009c00:	f240 310a 	movw	r1, #778	; 0x30a
 8009c04:	f000 fb10 	bl	800a228 <__assert_func>
 8009c08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009c0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009c10:	bb35      	cbnz	r5, 8009c60 <__d2b+0x7c>
 8009c12:	2e00      	cmp	r6, #0
 8009c14:	9301      	str	r3, [sp, #4]
 8009c16:	d028      	beq.n	8009c6a <__d2b+0x86>
 8009c18:	4668      	mov	r0, sp
 8009c1a:	9600      	str	r6, [sp, #0]
 8009c1c:	f7ff fd10 	bl	8009640 <__lo0bits>
 8009c20:	9900      	ldr	r1, [sp, #0]
 8009c22:	b300      	cbz	r0, 8009c66 <__d2b+0x82>
 8009c24:	9a01      	ldr	r2, [sp, #4]
 8009c26:	f1c0 0320 	rsb	r3, r0, #32
 8009c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	40c2      	lsrs	r2, r0
 8009c32:	6163      	str	r3, [r4, #20]
 8009c34:	9201      	str	r2, [sp, #4]
 8009c36:	9b01      	ldr	r3, [sp, #4]
 8009c38:	61a3      	str	r3, [r4, #24]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bf14      	ite	ne
 8009c3e:	2202      	movne	r2, #2
 8009c40:	2201      	moveq	r2, #1
 8009c42:	6122      	str	r2, [r4, #16]
 8009c44:	b1d5      	cbz	r5, 8009c7c <__d2b+0x98>
 8009c46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c4a:	4405      	add	r5, r0
 8009c4c:	f8c9 5000 	str.w	r5, [r9]
 8009c50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c54:	f8c8 0000 	str.w	r0, [r8]
 8009c58:	4620      	mov	r0, r4
 8009c5a:	b003      	add	sp, #12
 8009c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c64:	e7d5      	b.n	8009c12 <__d2b+0x2e>
 8009c66:	6161      	str	r1, [r4, #20]
 8009c68:	e7e5      	b.n	8009c36 <__d2b+0x52>
 8009c6a:	a801      	add	r0, sp, #4
 8009c6c:	f7ff fce8 	bl	8009640 <__lo0bits>
 8009c70:	9b01      	ldr	r3, [sp, #4]
 8009c72:	6163      	str	r3, [r4, #20]
 8009c74:	2201      	movs	r2, #1
 8009c76:	6122      	str	r2, [r4, #16]
 8009c78:	3020      	adds	r0, #32
 8009c7a:	e7e3      	b.n	8009c44 <__d2b+0x60>
 8009c7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c84:	f8c9 0000 	str.w	r0, [r9]
 8009c88:	6918      	ldr	r0, [r3, #16]
 8009c8a:	f7ff fcb9 	bl	8009600 <__hi0bits>
 8009c8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c92:	e7df      	b.n	8009c54 <__d2b+0x70>
 8009c94:	0800b0dc 	.word	0x0800b0dc
 8009c98:	0800b16c 	.word	0x0800b16c

08009c9c <__ratio>:
 8009c9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca0:	4688      	mov	r8, r1
 8009ca2:	4669      	mov	r1, sp
 8009ca4:	4681      	mov	r9, r0
 8009ca6:	f7ff ff4d 	bl	8009b44 <__b2d>
 8009caa:	a901      	add	r1, sp, #4
 8009cac:	4640      	mov	r0, r8
 8009cae:	ec55 4b10 	vmov	r4, r5, d0
 8009cb2:	f7ff ff47 	bl	8009b44 <__b2d>
 8009cb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009cbe:	eba3 0c02 	sub.w	ip, r3, r2
 8009cc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009ccc:	ec51 0b10 	vmov	r0, r1, d0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bfd6      	itet	le
 8009cd4:	460a      	movle	r2, r1
 8009cd6:	462a      	movgt	r2, r5
 8009cd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009cdc:	468b      	mov	fp, r1
 8009cde:	462f      	mov	r7, r5
 8009ce0:	bfd4      	ite	le
 8009ce2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ce6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cea:	4620      	mov	r0, r4
 8009cec:	ee10 2a10 	vmov	r2, s0
 8009cf0:	465b      	mov	r3, fp
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	f7f6 fdb2 	bl	800085c <__aeabi_ddiv>
 8009cf8:	ec41 0b10 	vmov	d0, r0, r1
 8009cfc:	b003      	add	sp, #12
 8009cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009d02 <__copybits>:
 8009d02:	3901      	subs	r1, #1
 8009d04:	b570      	push	{r4, r5, r6, lr}
 8009d06:	1149      	asrs	r1, r1, #5
 8009d08:	6914      	ldr	r4, [r2, #16]
 8009d0a:	3101      	adds	r1, #1
 8009d0c:	f102 0314 	add.w	r3, r2, #20
 8009d10:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009d14:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009d18:	1f05      	subs	r5, r0, #4
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	d30c      	bcc.n	8009d38 <__copybits+0x36>
 8009d1e:	1aa3      	subs	r3, r4, r2
 8009d20:	3b11      	subs	r3, #17
 8009d22:	f023 0303 	bic.w	r3, r3, #3
 8009d26:	3211      	adds	r2, #17
 8009d28:	42a2      	cmp	r2, r4
 8009d2a:	bf88      	it	hi
 8009d2c:	2300      	movhi	r3, #0
 8009d2e:	4418      	add	r0, r3
 8009d30:	2300      	movs	r3, #0
 8009d32:	4288      	cmp	r0, r1
 8009d34:	d305      	bcc.n	8009d42 <__copybits+0x40>
 8009d36:	bd70      	pop	{r4, r5, r6, pc}
 8009d38:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d3c:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d40:	e7eb      	b.n	8009d1a <__copybits+0x18>
 8009d42:	f840 3b04 	str.w	r3, [r0], #4
 8009d46:	e7f4      	b.n	8009d32 <__copybits+0x30>

08009d48 <__any_on>:
 8009d48:	f100 0214 	add.w	r2, r0, #20
 8009d4c:	6900      	ldr	r0, [r0, #16]
 8009d4e:	114b      	asrs	r3, r1, #5
 8009d50:	4298      	cmp	r0, r3
 8009d52:	b510      	push	{r4, lr}
 8009d54:	db11      	blt.n	8009d7a <__any_on+0x32>
 8009d56:	dd0a      	ble.n	8009d6e <__any_on+0x26>
 8009d58:	f011 011f 	ands.w	r1, r1, #31
 8009d5c:	d007      	beq.n	8009d6e <__any_on+0x26>
 8009d5e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d62:	fa24 f001 	lsr.w	r0, r4, r1
 8009d66:	fa00 f101 	lsl.w	r1, r0, r1
 8009d6a:	428c      	cmp	r4, r1
 8009d6c:	d10b      	bne.n	8009d86 <__any_on+0x3e>
 8009d6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d803      	bhi.n	8009d7e <__any_on+0x36>
 8009d76:	2000      	movs	r0, #0
 8009d78:	bd10      	pop	{r4, pc}
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	e7f7      	b.n	8009d6e <__any_on+0x26>
 8009d7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d82:	2900      	cmp	r1, #0
 8009d84:	d0f5      	beq.n	8009d72 <__any_on+0x2a>
 8009d86:	2001      	movs	r0, #1
 8009d88:	e7f6      	b.n	8009d78 <__any_on+0x30>

08009d8a <_calloc_r>:
 8009d8a:	b513      	push	{r0, r1, r4, lr}
 8009d8c:	434a      	muls	r2, r1
 8009d8e:	4611      	mov	r1, r2
 8009d90:	9201      	str	r2, [sp, #4]
 8009d92:	f000 f859 	bl	8009e48 <_malloc_r>
 8009d96:	4604      	mov	r4, r0
 8009d98:	b118      	cbz	r0, 8009da2 <_calloc_r+0x18>
 8009d9a:	9a01      	ldr	r2, [sp, #4]
 8009d9c:	2100      	movs	r1, #0
 8009d9e:	f7fc fbd5 	bl	800654c <memset>
 8009da2:	4620      	mov	r0, r4
 8009da4:	b002      	add	sp, #8
 8009da6:	bd10      	pop	{r4, pc}

08009da8 <_free_r>:
 8009da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009daa:	2900      	cmp	r1, #0
 8009dac:	d048      	beq.n	8009e40 <_free_r+0x98>
 8009dae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009db2:	9001      	str	r0, [sp, #4]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	f1a1 0404 	sub.w	r4, r1, #4
 8009dba:	bfb8      	it	lt
 8009dbc:	18e4      	addlt	r4, r4, r3
 8009dbe:	f000 fa7d 	bl	800a2bc <__malloc_lock>
 8009dc2:	4a20      	ldr	r2, [pc, #128]	; (8009e44 <_free_r+0x9c>)
 8009dc4:	9801      	ldr	r0, [sp, #4]
 8009dc6:	6813      	ldr	r3, [r2, #0]
 8009dc8:	4615      	mov	r5, r2
 8009dca:	b933      	cbnz	r3, 8009dda <_free_r+0x32>
 8009dcc:	6063      	str	r3, [r4, #4]
 8009dce:	6014      	str	r4, [r2, #0]
 8009dd0:	b003      	add	sp, #12
 8009dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dd6:	f000 ba77 	b.w	800a2c8 <__malloc_unlock>
 8009dda:	42a3      	cmp	r3, r4
 8009ddc:	d90b      	bls.n	8009df6 <_free_r+0x4e>
 8009dde:	6821      	ldr	r1, [r4, #0]
 8009de0:	1862      	adds	r2, r4, r1
 8009de2:	4293      	cmp	r3, r2
 8009de4:	bf04      	itt	eq
 8009de6:	681a      	ldreq	r2, [r3, #0]
 8009de8:	685b      	ldreq	r3, [r3, #4]
 8009dea:	6063      	str	r3, [r4, #4]
 8009dec:	bf04      	itt	eq
 8009dee:	1852      	addeq	r2, r2, r1
 8009df0:	6022      	streq	r2, [r4, #0]
 8009df2:	602c      	str	r4, [r5, #0]
 8009df4:	e7ec      	b.n	8009dd0 <_free_r+0x28>
 8009df6:	461a      	mov	r2, r3
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	b10b      	cbz	r3, 8009e00 <_free_r+0x58>
 8009dfc:	42a3      	cmp	r3, r4
 8009dfe:	d9fa      	bls.n	8009df6 <_free_r+0x4e>
 8009e00:	6811      	ldr	r1, [r2, #0]
 8009e02:	1855      	adds	r5, r2, r1
 8009e04:	42a5      	cmp	r5, r4
 8009e06:	d10b      	bne.n	8009e20 <_free_r+0x78>
 8009e08:	6824      	ldr	r4, [r4, #0]
 8009e0a:	4421      	add	r1, r4
 8009e0c:	1854      	adds	r4, r2, r1
 8009e0e:	42a3      	cmp	r3, r4
 8009e10:	6011      	str	r1, [r2, #0]
 8009e12:	d1dd      	bne.n	8009dd0 <_free_r+0x28>
 8009e14:	681c      	ldr	r4, [r3, #0]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	6053      	str	r3, [r2, #4]
 8009e1a:	4421      	add	r1, r4
 8009e1c:	6011      	str	r1, [r2, #0]
 8009e1e:	e7d7      	b.n	8009dd0 <_free_r+0x28>
 8009e20:	d902      	bls.n	8009e28 <_free_r+0x80>
 8009e22:	230c      	movs	r3, #12
 8009e24:	6003      	str	r3, [r0, #0]
 8009e26:	e7d3      	b.n	8009dd0 <_free_r+0x28>
 8009e28:	6825      	ldr	r5, [r4, #0]
 8009e2a:	1961      	adds	r1, r4, r5
 8009e2c:	428b      	cmp	r3, r1
 8009e2e:	bf04      	itt	eq
 8009e30:	6819      	ldreq	r1, [r3, #0]
 8009e32:	685b      	ldreq	r3, [r3, #4]
 8009e34:	6063      	str	r3, [r4, #4]
 8009e36:	bf04      	itt	eq
 8009e38:	1949      	addeq	r1, r1, r5
 8009e3a:	6021      	streq	r1, [r4, #0]
 8009e3c:	6054      	str	r4, [r2, #4]
 8009e3e:	e7c7      	b.n	8009dd0 <_free_r+0x28>
 8009e40:	b003      	add	sp, #12
 8009e42:	bd30      	pop	{r4, r5, pc}
 8009e44:	20000218 	.word	0x20000218

08009e48 <_malloc_r>:
 8009e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4a:	1ccd      	adds	r5, r1, #3
 8009e4c:	f025 0503 	bic.w	r5, r5, #3
 8009e50:	3508      	adds	r5, #8
 8009e52:	2d0c      	cmp	r5, #12
 8009e54:	bf38      	it	cc
 8009e56:	250c      	movcc	r5, #12
 8009e58:	2d00      	cmp	r5, #0
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	db01      	blt.n	8009e62 <_malloc_r+0x1a>
 8009e5e:	42a9      	cmp	r1, r5
 8009e60:	d903      	bls.n	8009e6a <_malloc_r+0x22>
 8009e62:	230c      	movs	r3, #12
 8009e64:	6033      	str	r3, [r6, #0]
 8009e66:	2000      	movs	r0, #0
 8009e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e6a:	f000 fa27 	bl	800a2bc <__malloc_lock>
 8009e6e:	4921      	ldr	r1, [pc, #132]	; (8009ef4 <_malloc_r+0xac>)
 8009e70:	680a      	ldr	r2, [r1, #0]
 8009e72:	4614      	mov	r4, r2
 8009e74:	b99c      	cbnz	r4, 8009e9e <_malloc_r+0x56>
 8009e76:	4f20      	ldr	r7, [pc, #128]	; (8009ef8 <_malloc_r+0xb0>)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	b923      	cbnz	r3, 8009e86 <_malloc_r+0x3e>
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4630      	mov	r0, r6
 8009e80:	f000 f9a2 	bl	800a1c8 <_sbrk_r>
 8009e84:	6038      	str	r0, [r7, #0]
 8009e86:	4629      	mov	r1, r5
 8009e88:	4630      	mov	r0, r6
 8009e8a:	f000 f99d 	bl	800a1c8 <_sbrk_r>
 8009e8e:	1c43      	adds	r3, r0, #1
 8009e90:	d123      	bne.n	8009eda <_malloc_r+0x92>
 8009e92:	230c      	movs	r3, #12
 8009e94:	6033      	str	r3, [r6, #0]
 8009e96:	4630      	mov	r0, r6
 8009e98:	f000 fa16 	bl	800a2c8 <__malloc_unlock>
 8009e9c:	e7e3      	b.n	8009e66 <_malloc_r+0x1e>
 8009e9e:	6823      	ldr	r3, [r4, #0]
 8009ea0:	1b5b      	subs	r3, r3, r5
 8009ea2:	d417      	bmi.n	8009ed4 <_malloc_r+0x8c>
 8009ea4:	2b0b      	cmp	r3, #11
 8009ea6:	d903      	bls.n	8009eb0 <_malloc_r+0x68>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	441c      	add	r4, r3
 8009eac:	6025      	str	r5, [r4, #0]
 8009eae:	e004      	b.n	8009eba <_malloc_r+0x72>
 8009eb0:	6863      	ldr	r3, [r4, #4]
 8009eb2:	42a2      	cmp	r2, r4
 8009eb4:	bf0c      	ite	eq
 8009eb6:	600b      	streq	r3, [r1, #0]
 8009eb8:	6053      	strne	r3, [r2, #4]
 8009eba:	4630      	mov	r0, r6
 8009ebc:	f000 fa04 	bl	800a2c8 <__malloc_unlock>
 8009ec0:	f104 000b 	add.w	r0, r4, #11
 8009ec4:	1d23      	adds	r3, r4, #4
 8009ec6:	f020 0007 	bic.w	r0, r0, #7
 8009eca:	1ac2      	subs	r2, r0, r3
 8009ecc:	d0cc      	beq.n	8009e68 <_malloc_r+0x20>
 8009ece:	1a1b      	subs	r3, r3, r0
 8009ed0:	50a3      	str	r3, [r4, r2]
 8009ed2:	e7c9      	b.n	8009e68 <_malloc_r+0x20>
 8009ed4:	4622      	mov	r2, r4
 8009ed6:	6864      	ldr	r4, [r4, #4]
 8009ed8:	e7cc      	b.n	8009e74 <_malloc_r+0x2c>
 8009eda:	1cc4      	adds	r4, r0, #3
 8009edc:	f024 0403 	bic.w	r4, r4, #3
 8009ee0:	42a0      	cmp	r0, r4
 8009ee2:	d0e3      	beq.n	8009eac <_malloc_r+0x64>
 8009ee4:	1a21      	subs	r1, r4, r0
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	f000 f96e 	bl	800a1c8 <_sbrk_r>
 8009eec:	3001      	adds	r0, #1
 8009eee:	d1dd      	bne.n	8009eac <_malloc_r+0x64>
 8009ef0:	e7cf      	b.n	8009e92 <_malloc_r+0x4a>
 8009ef2:	bf00      	nop
 8009ef4:	20000218 	.word	0x20000218
 8009ef8:	2000021c 	.word	0x2000021c

08009efc <__ssputs_r>:
 8009efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f00:	688e      	ldr	r6, [r1, #8]
 8009f02:	429e      	cmp	r6, r3
 8009f04:	4682      	mov	sl, r0
 8009f06:	460c      	mov	r4, r1
 8009f08:	4690      	mov	r8, r2
 8009f0a:	461f      	mov	r7, r3
 8009f0c:	d838      	bhi.n	8009f80 <__ssputs_r+0x84>
 8009f0e:	898a      	ldrh	r2, [r1, #12]
 8009f10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f14:	d032      	beq.n	8009f7c <__ssputs_r+0x80>
 8009f16:	6825      	ldr	r5, [r4, #0]
 8009f18:	6909      	ldr	r1, [r1, #16]
 8009f1a:	eba5 0901 	sub.w	r9, r5, r1
 8009f1e:	6965      	ldr	r5, [r4, #20]
 8009f20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f28:	3301      	adds	r3, #1
 8009f2a:	444b      	add	r3, r9
 8009f2c:	106d      	asrs	r5, r5, #1
 8009f2e:	429d      	cmp	r5, r3
 8009f30:	bf38      	it	cc
 8009f32:	461d      	movcc	r5, r3
 8009f34:	0553      	lsls	r3, r2, #21
 8009f36:	d531      	bpl.n	8009f9c <__ssputs_r+0xa0>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7ff ff85 	bl	8009e48 <_malloc_r>
 8009f3e:	4606      	mov	r6, r0
 8009f40:	b950      	cbnz	r0, 8009f58 <__ssputs_r+0x5c>
 8009f42:	230c      	movs	r3, #12
 8009f44:	f8ca 3000 	str.w	r3, [sl]
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f4e:	81a3      	strh	r3, [r4, #12]
 8009f50:	f04f 30ff 	mov.w	r0, #4294967295
 8009f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f58:	6921      	ldr	r1, [r4, #16]
 8009f5a:	464a      	mov	r2, r9
 8009f5c:	f7fc fae8 	bl	8006530 <memcpy>
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	6126      	str	r6, [r4, #16]
 8009f6e:	6165      	str	r5, [r4, #20]
 8009f70:	444e      	add	r6, r9
 8009f72:	eba5 0509 	sub.w	r5, r5, r9
 8009f76:	6026      	str	r6, [r4, #0]
 8009f78:	60a5      	str	r5, [r4, #8]
 8009f7a:	463e      	mov	r6, r7
 8009f7c:	42be      	cmp	r6, r7
 8009f7e:	d900      	bls.n	8009f82 <__ssputs_r+0x86>
 8009f80:	463e      	mov	r6, r7
 8009f82:	4632      	mov	r2, r6
 8009f84:	6820      	ldr	r0, [r4, #0]
 8009f86:	4641      	mov	r1, r8
 8009f88:	f000 f97e 	bl	800a288 <memmove>
 8009f8c:	68a3      	ldr	r3, [r4, #8]
 8009f8e:	6822      	ldr	r2, [r4, #0]
 8009f90:	1b9b      	subs	r3, r3, r6
 8009f92:	4432      	add	r2, r6
 8009f94:	60a3      	str	r3, [r4, #8]
 8009f96:	6022      	str	r2, [r4, #0]
 8009f98:	2000      	movs	r0, #0
 8009f9a:	e7db      	b.n	8009f54 <__ssputs_r+0x58>
 8009f9c:	462a      	mov	r2, r5
 8009f9e:	f000 f999 	bl	800a2d4 <_realloc_r>
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d1e1      	bne.n	8009f6c <__ssputs_r+0x70>
 8009fa8:	6921      	ldr	r1, [r4, #16]
 8009faa:	4650      	mov	r0, sl
 8009fac:	f7ff fefc 	bl	8009da8 <_free_r>
 8009fb0:	e7c7      	b.n	8009f42 <__ssputs_r+0x46>
	...

08009fb4 <_svfiprintf_r>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	4698      	mov	r8, r3
 8009fba:	898b      	ldrh	r3, [r1, #12]
 8009fbc:	061b      	lsls	r3, r3, #24
 8009fbe:	b09d      	sub	sp, #116	; 0x74
 8009fc0:	4607      	mov	r7, r0
 8009fc2:	460d      	mov	r5, r1
 8009fc4:	4614      	mov	r4, r2
 8009fc6:	d50e      	bpl.n	8009fe6 <_svfiprintf_r+0x32>
 8009fc8:	690b      	ldr	r3, [r1, #16]
 8009fca:	b963      	cbnz	r3, 8009fe6 <_svfiprintf_r+0x32>
 8009fcc:	2140      	movs	r1, #64	; 0x40
 8009fce:	f7ff ff3b 	bl	8009e48 <_malloc_r>
 8009fd2:	6028      	str	r0, [r5, #0]
 8009fd4:	6128      	str	r0, [r5, #16]
 8009fd6:	b920      	cbnz	r0, 8009fe2 <_svfiprintf_r+0x2e>
 8009fd8:	230c      	movs	r3, #12
 8009fda:	603b      	str	r3, [r7, #0]
 8009fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe0:	e0d1      	b.n	800a186 <_svfiprintf_r+0x1d2>
 8009fe2:	2340      	movs	r3, #64	; 0x40
 8009fe4:	616b      	str	r3, [r5, #20]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	9309      	str	r3, [sp, #36]	; 0x24
 8009fea:	2320      	movs	r3, #32
 8009fec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ff0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ff4:	2330      	movs	r3, #48	; 0x30
 8009ff6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a1a0 <_svfiprintf_r+0x1ec>
 8009ffa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ffe:	f04f 0901 	mov.w	r9, #1
 800a002:	4623      	mov	r3, r4
 800a004:	469a      	mov	sl, r3
 800a006:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a00a:	b10a      	cbz	r2, 800a010 <_svfiprintf_r+0x5c>
 800a00c:	2a25      	cmp	r2, #37	; 0x25
 800a00e:	d1f9      	bne.n	800a004 <_svfiprintf_r+0x50>
 800a010:	ebba 0b04 	subs.w	fp, sl, r4
 800a014:	d00b      	beq.n	800a02e <_svfiprintf_r+0x7a>
 800a016:	465b      	mov	r3, fp
 800a018:	4622      	mov	r2, r4
 800a01a:	4629      	mov	r1, r5
 800a01c:	4638      	mov	r0, r7
 800a01e:	f7ff ff6d 	bl	8009efc <__ssputs_r>
 800a022:	3001      	adds	r0, #1
 800a024:	f000 80aa 	beq.w	800a17c <_svfiprintf_r+0x1c8>
 800a028:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a02a:	445a      	add	r2, fp
 800a02c:	9209      	str	r2, [sp, #36]	; 0x24
 800a02e:	f89a 3000 	ldrb.w	r3, [sl]
 800a032:	2b00      	cmp	r3, #0
 800a034:	f000 80a2 	beq.w	800a17c <_svfiprintf_r+0x1c8>
 800a038:	2300      	movs	r3, #0
 800a03a:	f04f 32ff 	mov.w	r2, #4294967295
 800a03e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a042:	f10a 0a01 	add.w	sl, sl, #1
 800a046:	9304      	str	r3, [sp, #16]
 800a048:	9307      	str	r3, [sp, #28]
 800a04a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a04e:	931a      	str	r3, [sp, #104]	; 0x68
 800a050:	4654      	mov	r4, sl
 800a052:	2205      	movs	r2, #5
 800a054:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a058:	4851      	ldr	r0, [pc, #324]	; (800a1a0 <_svfiprintf_r+0x1ec>)
 800a05a:	f7f6 f8c9 	bl	80001f0 <memchr>
 800a05e:	9a04      	ldr	r2, [sp, #16]
 800a060:	b9d8      	cbnz	r0, 800a09a <_svfiprintf_r+0xe6>
 800a062:	06d0      	lsls	r0, r2, #27
 800a064:	bf44      	itt	mi
 800a066:	2320      	movmi	r3, #32
 800a068:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a06c:	0711      	lsls	r1, r2, #28
 800a06e:	bf44      	itt	mi
 800a070:	232b      	movmi	r3, #43	; 0x2b
 800a072:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a076:	f89a 3000 	ldrb.w	r3, [sl]
 800a07a:	2b2a      	cmp	r3, #42	; 0x2a
 800a07c:	d015      	beq.n	800a0aa <_svfiprintf_r+0xf6>
 800a07e:	9a07      	ldr	r2, [sp, #28]
 800a080:	4654      	mov	r4, sl
 800a082:	2000      	movs	r0, #0
 800a084:	f04f 0c0a 	mov.w	ip, #10
 800a088:	4621      	mov	r1, r4
 800a08a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a08e:	3b30      	subs	r3, #48	; 0x30
 800a090:	2b09      	cmp	r3, #9
 800a092:	d94e      	bls.n	800a132 <_svfiprintf_r+0x17e>
 800a094:	b1b0      	cbz	r0, 800a0c4 <_svfiprintf_r+0x110>
 800a096:	9207      	str	r2, [sp, #28]
 800a098:	e014      	b.n	800a0c4 <_svfiprintf_r+0x110>
 800a09a:	eba0 0308 	sub.w	r3, r0, r8
 800a09e:	fa09 f303 	lsl.w	r3, r9, r3
 800a0a2:	4313      	orrs	r3, r2
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	46a2      	mov	sl, r4
 800a0a8:	e7d2      	b.n	800a050 <_svfiprintf_r+0x9c>
 800a0aa:	9b03      	ldr	r3, [sp, #12]
 800a0ac:	1d19      	adds	r1, r3, #4
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	9103      	str	r1, [sp, #12]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	bfbb      	ittet	lt
 800a0b6:	425b      	neglt	r3, r3
 800a0b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a0bc:	9307      	strge	r3, [sp, #28]
 800a0be:	9307      	strlt	r3, [sp, #28]
 800a0c0:	bfb8      	it	lt
 800a0c2:	9204      	strlt	r2, [sp, #16]
 800a0c4:	7823      	ldrb	r3, [r4, #0]
 800a0c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a0c8:	d10c      	bne.n	800a0e4 <_svfiprintf_r+0x130>
 800a0ca:	7863      	ldrb	r3, [r4, #1]
 800a0cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ce:	d135      	bne.n	800a13c <_svfiprintf_r+0x188>
 800a0d0:	9b03      	ldr	r3, [sp, #12]
 800a0d2:	1d1a      	adds	r2, r3, #4
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	9203      	str	r2, [sp, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	bfb8      	it	lt
 800a0dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0e0:	3402      	adds	r4, #2
 800a0e2:	9305      	str	r3, [sp, #20]
 800a0e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a1b0 <_svfiprintf_r+0x1fc>
 800a0e8:	7821      	ldrb	r1, [r4, #0]
 800a0ea:	2203      	movs	r2, #3
 800a0ec:	4650      	mov	r0, sl
 800a0ee:	f7f6 f87f 	bl	80001f0 <memchr>
 800a0f2:	b140      	cbz	r0, 800a106 <_svfiprintf_r+0x152>
 800a0f4:	2340      	movs	r3, #64	; 0x40
 800a0f6:	eba0 000a 	sub.w	r0, r0, sl
 800a0fa:	fa03 f000 	lsl.w	r0, r3, r0
 800a0fe:	9b04      	ldr	r3, [sp, #16]
 800a100:	4303      	orrs	r3, r0
 800a102:	3401      	adds	r4, #1
 800a104:	9304      	str	r3, [sp, #16]
 800a106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a10a:	4826      	ldr	r0, [pc, #152]	; (800a1a4 <_svfiprintf_r+0x1f0>)
 800a10c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a110:	2206      	movs	r2, #6
 800a112:	f7f6 f86d 	bl	80001f0 <memchr>
 800a116:	2800      	cmp	r0, #0
 800a118:	d038      	beq.n	800a18c <_svfiprintf_r+0x1d8>
 800a11a:	4b23      	ldr	r3, [pc, #140]	; (800a1a8 <_svfiprintf_r+0x1f4>)
 800a11c:	bb1b      	cbnz	r3, 800a166 <_svfiprintf_r+0x1b2>
 800a11e:	9b03      	ldr	r3, [sp, #12]
 800a120:	3307      	adds	r3, #7
 800a122:	f023 0307 	bic.w	r3, r3, #7
 800a126:	3308      	adds	r3, #8
 800a128:	9303      	str	r3, [sp, #12]
 800a12a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a12c:	4433      	add	r3, r6
 800a12e:	9309      	str	r3, [sp, #36]	; 0x24
 800a130:	e767      	b.n	800a002 <_svfiprintf_r+0x4e>
 800a132:	fb0c 3202 	mla	r2, ip, r2, r3
 800a136:	460c      	mov	r4, r1
 800a138:	2001      	movs	r0, #1
 800a13a:	e7a5      	b.n	800a088 <_svfiprintf_r+0xd4>
 800a13c:	2300      	movs	r3, #0
 800a13e:	3401      	adds	r4, #1
 800a140:	9305      	str	r3, [sp, #20]
 800a142:	4619      	mov	r1, r3
 800a144:	f04f 0c0a 	mov.w	ip, #10
 800a148:	4620      	mov	r0, r4
 800a14a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a14e:	3a30      	subs	r2, #48	; 0x30
 800a150:	2a09      	cmp	r2, #9
 800a152:	d903      	bls.n	800a15c <_svfiprintf_r+0x1a8>
 800a154:	2b00      	cmp	r3, #0
 800a156:	d0c5      	beq.n	800a0e4 <_svfiprintf_r+0x130>
 800a158:	9105      	str	r1, [sp, #20]
 800a15a:	e7c3      	b.n	800a0e4 <_svfiprintf_r+0x130>
 800a15c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a160:	4604      	mov	r4, r0
 800a162:	2301      	movs	r3, #1
 800a164:	e7f0      	b.n	800a148 <_svfiprintf_r+0x194>
 800a166:	ab03      	add	r3, sp, #12
 800a168:	9300      	str	r3, [sp, #0]
 800a16a:	462a      	mov	r2, r5
 800a16c:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <_svfiprintf_r+0x1f8>)
 800a16e:	a904      	add	r1, sp, #16
 800a170:	4638      	mov	r0, r7
 800a172:	f7fc fa93 	bl	800669c <_printf_float>
 800a176:	1c42      	adds	r2, r0, #1
 800a178:	4606      	mov	r6, r0
 800a17a:	d1d6      	bne.n	800a12a <_svfiprintf_r+0x176>
 800a17c:	89ab      	ldrh	r3, [r5, #12]
 800a17e:	065b      	lsls	r3, r3, #25
 800a180:	f53f af2c 	bmi.w	8009fdc <_svfiprintf_r+0x28>
 800a184:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a186:	b01d      	add	sp, #116	; 0x74
 800a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18c:	ab03      	add	r3, sp, #12
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	462a      	mov	r2, r5
 800a192:	4b06      	ldr	r3, [pc, #24]	; (800a1ac <_svfiprintf_r+0x1f8>)
 800a194:	a904      	add	r1, sp, #16
 800a196:	4638      	mov	r0, r7
 800a198:	f7fc fd24 	bl	8006be4 <_printf_i>
 800a19c:	e7eb      	b.n	800a176 <_svfiprintf_r+0x1c2>
 800a19e:	bf00      	nop
 800a1a0:	0800b2cc 	.word	0x0800b2cc
 800a1a4:	0800b2d6 	.word	0x0800b2d6
 800a1a8:	0800669d 	.word	0x0800669d
 800a1ac:	08009efd 	.word	0x08009efd
 800a1b0:	0800b2d2 	.word	0x0800b2d2
 800a1b4:	00000000 	.word	0x00000000

0800a1b8 <nan>:
 800a1b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a1c0 <nan+0x8>
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	00000000 	.word	0x00000000
 800a1c4:	7ff80000 	.word	0x7ff80000

0800a1c8 <_sbrk_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4d06      	ldr	r5, [pc, #24]	; (800a1e4 <_sbrk_r+0x1c>)
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	4604      	mov	r4, r0
 800a1d0:	4608      	mov	r0, r1
 800a1d2:	602b      	str	r3, [r5, #0]
 800a1d4:	f7f9 fdbc 	bl	8003d50 <_sbrk>
 800a1d8:	1c43      	adds	r3, r0, #1
 800a1da:	d102      	bne.n	800a1e2 <_sbrk_r+0x1a>
 800a1dc:	682b      	ldr	r3, [r5, #0]
 800a1de:	b103      	cbz	r3, 800a1e2 <_sbrk_r+0x1a>
 800a1e0:	6023      	str	r3, [r4, #0]
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	2000038c 	.word	0x2000038c

0800a1e8 <strncmp>:
 800a1e8:	b510      	push	{r4, lr}
 800a1ea:	b16a      	cbz	r2, 800a208 <strncmp+0x20>
 800a1ec:	3901      	subs	r1, #1
 800a1ee:	1884      	adds	r4, r0, r2
 800a1f0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a1f4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	d103      	bne.n	800a204 <strncmp+0x1c>
 800a1fc:	42a0      	cmp	r0, r4
 800a1fe:	d001      	beq.n	800a204 <strncmp+0x1c>
 800a200:	2b00      	cmp	r3, #0
 800a202:	d1f5      	bne.n	800a1f0 <strncmp+0x8>
 800a204:	1a98      	subs	r0, r3, r2
 800a206:	bd10      	pop	{r4, pc}
 800a208:	4610      	mov	r0, r2
 800a20a:	e7fc      	b.n	800a206 <strncmp+0x1e>

0800a20c <__ascii_wctomb>:
 800a20c:	b149      	cbz	r1, 800a222 <__ascii_wctomb+0x16>
 800a20e:	2aff      	cmp	r2, #255	; 0xff
 800a210:	bf85      	ittet	hi
 800a212:	238a      	movhi	r3, #138	; 0x8a
 800a214:	6003      	strhi	r3, [r0, #0]
 800a216:	700a      	strbls	r2, [r1, #0]
 800a218:	f04f 30ff 	movhi.w	r0, #4294967295
 800a21c:	bf98      	it	ls
 800a21e:	2001      	movls	r0, #1
 800a220:	4770      	bx	lr
 800a222:	4608      	mov	r0, r1
 800a224:	4770      	bx	lr
	...

0800a228 <__assert_func>:
 800a228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a22a:	4614      	mov	r4, r2
 800a22c:	461a      	mov	r2, r3
 800a22e:	4b09      	ldr	r3, [pc, #36]	; (800a254 <__assert_func+0x2c>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4605      	mov	r5, r0
 800a234:	68d8      	ldr	r0, [r3, #12]
 800a236:	b14c      	cbz	r4, 800a24c <__assert_func+0x24>
 800a238:	4b07      	ldr	r3, [pc, #28]	; (800a258 <__assert_func+0x30>)
 800a23a:	9100      	str	r1, [sp, #0]
 800a23c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a240:	4906      	ldr	r1, [pc, #24]	; (800a25c <__assert_func+0x34>)
 800a242:	462b      	mov	r3, r5
 800a244:	f000 f80e 	bl	800a264 <fiprintf>
 800a248:	f000 fa84 	bl	800a754 <abort>
 800a24c:	4b04      	ldr	r3, [pc, #16]	; (800a260 <__assert_func+0x38>)
 800a24e:	461c      	mov	r4, r3
 800a250:	e7f3      	b.n	800a23a <__assert_func+0x12>
 800a252:	bf00      	nop
 800a254:	20000020 	.word	0x20000020
 800a258:	0800b2dd 	.word	0x0800b2dd
 800a25c:	0800b2ea 	.word	0x0800b2ea
 800a260:	0800b318 	.word	0x0800b318

0800a264 <fiprintf>:
 800a264:	b40e      	push	{r1, r2, r3}
 800a266:	b503      	push	{r0, r1, lr}
 800a268:	4601      	mov	r1, r0
 800a26a:	ab03      	add	r3, sp, #12
 800a26c:	4805      	ldr	r0, [pc, #20]	; (800a284 <fiprintf+0x20>)
 800a26e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a272:	6800      	ldr	r0, [r0, #0]
 800a274:	9301      	str	r3, [sp, #4]
 800a276:	f000 f87d 	bl	800a374 <_vfiprintf_r>
 800a27a:	b002      	add	sp, #8
 800a27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a280:	b003      	add	sp, #12
 800a282:	4770      	bx	lr
 800a284:	20000020 	.word	0x20000020

0800a288 <memmove>:
 800a288:	4288      	cmp	r0, r1
 800a28a:	b510      	push	{r4, lr}
 800a28c:	eb01 0402 	add.w	r4, r1, r2
 800a290:	d902      	bls.n	800a298 <memmove+0x10>
 800a292:	4284      	cmp	r4, r0
 800a294:	4623      	mov	r3, r4
 800a296:	d807      	bhi.n	800a2a8 <memmove+0x20>
 800a298:	1e43      	subs	r3, r0, #1
 800a29a:	42a1      	cmp	r1, r4
 800a29c:	d008      	beq.n	800a2b0 <memmove+0x28>
 800a29e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2a6:	e7f8      	b.n	800a29a <memmove+0x12>
 800a2a8:	4402      	add	r2, r0
 800a2aa:	4601      	mov	r1, r0
 800a2ac:	428a      	cmp	r2, r1
 800a2ae:	d100      	bne.n	800a2b2 <memmove+0x2a>
 800a2b0:	bd10      	pop	{r4, pc}
 800a2b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2ba:	e7f7      	b.n	800a2ac <memmove+0x24>

0800a2bc <__malloc_lock>:
 800a2bc:	4801      	ldr	r0, [pc, #4]	; (800a2c4 <__malloc_lock+0x8>)
 800a2be:	f000 bc09 	b.w	800aad4 <__retarget_lock_acquire_recursive>
 800a2c2:	bf00      	nop
 800a2c4:	20000394 	.word	0x20000394

0800a2c8 <__malloc_unlock>:
 800a2c8:	4801      	ldr	r0, [pc, #4]	; (800a2d0 <__malloc_unlock+0x8>)
 800a2ca:	f000 bc04 	b.w	800aad6 <__retarget_lock_release_recursive>
 800a2ce:	bf00      	nop
 800a2d0:	20000394 	.word	0x20000394

0800a2d4 <_realloc_r>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	4607      	mov	r7, r0
 800a2d8:	4614      	mov	r4, r2
 800a2da:	460e      	mov	r6, r1
 800a2dc:	b921      	cbnz	r1, 800a2e8 <_realloc_r+0x14>
 800a2de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2e2:	4611      	mov	r1, r2
 800a2e4:	f7ff bdb0 	b.w	8009e48 <_malloc_r>
 800a2e8:	b922      	cbnz	r2, 800a2f4 <_realloc_r+0x20>
 800a2ea:	f7ff fd5d 	bl	8009da8 <_free_r>
 800a2ee:	4625      	mov	r5, r4
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2f4:	f000 fc54 	bl	800aba0 <_malloc_usable_size_r>
 800a2f8:	42a0      	cmp	r0, r4
 800a2fa:	d20f      	bcs.n	800a31c <_realloc_r+0x48>
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	4638      	mov	r0, r7
 800a300:	f7ff fda2 	bl	8009e48 <_malloc_r>
 800a304:	4605      	mov	r5, r0
 800a306:	2800      	cmp	r0, #0
 800a308:	d0f2      	beq.n	800a2f0 <_realloc_r+0x1c>
 800a30a:	4631      	mov	r1, r6
 800a30c:	4622      	mov	r2, r4
 800a30e:	f7fc f90f 	bl	8006530 <memcpy>
 800a312:	4631      	mov	r1, r6
 800a314:	4638      	mov	r0, r7
 800a316:	f7ff fd47 	bl	8009da8 <_free_r>
 800a31a:	e7e9      	b.n	800a2f0 <_realloc_r+0x1c>
 800a31c:	4635      	mov	r5, r6
 800a31e:	e7e7      	b.n	800a2f0 <_realloc_r+0x1c>

0800a320 <__sfputc_r>:
 800a320:	6893      	ldr	r3, [r2, #8]
 800a322:	3b01      	subs	r3, #1
 800a324:	2b00      	cmp	r3, #0
 800a326:	b410      	push	{r4}
 800a328:	6093      	str	r3, [r2, #8]
 800a32a:	da08      	bge.n	800a33e <__sfputc_r+0x1e>
 800a32c:	6994      	ldr	r4, [r2, #24]
 800a32e:	42a3      	cmp	r3, r4
 800a330:	db01      	blt.n	800a336 <__sfputc_r+0x16>
 800a332:	290a      	cmp	r1, #10
 800a334:	d103      	bne.n	800a33e <__sfputc_r+0x1e>
 800a336:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a33a:	f000 b94b 	b.w	800a5d4 <__swbuf_r>
 800a33e:	6813      	ldr	r3, [r2, #0]
 800a340:	1c58      	adds	r0, r3, #1
 800a342:	6010      	str	r0, [r2, #0]
 800a344:	7019      	strb	r1, [r3, #0]
 800a346:	4608      	mov	r0, r1
 800a348:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <__sfputs_r>:
 800a34e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a350:	4606      	mov	r6, r0
 800a352:	460f      	mov	r7, r1
 800a354:	4614      	mov	r4, r2
 800a356:	18d5      	adds	r5, r2, r3
 800a358:	42ac      	cmp	r4, r5
 800a35a:	d101      	bne.n	800a360 <__sfputs_r+0x12>
 800a35c:	2000      	movs	r0, #0
 800a35e:	e007      	b.n	800a370 <__sfputs_r+0x22>
 800a360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a364:	463a      	mov	r2, r7
 800a366:	4630      	mov	r0, r6
 800a368:	f7ff ffda 	bl	800a320 <__sfputc_r>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d1f3      	bne.n	800a358 <__sfputs_r+0xa>
 800a370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a374 <_vfiprintf_r>:
 800a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	460d      	mov	r5, r1
 800a37a:	b09d      	sub	sp, #116	; 0x74
 800a37c:	4614      	mov	r4, r2
 800a37e:	4698      	mov	r8, r3
 800a380:	4606      	mov	r6, r0
 800a382:	b118      	cbz	r0, 800a38c <_vfiprintf_r+0x18>
 800a384:	6983      	ldr	r3, [r0, #24]
 800a386:	b90b      	cbnz	r3, 800a38c <_vfiprintf_r+0x18>
 800a388:	f000 fb06 	bl	800a998 <__sinit>
 800a38c:	4b89      	ldr	r3, [pc, #548]	; (800a5b4 <_vfiprintf_r+0x240>)
 800a38e:	429d      	cmp	r5, r3
 800a390:	d11b      	bne.n	800a3ca <_vfiprintf_r+0x56>
 800a392:	6875      	ldr	r5, [r6, #4]
 800a394:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a396:	07d9      	lsls	r1, r3, #31
 800a398:	d405      	bmi.n	800a3a6 <_vfiprintf_r+0x32>
 800a39a:	89ab      	ldrh	r3, [r5, #12]
 800a39c:	059a      	lsls	r2, r3, #22
 800a39e:	d402      	bmi.n	800a3a6 <_vfiprintf_r+0x32>
 800a3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3a2:	f000 fb97 	bl	800aad4 <__retarget_lock_acquire_recursive>
 800a3a6:	89ab      	ldrh	r3, [r5, #12]
 800a3a8:	071b      	lsls	r3, r3, #28
 800a3aa:	d501      	bpl.n	800a3b0 <_vfiprintf_r+0x3c>
 800a3ac:	692b      	ldr	r3, [r5, #16]
 800a3ae:	b9eb      	cbnz	r3, 800a3ec <_vfiprintf_r+0x78>
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f000 f960 	bl	800a678 <__swsetup_r>
 800a3b8:	b1c0      	cbz	r0, 800a3ec <_vfiprintf_r+0x78>
 800a3ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3bc:	07dc      	lsls	r4, r3, #31
 800a3be:	d50e      	bpl.n	800a3de <_vfiprintf_r+0x6a>
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	b01d      	add	sp, #116	; 0x74
 800a3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ca:	4b7b      	ldr	r3, [pc, #492]	; (800a5b8 <_vfiprintf_r+0x244>)
 800a3cc:	429d      	cmp	r5, r3
 800a3ce:	d101      	bne.n	800a3d4 <_vfiprintf_r+0x60>
 800a3d0:	68b5      	ldr	r5, [r6, #8]
 800a3d2:	e7df      	b.n	800a394 <_vfiprintf_r+0x20>
 800a3d4:	4b79      	ldr	r3, [pc, #484]	; (800a5bc <_vfiprintf_r+0x248>)
 800a3d6:	429d      	cmp	r5, r3
 800a3d8:	bf08      	it	eq
 800a3da:	68f5      	ldreq	r5, [r6, #12]
 800a3dc:	e7da      	b.n	800a394 <_vfiprintf_r+0x20>
 800a3de:	89ab      	ldrh	r3, [r5, #12]
 800a3e0:	0598      	lsls	r0, r3, #22
 800a3e2:	d4ed      	bmi.n	800a3c0 <_vfiprintf_r+0x4c>
 800a3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3e6:	f000 fb76 	bl	800aad6 <__retarget_lock_release_recursive>
 800a3ea:	e7e9      	b.n	800a3c0 <_vfiprintf_r+0x4c>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f0:	2320      	movs	r3, #32
 800a3f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3fa:	2330      	movs	r3, #48	; 0x30
 800a3fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a5c0 <_vfiprintf_r+0x24c>
 800a400:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a404:	f04f 0901 	mov.w	r9, #1
 800a408:	4623      	mov	r3, r4
 800a40a:	469a      	mov	sl, r3
 800a40c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a410:	b10a      	cbz	r2, 800a416 <_vfiprintf_r+0xa2>
 800a412:	2a25      	cmp	r2, #37	; 0x25
 800a414:	d1f9      	bne.n	800a40a <_vfiprintf_r+0x96>
 800a416:	ebba 0b04 	subs.w	fp, sl, r4
 800a41a:	d00b      	beq.n	800a434 <_vfiprintf_r+0xc0>
 800a41c:	465b      	mov	r3, fp
 800a41e:	4622      	mov	r2, r4
 800a420:	4629      	mov	r1, r5
 800a422:	4630      	mov	r0, r6
 800a424:	f7ff ff93 	bl	800a34e <__sfputs_r>
 800a428:	3001      	adds	r0, #1
 800a42a:	f000 80aa 	beq.w	800a582 <_vfiprintf_r+0x20e>
 800a42e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a430:	445a      	add	r2, fp
 800a432:	9209      	str	r2, [sp, #36]	; 0x24
 800a434:	f89a 3000 	ldrb.w	r3, [sl]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f000 80a2 	beq.w	800a582 <_vfiprintf_r+0x20e>
 800a43e:	2300      	movs	r3, #0
 800a440:	f04f 32ff 	mov.w	r2, #4294967295
 800a444:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a448:	f10a 0a01 	add.w	sl, sl, #1
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	9307      	str	r3, [sp, #28]
 800a450:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a454:	931a      	str	r3, [sp, #104]	; 0x68
 800a456:	4654      	mov	r4, sl
 800a458:	2205      	movs	r2, #5
 800a45a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a45e:	4858      	ldr	r0, [pc, #352]	; (800a5c0 <_vfiprintf_r+0x24c>)
 800a460:	f7f5 fec6 	bl	80001f0 <memchr>
 800a464:	9a04      	ldr	r2, [sp, #16]
 800a466:	b9d8      	cbnz	r0, 800a4a0 <_vfiprintf_r+0x12c>
 800a468:	06d1      	lsls	r1, r2, #27
 800a46a:	bf44      	itt	mi
 800a46c:	2320      	movmi	r3, #32
 800a46e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a472:	0713      	lsls	r3, r2, #28
 800a474:	bf44      	itt	mi
 800a476:	232b      	movmi	r3, #43	; 0x2b
 800a478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a47c:	f89a 3000 	ldrb.w	r3, [sl]
 800a480:	2b2a      	cmp	r3, #42	; 0x2a
 800a482:	d015      	beq.n	800a4b0 <_vfiprintf_r+0x13c>
 800a484:	9a07      	ldr	r2, [sp, #28]
 800a486:	4654      	mov	r4, sl
 800a488:	2000      	movs	r0, #0
 800a48a:	f04f 0c0a 	mov.w	ip, #10
 800a48e:	4621      	mov	r1, r4
 800a490:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a494:	3b30      	subs	r3, #48	; 0x30
 800a496:	2b09      	cmp	r3, #9
 800a498:	d94e      	bls.n	800a538 <_vfiprintf_r+0x1c4>
 800a49a:	b1b0      	cbz	r0, 800a4ca <_vfiprintf_r+0x156>
 800a49c:	9207      	str	r2, [sp, #28]
 800a49e:	e014      	b.n	800a4ca <_vfiprintf_r+0x156>
 800a4a0:	eba0 0308 	sub.w	r3, r0, r8
 800a4a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	9304      	str	r3, [sp, #16]
 800a4ac:	46a2      	mov	sl, r4
 800a4ae:	e7d2      	b.n	800a456 <_vfiprintf_r+0xe2>
 800a4b0:	9b03      	ldr	r3, [sp, #12]
 800a4b2:	1d19      	adds	r1, r3, #4
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	9103      	str	r1, [sp, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bfbb      	ittet	lt
 800a4bc:	425b      	neglt	r3, r3
 800a4be:	f042 0202 	orrlt.w	r2, r2, #2
 800a4c2:	9307      	strge	r3, [sp, #28]
 800a4c4:	9307      	strlt	r3, [sp, #28]
 800a4c6:	bfb8      	it	lt
 800a4c8:	9204      	strlt	r2, [sp, #16]
 800a4ca:	7823      	ldrb	r3, [r4, #0]
 800a4cc:	2b2e      	cmp	r3, #46	; 0x2e
 800a4ce:	d10c      	bne.n	800a4ea <_vfiprintf_r+0x176>
 800a4d0:	7863      	ldrb	r3, [r4, #1]
 800a4d2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4d4:	d135      	bne.n	800a542 <_vfiprintf_r+0x1ce>
 800a4d6:	9b03      	ldr	r3, [sp, #12]
 800a4d8:	1d1a      	adds	r2, r3, #4
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	9203      	str	r2, [sp, #12]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	bfb8      	it	lt
 800a4e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4e6:	3402      	adds	r4, #2
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a5d0 <_vfiprintf_r+0x25c>
 800a4ee:	7821      	ldrb	r1, [r4, #0]
 800a4f0:	2203      	movs	r2, #3
 800a4f2:	4650      	mov	r0, sl
 800a4f4:	f7f5 fe7c 	bl	80001f0 <memchr>
 800a4f8:	b140      	cbz	r0, 800a50c <_vfiprintf_r+0x198>
 800a4fa:	2340      	movs	r3, #64	; 0x40
 800a4fc:	eba0 000a 	sub.w	r0, r0, sl
 800a500:	fa03 f000 	lsl.w	r0, r3, r0
 800a504:	9b04      	ldr	r3, [sp, #16]
 800a506:	4303      	orrs	r3, r0
 800a508:	3401      	adds	r4, #1
 800a50a:	9304      	str	r3, [sp, #16]
 800a50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a510:	482c      	ldr	r0, [pc, #176]	; (800a5c4 <_vfiprintf_r+0x250>)
 800a512:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a516:	2206      	movs	r2, #6
 800a518:	f7f5 fe6a 	bl	80001f0 <memchr>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d03f      	beq.n	800a5a0 <_vfiprintf_r+0x22c>
 800a520:	4b29      	ldr	r3, [pc, #164]	; (800a5c8 <_vfiprintf_r+0x254>)
 800a522:	bb1b      	cbnz	r3, 800a56c <_vfiprintf_r+0x1f8>
 800a524:	9b03      	ldr	r3, [sp, #12]
 800a526:	3307      	adds	r3, #7
 800a528:	f023 0307 	bic.w	r3, r3, #7
 800a52c:	3308      	adds	r3, #8
 800a52e:	9303      	str	r3, [sp, #12]
 800a530:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a532:	443b      	add	r3, r7
 800a534:	9309      	str	r3, [sp, #36]	; 0x24
 800a536:	e767      	b.n	800a408 <_vfiprintf_r+0x94>
 800a538:	fb0c 3202 	mla	r2, ip, r2, r3
 800a53c:	460c      	mov	r4, r1
 800a53e:	2001      	movs	r0, #1
 800a540:	e7a5      	b.n	800a48e <_vfiprintf_r+0x11a>
 800a542:	2300      	movs	r3, #0
 800a544:	3401      	adds	r4, #1
 800a546:	9305      	str	r3, [sp, #20]
 800a548:	4619      	mov	r1, r3
 800a54a:	f04f 0c0a 	mov.w	ip, #10
 800a54e:	4620      	mov	r0, r4
 800a550:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a554:	3a30      	subs	r2, #48	; 0x30
 800a556:	2a09      	cmp	r2, #9
 800a558:	d903      	bls.n	800a562 <_vfiprintf_r+0x1ee>
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d0c5      	beq.n	800a4ea <_vfiprintf_r+0x176>
 800a55e:	9105      	str	r1, [sp, #20]
 800a560:	e7c3      	b.n	800a4ea <_vfiprintf_r+0x176>
 800a562:	fb0c 2101 	mla	r1, ip, r1, r2
 800a566:	4604      	mov	r4, r0
 800a568:	2301      	movs	r3, #1
 800a56a:	e7f0      	b.n	800a54e <_vfiprintf_r+0x1da>
 800a56c:	ab03      	add	r3, sp, #12
 800a56e:	9300      	str	r3, [sp, #0]
 800a570:	462a      	mov	r2, r5
 800a572:	4b16      	ldr	r3, [pc, #88]	; (800a5cc <_vfiprintf_r+0x258>)
 800a574:	a904      	add	r1, sp, #16
 800a576:	4630      	mov	r0, r6
 800a578:	f7fc f890 	bl	800669c <_printf_float>
 800a57c:	4607      	mov	r7, r0
 800a57e:	1c78      	adds	r0, r7, #1
 800a580:	d1d6      	bne.n	800a530 <_vfiprintf_r+0x1bc>
 800a582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a584:	07d9      	lsls	r1, r3, #31
 800a586:	d405      	bmi.n	800a594 <_vfiprintf_r+0x220>
 800a588:	89ab      	ldrh	r3, [r5, #12]
 800a58a:	059a      	lsls	r2, r3, #22
 800a58c:	d402      	bmi.n	800a594 <_vfiprintf_r+0x220>
 800a58e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a590:	f000 faa1 	bl	800aad6 <__retarget_lock_release_recursive>
 800a594:	89ab      	ldrh	r3, [r5, #12]
 800a596:	065b      	lsls	r3, r3, #25
 800a598:	f53f af12 	bmi.w	800a3c0 <_vfiprintf_r+0x4c>
 800a59c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a59e:	e711      	b.n	800a3c4 <_vfiprintf_r+0x50>
 800a5a0:	ab03      	add	r3, sp, #12
 800a5a2:	9300      	str	r3, [sp, #0]
 800a5a4:	462a      	mov	r2, r5
 800a5a6:	4b09      	ldr	r3, [pc, #36]	; (800a5cc <_vfiprintf_r+0x258>)
 800a5a8:	a904      	add	r1, sp, #16
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f7fc fb1a 	bl	8006be4 <_printf_i>
 800a5b0:	e7e4      	b.n	800a57c <_vfiprintf_r+0x208>
 800a5b2:	bf00      	nop
 800a5b4:	0800b33c 	.word	0x0800b33c
 800a5b8:	0800b35c 	.word	0x0800b35c
 800a5bc:	0800b31c 	.word	0x0800b31c
 800a5c0:	0800b2cc 	.word	0x0800b2cc
 800a5c4:	0800b2d6 	.word	0x0800b2d6
 800a5c8:	0800669d 	.word	0x0800669d
 800a5cc:	0800a34f 	.word	0x0800a34f
 800a5d0:	0800b2d2 	.word	0x0800b2d2

0800a5d4 <__swbuf_r>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	460e      	mov	r6, r1
 800a5d8:	4614      	mov	r4, r2
 800a5da:	4605      	mov	r5, r0
 800a5dc:	b118      	cbz	r0, 800a5e6 <__swbuf_r+0x12>
 800a5de:	6983      	ldr	r3, [r0, #24]
 800a5e0:	b90b      	cbnz	r3, 800a5e6 <__swbuf_r+0x12>
 800a5e2:	f000 f9d9 	bl	800a998 <__sinit>
 800a5e6:	4b21      	ldr	r3, [pc, #132]	; (800a66c <__swbuf_r+0x98>)
 800a5e8:	429c      	cmp	r4, r3
 800a5ea:	d12b      	bne.n	800a644 <__swbuf_r+0x70>
 800a5ec:	686c      	ldr	r4, [r5, #4]
 800a5ee:	69a3      	ldr	r3, [r4, #24]
 800a5f0:	60a3      	str	r3, [r4, #8]
 800a5f2:	89a3      	ldrh	r3, [r4, #12]
 800a5f4:	071a      	lsls	r2, r3, #28
 800a5f6:	d52f      	bpl.n	800a658 <__swbuf_r+0x84>
 800a5f8:	6923      	ldr	r3, [r4, #16]
 800a5fa:	b36b      	cbz	r3, 800a658 <__swbuf_r+0x84>
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	6820      	ldr	r0, [r4, #0]
 800a600:	1ac0      	subs	r0, r0, r3
 800a602:	6963      	ldr	r3, [r4, #20]
 800a604:	b2f6      	uxtb	r6, r6
 800a606:	4283      	cmp	r3, r0
 800a608:	4637      	mov	r7, r6
 800a60a:	dc04      	bgt.n	800a616 <__swbuf_r+0x42>
 800a60c:	4621      	mov	r1, r4
 800a60e:	4628      	mov	r0, r5
 800a610:	f000 f92e 	bl	800a870 <_fflush_r>
 800a614:	bb30      	cbnz	r0, 800a664 <__swbuf_r+0x90>
 800a616:	68a3      	ldr	r3, [r4, #8]
 800a618:	3b01      	subs	r3, #1
 800a61a:	60a3      	str	r3, [r4, #8]
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	6022      	str	r2, [r4, #0]
 800a622:	701e      	strb	r6, [r3, #0]
 800a624:	6963      	ldr	r3, [r4, #20]
 800a626:	3001      	adds	r0, #1
 800a628:	4283      	cmp	r3, r0
 800a62a:	d004      	beq.n	800a636 <__swbuf_r+0x62>
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	07db      	lsls	r3, r3, #31
 800a630:	d506      	bpl.n	800a640 <__swbuf_r+0x6c>
 800a632:	2e0a      	cmp	r6, #10
 800a634:	d104      	bne.n	800a640 <__swbuf_r+0x6c>
 800a636:	4621      	mov	r1, r4
 800a638:	4628      	mov	r0, r5
 800a63a:	f000 f919 	bl	800a870 <_fflush_r>
 800a63e:	b988      	cbnz	r0, 800a664 <__swbuf_r+0x90>
 800a640:	4638      	mov	r0, r7
 800a642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a644:	4b0a      	ldr	r3, [pc, #40]	; (800a670 <__swbuf_r+0x9c>)
 800a646:	429c      	cmp	r4, r3
 800a648:	d101      	bne.n	800a64e <__swbuf_r+0x7a>
 800a64a:	68ac      	ldr	r4, [r5, #8]
 800a64c:	e7cf      	b.n	800a5ee <__swbuf_r+0x1a>
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <__swbuf_r+0xa0>)
 800a650:	429c      	cmp	r4, r3
 800a652:	bf08      	it	eq
 800a654:	68ec      	ldreq	r4, [r5, #12]
 800a656:	e7ca      	b.n	800a5ee <__swbuf_r+0x1a>
 800a658:	4621      	mov	r1, r4
 800a65a:	4628      	mov	r0, r5
 800a65c:	f000 f80c 	bl	800a678 <__swsetup_r>
 800a660:	2800      	cmp	r0, #0
 800a662:	d0cb      	beq.n	800a5fc <__swbuf_r+0x28>
 800a664:	f04f 37ff 	mov.w	r7, #4294967295
 800a668:	e7ea      	b.n	800a640 <__swbuf_r+0x6c>
 800a66a:	bf00      	nop
 800a66c:	0800b33c 	.word	0x0800b33c
 800a670:	0800b35c 	.word	0x0800b35c
 800a674:	0800b31c 	.word	0x0800b31c

0800a678 <__swsetup_r>:
 800a678:	4b32      	ldr	r3, [pc, #200]	; (800a744 <__swsetup_r+0xcc>)
 800a67a:	b570      	push	{r4, r5, r6, lr}
 800a67c:	681d      	ldr	r5, [r3, #0]
 800a67e:	4606      	mov	r6, r0
 800a680:	460c      	mov	r4, r1
 800a682:	b125      	cbz	r5, 800a68e <__swsetup_r+0x16>
 800a684:	69ab      	ldr	r3, [r5, #24]
 800a686:	b913      	cbnz	r3, 800a68e <__swsetup_r+0x16>
 800a688:	4628      	mov	r0, r5
 800a68a:	f000 f985 	bl	800a998 <__sinit>
 800a68e:	4b2e      	ldr	r3, [pc, #184]	; (800a748 <__swsetup_r+0xd0>)
 800a690:	429c      	cmp	r4, r3
 800a692:	d10f      	bne.n	800a6b4 <__swsetup_r+0x3c>
 800a694:	686c      	ldr	r4, [r5, #4]
 800a696:	89a3      	ldrh	r3, [r4, #12]
 800a698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a69c:	0719      	lsls	r1, r3, #28
 800a69e:	d42c      	bmi.n	800a6fa <__swsetup_r+0x82>
 800a6a0:	06dd      	lsls	r5, r3, #27
 800a6a2:	d411      	bmi.n	800a6c8 <__swsetup_r+0x50>
 800a6a4:	2309      	movs	r3, #9
 800a6a6:	6033      	str	r3, [r6, #0]
 800a6a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a6ac:	81a3      	strh	r3, [r4, #12]
 800a6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b2:	e03e      	b.n	800a732 <__swsetup_r+0xba>
 800a6b4:	4b25      	ldr	r3, [pc, #148]	; (800a74c <__swsetup_r+0xd4>)
 800a6b6:	429c      	cmp	r4, r3
 800a6b8:	d101      	bne.n	800a6be <__swsetup_r+0x46>
 800a6ba:	68ac      	ldr	r4, [r5, #8]
 800a6bc:	e7eb      	b.n	800a696 <__swsetup_r+0x1e>
 800a6be:	4b24      	ldr	r3, [pc, #144]	; (800a750 <__swsetup_r+0xd8>)
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	bf08      	it	eq
 800a6c4:	68ec      	ldreq	r4, [r5, #12]
 800a6c6:	e7e6      	b.n	800a696 <__swsetup_r+0x1e>
 800a6c8:	0758      	lsls	r0, r3, #29
 800a6ca:	d512      	bpl.n	800a6f2 <__swsetup_r+0x7a>
 800a6cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a6ce:	b141      	cbz	r1, 800a6e2 <__swsetup_r+0x6a>
 800a6d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	d002      	beq.n	800a6de <__swsetup_r+0x66>
 800a6d8:	4630      	mov	r0, r6
 800a6da:	f7ff fb65 	bl	8009da8 <_free_r>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a6e8:	81a3      	strh	r3, [r4, #12]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	6063      	str	r3, [r4, #4]
 800a6ee:	6923      	ldr	r3, [r4, #16]
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	89a3      	ldrh	r3, [r4, #12]
 800a6f4:	f043 0308 	orr.w	r3, r3, #8
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	6923      	ldr	r3, [r4, #16]
 800a6fc:	b94b      	cbnz	r3, 800a712 <__swsetup_r+0x9a>
 800a6fe:	89a3      	ldrh	r3, [r4, #12]
 800a700:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a704:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a708:	d003      	beq.n	800a712 <__swsetup_r+0x9a>
 800a70a:	4621      	mov	r1, r4
 800a70c:	4630      	mov	r0, r6
 800a70e:	f000 fa07 	bl	800ab20 <__smakebuf_r>
 800a712:	89a0      	ldrh	r0, [r4, #12]
 800a714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a718:	f010 0301 	ands.w	r3, r0, #1
 800a71c:	d00a      	beq.n	800a734 <__swsetup_r+0xbc>
 800a71e:	2300      	movs	r3, #0
 800a720:	60a3      	str	r3, [r4, #8]
 800a722:	6963      	ldr	r3, [r4, #20]
 800a724:	425b      	negs	r3, r3
 800a726:	61a3      	str	r3, [r4, #24]
 800a728:	6923      	ldr	r3, [r4, #16]
 800a72a:	b943      	cbnz	r3, 800a73e <__swsetup_r+0xc6>
 800a72c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a730:	d1ba      	bne.n	800a6a8 <__swsetup_r+0x30>
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	0781      	lsls	r1, r0, #30
 800a736:	bf58      	it	pl
 800a738:	6963      	ldrpl	r3, [r4, #20]
 800a73a:	60a3      	str	r3, [r4, #8]
 800a73c:	e7f4      	b.n	800a728 <__swsetup_r+0xb0>
 800a73e:	2000      	movs	r0, #0
 800a740:	e7f7      	b.n	800a732 <__swsetup_r+0xba>
 800a742:	bf00      	nop
 800a744:	20000020 	.word	0x20000020
 800a748:	0800b33c 	.word	0x0800b33c
 800a74c:	0800b35c 	.word	0x0800b35c
 800a750:	0800b31c 	.word	0x0800b31c

0800a754 <abort>:
 800a754:	b508      	push	{r3, lr}
 800a756:	2006      	movs	r0, #6
 800a758:	f000 fa52 	bl	800ac00 <raise>
 800a75c:	2001      	movs	r0, #1
 800a75e:	f7f9 fa7f 	bl	8003c60 <_exit>
	...

0800a764 <__sflush_r>:
 800a764:	898a      	ldrh	r2, [r1, #12]
 800a766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a76a:	4605      	mov	r5, r0
 800a76c:	0710      	lsls	r0, r2, #28
 800a76e:	460c      	mov	r4, r1
 800a770:	d458      	bmi.n	800a824 <__sflush_r+0xc0>
 800a772:	684b      	ldr	r3, [r1, #4]
 800a774:	2b00      	cmp	r3, #0
 800a776:	dc05      	bgt.n	800a784 <__sflush_r+0x20>
 800a778:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	dc02      	bgt.n	800a784 <__sflush_r+0x20>
 800a77e:	2000      	movs	r0, #0
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a786:	2e00      	cmp	r6, #0
 800a788:	d0f9      	beq.n	800a77e <__sflush_r+0x1a>
 800a78a:	2300      	movs	r3, #0
 800a78c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a790:	682f      	ldr	r7, [r5, #0]
 800a792:	602b      	str	r3, [r5, #0]
 800a794:	d032      	beq.n	800a7fc <__sflush_r+0x98>
 800a796:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	075a      	lsls	r2, r3, #29
 800a79c:	d505      	bpl.n	800a7aa <__sflush_r+0x46>
 800a79e:	6863      	ldr	r3, [r4, #4]
 800a7a0:	1ac0      	subs	r0, r0, r3
 800a7a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7a4:	b10b      	cbz	r3, 800a7aa <__sflush_r+0x46>
 800a7a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7a8:	1ac0      	subs	r0, r0, r3
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7b0:	6a21      	ldr	r1, [r4, #32]
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	47b0      	blx	r6
 800a7b6:	1c43      	adds	r3, r0, #1
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	d106      	bne.n	800a7ca <__sflush_r+0x66>
 800a7bc:	6829      	ldr	r1, [r5, #0]
 800a7be:	291d      	cmp	r1, #29
 800a7c0:	d82c      	bhi.n	800a81c <__sflush_r+0xb8>
 800a7c2:	4a2a      	ldr	r2, [pc, #168]	; (800a86c <__sflush_r+0x108>)
 800a7c4:	40ca      	lsrs	r2, r1
 800a7c6:	07d6      	lsls	r6, r2, #31
 800a7c8:	d528      	bpl.n	800a81c <__sflush_r+0xb8>
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	6062      	str	r2, [r4, #4]
 800a7ce:	04d9      	lsls	r1, r3, #19
 800a7d0:	6922      	ldr	r2, [r4, #16]
 800a7d2:	6022      	str	r2, [r4, #0]
 800a7d4:	d504      	bpl.n	800a7e0 <__sflush_r+0x7c>
 800a7d6:	1c42      	adds	r2, r0, #1
 800a7d8:	d101      	bne.n	800a7de <__sflush_r+0x7a>
 800a7da:	682b      	ldr	r3, [r5, #0]
 800a7dc:	b903      	cbnz	r3, 800a7e0 <__sflush_r+0x7c>
 800a7de:	6560      	str	r0, [r4, #84]	; 0x54
 800a7e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7e2:	602f      	str	r7, [r5, #0]
 800a7e4:	2900      	cmp	r1, #0
 800a7e6:	d0ca      	beq.n	800a77e <__sflush_r+0x1a>
 800a7e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7ec:	4299      	cmp	r1, r3
 800a7ee:	d002      	beq.n	800a7f6 <__sflush_r+0x92>
 800a7f0:	4628      	mov	r0, r5
 800a7f2:	f7ff fad9 	bl	8009da8 <_free_r>
 800a7f6:	2000      	movs	r0, #0
 800a7f8:	6360      	str	r0, [r4, #52]	; 0x34
 800a7fa:	e7c1      	b.n	800a780 <__sflush_r+0x1c>
 800a7fc:	6a21      	ldr	r1, [r4, #32]
 800a7fe:	2301      	movs	r3, #1
 800a800:	4628      	mov	r0, r5
 800a802:	47b0      	blx	r6
 800a804:	1c41      	adds	r1, r0, #1
 800a806:	d1c7      	bne.n	800a798 <__sflush_r+0x34>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d0c4      	beq.n	800a798 <__sflush_r+0x34>
 800a80e:	2b1d      	cmp	r3, #29
 800a810:	d001      	beq.n	800a816 <__sflush_r+0xb2>
 800a812:	2b16      	cmp	r3, #22
 800a814:	d101      	bne.n	800a81a <__sflush_r+0xb6>
 800a816:	602f      	str	r7, [r5, #0]
 800a818:	e7b1      	b.n	800a77e <__sflush_r+0x1a>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a820:	81a3      	strh	r3, [r4, #12]
 800a822:	e7ad      	b.n	800a780 <__sflush_r+0x1c>
 800a824:	690f      	ldr	r7, [r1, #16]
 800a826:	2f00      	cmp	r7, #0
 800a828:	d0a9      	beq.n	800a77e <__sflush_r+0x1a>
 800a82a:	0793      	lsls	r3, r2, #30
 800a82c:	680e      	ldr	r6, [r1, #0]
 800a82e:	bf08      	it	eq
 800a830:	694b      	ldreq	r3, [r1, #20]
 800a832:	600f      	str	r7, [r1, #0]
 800a834:	bf18      	it	ne
 800a836:	2300      	movne	r3, #0
 800a838:	eba6 0807 	sub.w	r8, r6, r7
 800a83c:	608b      	str	r3, [r1, #8]
 800a83e:	f1b8 0f00 	cmp.w	r8, #0
 800a842:	dd9c      	ble.n	800a77e <__sflush_r+0x1a>
 800a844:	6a21      	ldr	r1, [r4, #32]
 800a846:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a848:	4643      	mov	r3, r8
 800a84a:	463a      	mov	r2, r7
 800a84c:	4628      	mov	r0, r5
 800a84e:	47b0      	blx	r6
 800a850:	2800      	cmp	r0, #0
 800a852:	dc06      	bgt.n	800a862 <__sflush_r+0xfe>
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85a:	81a3      	strh	r3, [r4, #12]
 800a85c:	f04f 30ff 	mov.w	r0, #4294967295
 800a860:	e78e      	b.n	800a780 <__sflush_r+0x1c>
 800a862:	4407      	add	r7, r0
 800a864:	eba8 0800 	sub.w	r8, r8, r0
 800a868:	e7e9      	b.n	800a83e <__sflush_r+0xda>
 800a86a:	bf00      	nop
 800a86c:	20400001 	.word	0x20400001

0800a870 <_fflush_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	690b      	ldr	r3, [r1, #16]
 800a874:	4605      	mov	r5, r0
 800a876:	460c      	mov	r4, r1
 800a878:	b913      	cbnz	r3, 800a880 <_fflush_r+0x10>
 800a87a:	2500      	movs	r5, #0
 800a87c:	4628      	mov	r0, r5
 800a87e:	bd38      	pop	{r3, r4, r5, pc}
 800a880:	b118      	cbz	r0, 800a88a <_fflush_r+0x1a>
 800a882:	6983      	ldr	r3, [r0, #24]
 800a884:	b90b      	cbnz	r3, 800a88a <_fflush_r+0x1a>
 800a886:	f000 f887 	bl	800a998 <__sinit>
 800a88a:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <_fflush_r+0x6c>)
 800a88c:	429c      	cmp	r4, r3
 800a88e:	d11b      	bne.n	800a8c8 <_fflush_r+0x58>
 800a890:	686c      	ldr	r4, [r5, #4]
 800a892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d0ef      	beq.n	800a87a <_fflush_r+0xa>
 800a89a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a89c:	07d0      	lsls	r0, r2, #31
 800a89e:	d404      	bmi.n	800a8aa <_fflush_r+0x3a>
 800a8a0:	0599      	lsls	r1, r3, #22
 800a8a2:	d402      	bmi.n	800a8aa <_fflush_r+0x3a>
 800a8a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8a6:	f000 f915 	bl	800aad4 <__retarget_lock_acquire_recursive>
 800a8aa:	4628      	mov	r0, r5
 800a8ac:	4621      	mov	r1, r4
 800a8ae:	f7ff ff59 	bl	800a764 <__sflush_r>
 800a8b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8b4:	07da      	lsls	r2, r3, #31
 800a8b6:	4605      	mov	r5, r0
 800a8b8:	d4e0      	bmi.n	800a87c <_fflush_r+0xc>
 800a8ba:	89a3      	ldrh	r3, [r4, #12]
 800a8bc:	059b      	lsls	r3, r3, #22
 800a8be:	d4dd      	bmi.n	800a87c <_fflush_r+0xc>
 800a8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8c2:	f000 f908 	bl	800aad6 <__retarget_lock_release_recursive>
 800a8c6:	e7d9      	b.n	800a87c <_fflush_r+0xc>
 800a8c8:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <_fflush_r+0x70>)
 800a8ca:	429c      	cmp	r4, r3
 800a8cc:	d101      	bne.n	800a8d2 <_fflush_r+0x62>
 800a8ce:	68ac      	ldr	r4, [r5, #8]
 800a8d0:	e7df      	b.n	800a892 <_fflush_r+0x22>
 800a8d2:	4b04      	ldr	r3, [pc, #16]	; (800a8e4 <_fflush_r+0x74>)
 800a8d4:	429c      	cmp	r4, r3
 800a8d6:	bf08      	it	eq
 800a8d8:	68ec      	ldreq	r4, [r5, #12]
 800a8da:	e7da      	b.n	800a892 <_fflush_r+0x22>
 800a8dc:	0800b33c 	.word	0x0800b33c
 800a8e0:	0800b35c 	.word	0x0800b35c
 800a8e4:	0800b31c 	.word	0x0800b31c

0800a8e8 <std>:
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	b510      	push	{r4, lr}
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	e9c0 3300 	strd	r3, r3, [r0]
 800a8f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8f6:	6083      	str	r3, [r0, #8]
 800a8f8:	8181      	strh	r1, [r0, #12]
 800a8fa:	6643      	str	r3, [r0, #100]	; 0x64
 800a8fc:	81c2      	strh	r2, [r0, #14]
 800a8fe:	6183      	str	r3, [r0, #24]
 800a900:	4619      	mov	r1, r3
 800a902:	2208      	movs	r2, #8
 800a904:	305c      	adds	r0, #92	; 0x5c
 800a906:	f7fb fe21 	bl	800654c <memset>
 800a90a:	4b05      	ldr	r3, [pc, #20]	; (800a920 <std+0x38>)
 800a90c:	6263      	str	r3, [r4, #36]	; 0x24
 800a90e:	4b05      	ldr	r3, [pc, #20]	; (800a924 <std+0x3c>)
 800a910:	62a3      	str	r3, [r4, #40]	; 0x28
 800a912:	4b05      	ldr	r3, [pc, #20]	; (800a928 <std+0x40>)
 800a914:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a916:	4b05      	ldr	r3, [pc, #20]	; (800a92c <std+0x44>)
 800a918:	6224      	str	r4, [r4, #32]
 800a91a:	6323      	str	r3, [r4, #48]	; 0x30
 800a91c:	bd10      	pop	{r4, pc}
 800a91e:	bf00      	nop
 800a920:	0800ac39 	.word	0x0800ac39
 800a924:	0800ac5b 	.word	0x0800ac5b
 800a928:	0800ac93 	.word	0x0800ac93
 800a92c:	0800acb7 	.word	0x0800acb7

0800a930 <_cleanup_r>:
 800a930:	4901      	ldr	r1, [pc, #4]	; (800a938 <_cleanup_r+0x8>)
 800a932:	f000 b8af 	b.w	800aa94 <_fwalk_reent>
 800a936:	bf00      	nop
 800a938:	0800a871 	.word	0x0800a871

0800a93c <__sfmoreglue>:
 800a93c:	b570      	push	{r4, r5, r6, lr}
 800a93e:	1e4a      	subs	r2, r1, #1
 800a940:	2568      	movs	r5, #104	; 0x68
 800a942:	4355      	muls	r5, r2
 800a944:	460e      	mov	r6, r1
 800a946:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a94a:	f7ff fa7d 	bl	8009e48 <_malloc_r>
 800a94e:	4604      	mov	r4, r0
 800a950:	b140      	cbz	r0, 800a964 <__sfmoreglue+0x28>
 800a952:	2100      	movs	r1, #0
 800a954:	e9c0 1600 	strd	r1, r6, [r0]
 800a958:	300c      	adds	r0, #12
 800a95a:	60a0      	str	r0, [r4, #8]
 800a95c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a960:	f7fb fdf4 	bl	800654c <memset>
 800a964:	4620      	mov	r0, r4
 800a966:	bd70      	pop	{r4, r5, r6, pc}

0800a968 <__sfp_lock_acquire>:
 800a968:	4801      	ldr	r0, [pc, #4]	; (800a970 <__sfp_lock_acquire+0x8>)
 800a96a:	f000 b8b3 	b.w	800aad4 <__retarget_lock_acquire_recursive>
 800a96e:	bf00      	nop
 800a970:	20000398 	.word	0x20000398

0800a974 <__sfp_lock_release>:
 800a974:	4801      	ldr	r0, [pc, #4]	; (800a97c <__sfp_lock_release+0x8>)
 800a976:	f000 b8ae 	b.w	800aad6 <__retarget_lock_release_recursive>
 800a97a:	bf00      	nop
 800a97c:	20000398 	.word	0x20000398

0800a980 <__sinit_lock_acquire>:
 800a980:	4801      	ldr	r0, [pc, #4]	; (800a988 <__sinit_lock_acquire+0x8>)
 800a982:	f000 b8a7 	b.w	800aad4 <__retarget_lock_acquire_recursive>
 800a986:	bf00      	nop
 800a988:	20000393 	.word	0x20000393

0800a98c <__sinit_lock_release>:
 800a98c:	4801      	ldr	r0, [pc, #4]	; (800a994 <__sinit_lock_release+0x8>)
 800a98e:	f000 b8a2 	b.w	800aad6 <__retarget_lock_release_recursive>
 800a992:	bf00      	nop
 800a994:	20000393 	.word	0x20000393

0800a998 <__sinit>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	4604      	mov	r4, r0
 800a99c:	f7ff fff0 	bl	800a980 <__sinit_lock_acquire>
 800a9a0:	69a3      	ldr	r3, [r4, #24]
 800a9a2:	b11b      	cbz	r3, 800a9ac <__sinit+0x14>
 800a9a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9a8:	f7ff bff0 	b.w	800a98c <__sinit_lock_release>
 800a9ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9b0:	6523      	str	r3, [r4, #80]	; 0x50
 800a9b2:	4b13      	ldr	r3, [pc, #76]	; (800aa00 <__sinit+0x68>)
 800a9b4:	4a13      	ldr	r2, [pc, #76]	; (800aa04 <__sinit+0x6c>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9ba:	42a3      	cmp	r3, r4
 800a9bc:	bf04      	itt	eq
 800a9be:	2301      	moveq	r3, #1
 800a9c0:	61a3      	streq	r3, [r4, #24]
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f000 f820 	bl	800aa08 <__sfp>
 800a9c8:	6060      	str	r0, [r4, #4]
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f000 f81c 	bl	800aa08 <__sfp>
 800a9d0:	60a0      	str	r0, [r4, #8]
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 f818 	bl	800aa08 <__sfp>
 800a9d8:	2200      	movs	r2, #0
 800a9da:	60e0      	str	r0, [r4, #12]
 800a9dc:	2104      	movs	r1, #4
 800a9de:	6860      	ldr	r0, [r4, #4]
 800a9e0:	f7ff ff82 	bl	800a8e8 <std>
 800a9e4:	68a0      	ldr	r0, [r4, #8]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	2109      	movs	r1, #9
 800a9ea:	f7ff ff7d 	bl	800a8e8 <std>
 800a9ee:	68e0      	ldr	r0, [r4, #12]
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	2112      	movs	r1, #18
 800a9f4:	f7ff ff78 	bl	800a8e8 <std>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	61a3      	str	r3, [r4, #24]
 800a9fc:	e7d2      	b.n	800a9a4 <__sinit+0xc>
 800a9fe:	bf00      	nop
 800aa00:	0800aec8 	.word	0x0800aec8
 800aa04:	0800a931 	.word	0x0800a931

0800aa08 <__sfp>:
 800aa08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa0a:	4607      	mov	r7, r0
 800aa0c:	f7ff ffac 	bl	800a968 <__sfp_lock_acquire>
 800aa10:	4b1e      	ldr	r3, [pc, #120]	; (800aa8c <__sfp+0x84>)
 800aa12:	681e      	ldr	r6, [r3, #0]
 800aa14:	69b3      	ldr	r3, [r6, #24]
 800aa16:	b913      	cbnz	r3, 800aa1e <__sfp+0x16>
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7ff ffbd 	bl	800a998 <__sinit>
 800aa1e:	3648      	adds	r6, #72	; 0x48
 800aa20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa24:	3b01      	subs	r3, #1
 800aa26:	d503      	bpl.n	800aa30 <__sfp+0x28>
 800aa28:	6833      	ldr	r3, [r6, #0]
 800aa2a:	b30b      	cbz	r3, 800aa70 <__sfp+0x68>
 800aa2c:	6836      	ldr	r6, [r6, #0]
 800aa2e:	e7f7      	b.n	800aa20 <__sfp+0x18>
 800aa30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa34:	b9d5      	cbnz	r5, 800aa6c <__sfp+0x64>
 800aa36:	4b16      	ldr	r3, [pc, #88]	; (800aa90 <__sfp+0x88>)
 800aa38:	60e3      	str	r3, [r4, #12]
 800aa3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa3e:	6665      	str	r5, [r4, #100]	; 0x64
 800aa40:	f000 f847 	bl	800aad2 <__retarget_lock_init_recursive>
 800aa44:	f7ff ff96 	bl	800a974 <__sfp_lock_release>
 800aa48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa50:	6025      	str	r5, [r4, #0]
 800aa52:	61a5      	str	r5, [r4, #24]
 800aa54:	2208      	movs	r2, #8
 800aa56:	4629      	mov	r1, r5
 800aa58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa5c:	f7fb fd76 	bl	800654c <memset>
 800aa60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aa64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aa68:	4620      	mov	r0, r4
 800aa6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa6c:	3468      	adds	r4, #104	; 0x68
 800aa6e:	e7d9      	b.n	800aa24 <__sfp+0x1c>
 800aa70:	2104      	movs	r1, #4
 800aa72:	4638      	mov	r0, r7
 800aa74:	f7ff ff62 	bl	800a93c <__sfmoreglue>
 800aa78:	4604      	mov	r4, r0
 800aa7a:	6030      	str	r0, [r6, #0]
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	d1d5      	bne.n	800aa2c <__sfp+0x24>
 800aa80:	f7ff ff78 	bl	800a974 <__sfp_lock_release>
 800aa84:	230c      	movs	r3, #12
 800aa86:	603b      	str	r3, [r7, #0]
 800aa88:	e7ee      	b.n	800aa68 <__sfp+0x60>
 800aa8a:	bf00      	nop
 800aa8c:	0800aec8 	.word	0x0800aec8
 800aa90:	ffff0001 	.word	0xffff0001

0800aa94 <_fwalk_reent>:
 800aa94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa98:	4606      	mov	r6, r0
 800aa9a:	4688      	mov	r8, r1
 800aa9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aaa0:	2700      	movs	r7, #0
 800aaa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aaa6:	f1b9 0901 	subs.w	r9, r9, #1
 800aaaa:	d505      	bpl.n	800aab8 <_fwalk_reent+0x24>
 800aaac:	6824      	ldr	r4, [r4, #0]
 800aaae:	2c00      	cmp	r4, #0
 800aab0:	d1f7      	bne.n	800aaa2 <_fwalk_reent+0xe>
 800aab2:	4638      	mov	r0, r7
 800aab4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aab8:	89ab      	ldrh	r3, [r5, #12]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d907      	bls.n	800aace <_fwalk_reent+0x3a>
 800aabe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aac2:	3301      	adds	r3, #1
 800aac4:	d003      	beq.n	800aace <_fwalk_reent+0x3a>
 800aac6:	4629      	mov	r1, r5
 800aac8:	4630      	mov	r0, r6
 800aaca:	47c0      	blx	r8
 800aacc:	4307      	orrs	r7, r0
 800aace:	3568      	adds	r5, #104	; 0x68
 800aad0:	e7e9      	b.n	800aaa6 <_fwalk_reent+0x12>

0800aad2 <__retarget_lock_init_recursive>:
 800aad2:	4770      	bx	lr

0800aad4 <__retarget_lock_acquire_recursive>:
 800aad4:	4770      	bx	lr

0800aad6 <__retarget_lock_release_recursive>:
 800aad6:	4770      	bx	lr

0800aad8 <__swhatbuf_r>:
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	460e      	mov	r6, r1
 800aadc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aae0:	2900      	cmp	r1, #0
 800aae2:	b096      	sub	sp, #88	; 0x58
 800aae4:	4614      	mov	r4, r2
 800aae6:	461d      	mov	r5, r3
 800aae8:	da07      	bge.n	800aafa <__swhatbuf_r+0x22>
 800aaea:	2300      	movs	r3, #0
 800aaec:	602b      	str	r3, [r5, #0]
 800aaee:	89b3      	ldrh	r3, [r6, #12]
 800aaf0:	061a      	lsls	r2, r3, #24
 800aaf2:	d410      	bmi.n	800ab16 <__swhatbuf_r+0x3e>
 800aaf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaf8:	e00e      	b.n	800ab18 <__swhatbuf_r+0x40>
 800aafa:	466a      	mov	r2, sp
 800aafc:	f000 f902 	bl	800ad04 <_fstat_r>
 800ab00:	2800      	cmp	r0, #0
 800ab02:	dbf2      	blt.n	800aaea <__swhatbuf_r+0x12>
 800ab04:	9a01      	ldr	r2, [sp, #4]
 800ab06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab0e:	425a      	negs	r2, r3
 800ab10:	415a      	adcs	r2, r3
 800ab12:	602a      	str	r2, [r5, #0]
 800ab14:	e7ee      	b.n	800aaf4 <__swhatbuf_r+0x1c>
 800ab16:	2340      	movs	r3, #64	; 0x40
 800ab18:	2000      	movs	r0, #0
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	b016      	add	sp, #88	; 0x58
 800ab1e:	bd70      	pop	{r4, r5, r6, pc}

0800ab20 <__smakebuf_r>:
 800ab20:	898b      	ldrh	r3, [r1, #12]
 800ab22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab24:	079d      	lsls	r5, r3, #30
 800ab26:	4606      	mov	r6, r0
 800ab28:	460c      	mov	r4, r1
 800ab2a:	d507      	bpl.n	800ab3c <__smakebuf_r+0x1c>
 800ab2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab30:	6023      	str	r3, [r4, #0]
 800ab32:	6123      	str	r3, [r4, #16]
 800ab34:	2301      	movs	r3, #1
 800ab36:	6163      	str	r3, [r4, #20]
 800ab38:	b002      	add	sp, #8
 800ab3a:	bd70      	pop	{r4, r5, r6, pc}
 800ab3c:	ab01      	add	r3, sp, #4
 800ab3e:	466a      	mov	r2, sp
 800ab40:	f7ff ffca 	bl	800aad8 <__swhatbuf_r>
 800ab44:	9900      	ldr	r1, [sp, #0]
 800ab46:	4605      	mov	r5, r0
 800ab48:	4630      	mov	r0, r6
 800ab4a:	f7ff f97d 	bl	8009e48 <_malloc_r>
 800ab4e:	b948      	cbnz	r0, 800ab64 <__smakebuf_r+0x44>
 800ab50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab54:	059a      	lsls	r2, r3, #22
 800ab56:	d4ef      	bmi.n	800ab38 <__smakebuf_r+0x18>
 800ab58:	f023 0303 	bic.w	r3, r3, #3
 800ab5c:	f043 0302 	orr.w	r3, r3, #2
 800ab60:	81a3      	strh	r3, [r4, #12]
 800ab62:	e7e3      	b.n	800ab2c <__smakebuf_r+0xc>
 800ab64:	4b0d      	ldr	r3, [pc, #52]	; (800ab9c <__smakebuf_r+0x7c>)
 800ab66:	62b3      	str	r3, [r6, #40]	; 0x28
 800ab68:	89a3      	ldrh	r3, [r4, #12]
 800ab6a:	6020      	str	r0, [r4, #0]
 800ab6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab70:	81a3      	strh	r3, [r4, #12]
 800ab72:	9b00      	ldr	r3, [sp, #0]
 800ab74:	6163      	str	r3, [r4, #20]
 800ab76:	9b01      	ldr	r3, [sp, #4]
 800ab78:	6120      	str	r0, [r4, #16]
 800ab7a:	b15b      	cbz	r3, 800ab94 <__smakebuf_r+0x74>
 800ab7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab80:	4630      	mov	r0, r6
 800ab82:	f000 f8d1 	bl	800ad28 <_isatty_r>
 800ab86:	b128      	cbz	r0, 800ab94 <__smakebuf_r+0x74>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f023 0303 	bic.w	r3, r3, #3
 800ab8e:	f043 0301 	orr.w	r3, r3, #1
 800ab92:	81a3      	strh	r3, [r4, #12]
 800ab94:	89a0      	ldrh	r0, [r4, #12]
 800ab96:	4305      	orrs	r5, r0
 800ab98:	81a5      	strh	r5, [r4, #12]
 800ab9a:	e7cd      	b.n	800ab38 <__smakebuf_r+0x18>
 800ab9c:	0800a931 	.word	0x0800a931

0800aba0 <_malloc_usable_size_r>:
 800aba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aba4:	1f18      	subs	r0, r3, #4
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	bfbc      	itt	lt
 800abaa:	580b      	ldrlt	r3, [r1, r0]
 800abac:	18c0      	addlt	r0, r0, r3
 800abae:	4770      	bx	lr

0800abb0 <_raise_r>:
 800abb0:	291f      	cmp	r1, #31
 800abb2:	b538      	push	{r3, r4, r5, lr}
 800abb4:	4604      	mov	r4, r0
 800abb6:	460d      	mov	r5, r1
 800abb8:	d904      	bls.n	800abc4 <_raise_r+0x14>
 800abba:	2316      	movs	r3, #22
 800abbc:	6003      	str	r3, [r0, #0]
 800abbe:	f04f 30ff 	mov.w	r0, #4294967295
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800abc6:	b112      	cbz	r2, 800abce <_raise_r+0x1e>
 800abc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abcc:	b94b      	cbnz	r3, 800abe2 <_raise_r+0x32>
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 f830 	bl	800ac34 <_getpid_r>
 800abd4:	462a      	mov	r2, r5
 800abd6:	4601      	mov	r1, r0
 800abd8:	4620      	mov	r0, r4
 800abda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abde:	f000 b817 	b.w	800ac10 <_kill_r>
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d00a      	beq.n	800abfc <_raise_r+0x4c>
 800abe6:	1c59      	adds	r1, r3, #1
 800abe8:	d103      	bne.n	800abf2 <_raise_r+0x42>
 800abea:	2316      	movs	r3, #22
 800abec:	6003      	str	r3, [r0, #0]
 800abee:	2001      	movs	r0, #1
 800abf0:	e7e7      	b.n	800abc2 <_raise_r+0x12>
 800abf2:	2400      	movs	r4, #0
 800abf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800abf8:	4628      	mov	r0, r5
 800abfa:	4798      	blx	r3
 800abfc:	2000      	movs	r0, #0
 800abfe:	e7e0      	b.n	800abc2 <_raise_r+0x12>

0800ac00 <raise>:
 800ac00:	4b02      	ldr	r3, [pc, #8]	; (800ac0c <raise+0xc>)
 800ac02:	4601      	mov	r1, r0
 800ac04:	6818      	ldr	r0, [r3, #0]
 800ac06:	f7ff bfd3 	b.w	800abb0 <_raise_r>
 800ac0a:	bf00      	nop
 800ac0c:	20000020 	.word	0x20000020

0800ac10 <_kill_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d07      	ldr	r5, [pc, #28]	; (800ac30 <_kill_r+0x20>)
 800ac14:	2300      	movs	r3, #0
 800ac16:	4604      	mov	r4, r0
 800ac18:	4608      	mov	r0, r1
 800ac1a:	4611      	mov	r1, r2
 800ac1c:	602b      	str	r3, [r5, #0]
 800ac1e:	f7f9 f80f 	bl	8003c40 <_kill>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	d102      	bne.n	800ac2c <_kill_r+0x1c>
 800ac26:	682b      	ldr	r3, [r5, #0]
 800ac28:	b103      	cbz	r3, 800ac2c <_kill_r+0x1c>
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	bd38      	pop	{r3, r4, r5, pc}
 800ac2e:	bf00      	nop
 800ac30:	2000038c 	.word	0x2000038c

0800ac34 <_getpid_r>:
 800ac34:	f7f8 bffc 	b.w	8003c30 <_getpid>

0800ac38 <__sread>:
 800ac38:	b510      	push	{r4, lr}
 800ac3a:	460c      	mov	r4, r1
 800ac3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac40:	f000 f894 	bl	800ad6c <_read_r>
 800ac44:	2800      	cmp	r0, #0
 800ac46:	bfab      	itete	ge
 800ac48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac4c:	181b      	addge	r3, r3, r0
 800ac4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac52:	bfac      	ite	ge
 800ac54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac56:	81a3      	strhlt	r3, [r4, #12]
 800ac58:	bd10      	pop	{r4, pc}

0800ac5a <__swrite>:
 800ac5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac5e:	461f      	mov	r7, r3
 800ac60:	898b      	ldrh	r3, [r1, #12]
 800ac62:	05db      	lsls	r3, r3, #23
 800ac64:	4605      	mov	r5, r0
 800ac66:	460c      	mov	r4, r1
 800ac68:	4616      	mov	r6, r2
 800ac6a:	d505      	bpl.n	800ac78 <__swrite+0x1e>
 800ac6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac70:	2302      	movs	r3, #2
 800ac72:	2200      	movs	r2, #0
 800ac74:	f000 f868 	bl	800ad48 <_lseek_r>
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac82:	81a3      	strh	r3, [r4, #12]
 800ac84:	4632      	mov	r2, r6
 800ac86:	463b      	mov	r3, r7
 800ac88:	4628      	mov	r0, r5
 800ac8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac8e:	f000 b817 	b.w	800acc0 <_write_r>

0800ac92 <__sseek>:
 800ac92:	b510      	push	{r4, lr}
 800ac94:	460c      	mov	r4, r1
 800ac96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac9a:	f000 f855 	bl	800ad48 <_lseek_r>
 800ac9e:	1c43      	adds	r3, r0, #1
 800aca0:	89a3      	ldrh	r3, [r4, #12]
 800aca2:	bf15      	itete	ne
 800aca4:	6560      	strne	r0, [r4, #84]	; 0x54
 800aca6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acae:	81a3      	strheq	r3, [r4, #12]
 800acb0:	bf18      	it	ne
 800acb2:	81a3      	strhne	r3, [r4, #12]
 800acb4:	bd10      	pop	{r4, pc}

0800acb6 <__sclose>:
 800acb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acba:	f000 b813 	b.w	800ace4 <_close_r>
	...

0800acc0 <_write_r>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	4d07      	ldr	r5, [pc, #28]	; (800ace0 <_write_r+0x20>)
 800acc4:	4604      	mov	r4, r0
 800acc6:	4608      	mov	r0, r1
 800acc8:	4611      	mov	r1, r2
 800acca:	2200      	movs	r2, #0
 800accc:	602a      	str	r2, [r5, #0]
 800acce:	461a      	mov	r2, r3
 800acd0:	f7f8 ffed 	bl	8003cae <_write>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_write_r+0x1e>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_write_r+0x1e>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	2000038c 	.word	0x2000038c

0800ace4 <_close_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d06      	ldr	r5, [pc, #24]	; (800ad00 <_close_r+0x1c>)
 800ace8:	2300      	movs	r3, #0
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	f7f8 fff9 	bl	8003ce6 <_close>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d102      	bne.n	800acfe <_close_r+0x1a>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	b103      	cbz	r3, 800acfe <_close_r+0x1a>
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	2000038c 	.word	0x2000038c

0800ad04 <_fstat_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4d07      	ldr	r5, [pc, #28]	; (800ad24 <_fstat_r+0x20>)
 800ad08:	2300      	movs	r3, #0
 800ad0a:	4604      	mov	r4, r0
 800ad0c:	4608      	mov	r0, r1
 800ad0e:	4611      	mov	r1, r2
 800ad10:	602b      	str	r3, [r5, #0]
 800ad12:	f7f8 fff4 	bl	8003cfe <_fstat>
 800ad16:	1c43      	adds	r3, r0, #1
 800ad18:	d102      	bne.n	800ad20 <_fstat_r+0x1c>
 800ad1a:	682b      	ldr	r3, [r5, #0]
 800ad1c:	b103      	cbz	r3, 800ad20 <_fstat_r+0x1c>
 800ad1e:	6023      	str	r3, [r4, #0]
 800ad20:	bd38      	pop	{r3, r4, r5, pc}
 800ad22:	bf00      	nop
 800ad24:	2000038c 	.word	0x2000038c

0800ad28 <_isatty_r>:
 800ad28:	b538      	push	{r3, r4, r5, lr}
 800ad2a:	4d06      	ldr	r5, [pc, #24]	; (800ad44 <_isatty_r+0x1c>)
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	4604      	mov	r4, r0
 800ad30:	4608      	mov	r0, r1
 800ad32:	602b      	str	r3, [r5, #0]
 800ad34:	f7f8 fff3 	bl	8003d1e <_isatty>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <_isatty_r+0x1a>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	b103      	cbz	r3, 800ad42 <_isatty_r+0x1a>
 800ad40:	6023      	str	r3, [r4, #0]
 800ad42:	bd38      	pop	{r3, r4, r5, pc}
 800ad44:	2000038c 	.word	0x2000038c

0800ad48 <_lseek_r>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	4d07      	ldr	r5, [pc, #28]	; (800ad68 <_lseek_r+0x20>)
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	4611      	mov	r1, r2
 800ad52:	2200      	movs	r2, #0
 800ad54:	602a      	str	r2, [r5, #0]
 800ad56:	461a      	mov	r2, r3
 800ad58:	f7f8 ffec 	bl	8003d34 <_lseek>
 800ad5c:	1c43      	adds	r3, r0, #1
 800ad5e:	d102      	bne.n	800ad66 <_lseek_r+0x1e>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	b103      	cbz	r3, 800ad66 <_lseek_r+0x1e>
 800ad64:	6023      	str	r3, [r4, #0]
 800ad66:	bd38      	pop	{r3, r4, r5, pc}
 800ad68:	2000038c 	.word	0x2000038c

0800ad6c <_read_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d07      	ldr	r5, [pc, #28]	; (800ad8c <_read_r+0x20>)
 800ad70:	4604      	mov	r4, r0
 800ad72:	4608      	mov	r0, r1
 800ad74:	4611      	mov	r1, r2
 800ad76:	2200      	movs	r2, #0
 800ad78:	602a      	str	r2, [r5, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	f7f8 ff7a 	bl	8003c74 <_read>
 800ad80:	1c43      	adds	r3, r0, #1
 800ad82:	d102      	bne.n	800ad8a <_read_r+0x1e>
 800ad84:	682b      	ldr	r3, [r5, #0]
 800ad86:	b103      	cbz	r3, 800ad8a <_read_r+0x1e>
 800ad88:	6023      	str	r3, [r4, #0]
 800ad8a:	bd38      	pop	{r3, r4, r5, pc}
 800ad8c:	2000038c 	.word	0x2000038c

0800ad90 <_init>:
 800ad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad92:	bf00      	nop
 800ad94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad96:	bc08      	pop	{r3}
 800ad98:	469e      	mov	lr, r3
 800ad9a:	4770      	bx	lr

0800ad9c <_fini>:
 800ad9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad9e:	bf00      	nop
 800ada0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada2:	bc08      	pop	{r3}
 800ada4:	469e      	mov	lr, r3
 800ada6:	4770      	bx	lr
